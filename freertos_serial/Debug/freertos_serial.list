
freertos_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b120  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800b2b0  0800b2b0  0001b2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b738  0800b738  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b738  0800b738  0001b738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b740  0800b740  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b740  0800b740  0001b740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b744  0800b744  0001b744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  20000074  0800b7bc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001290  0800b7bc  00021290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab2e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003538  00000000  00000000  0003abd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  0003e110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f0  00000000  00000000  0003f940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b490  00000000  00000000  00041030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3ff  00000000  00000000  0006c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111666  00000000  00000000  000868bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00197f25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007854  00000000  00000000  00197f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b298 	.word	0x0800b298

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800b298 	.word	0x0800b298

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c30:	f000 b974 	b.w	8000f1c <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468e      	mov	lr, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14d      	bne.n	8000cf6 <__udivmoddi4+0xaa>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	d969      	bls.n	8000d34 <__udivmoddi4+0xe8>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b152      	cbz	r2, 8000c7c <__udivmoddi4+0x30>
 8000c66:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6a:	f1c2 0120 	rsb	r1, r2, #32
 8000c6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c76:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	0c21      	lsrs	r1, r4, #16
 8000c82:	fbbe f6f8 	udiv	r6, lr, r8
 8000c86:	fa1f f78c 	uxth.w	r7, ip
 8000c8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c92:	fb06 f107 	mul.w	r1, r6, r7
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x64>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ca2:	f080 811f 	bcs.w	8000ee4 <__udivmoddi4+0x298>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 811c 	bls.w	8000ee4 <__udivmoddi4+0x298>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	4463      	add	r3, ip
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc0:	fb00 f707 	mul.w	r7, r0, r7
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x92>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd0:	f080 810a 	bcs.w	8000ee8 <__udivmoddi4+0x29c>
 8000cd4:	42a7      	cmp	r7, r4
 8000cd6:	f240 8107 	bls.w	8000ee8 <__udivmoddi4+0x29c>
 8000cda:	4464      	add	r4, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	1be4      	subs	r4, r4, r7
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	b11d      	cbz	r5, 8000cf0 <__udivmoddi4+0xa4>
 8000ce8:	40d4      	lsrs	r4, r2
 8000cea:	2300      	movs	r3, #0
 8000cec:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d909      	bls.n	8000d0e <__udivmoddi4+0xc2>
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	f000 80ef 	beq.w	8000ede <__udivmoddi4+0x292>
 8000d00:	2600      	movs	r6, #0
 8000d02:	e9c5 0100 	strd	r0, r1, [r5]
 8000d06:	4630      	mov	r0, r6
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	fab3 f683 	clz	r6, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d14a      	bne.n	8000dac <__udivmoddi4+0x160>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xd4>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80f9 	bhi.w	8000f12 <__udivmoddi4+0x2c6>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb61 0303 	sbc.w	r3, r1, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	469e      	mov	lr, r3
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e0      	beq.n	8000cf0 <__udivmoddi4+0xa4>
 8000d2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d32:	e7dd      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000d34:	b902      	cbnz	r2, 8000d38 <__udivmoddi4+0xec>
 8000d36:	deff      	udf	#255	; 0xff
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	f040 8092 	bne.w	8000e66 <__udivmoddi4+0x21a>
 8000d42:	eba1 010c 	sub.w	r1, r1, ip
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f fe8c 	uxth.w	lr, ip
 8000d4e:	2601      	movs	r6, #1
 8000d50:	0c20      	lsrs	r0, r4, #16
 8000d52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d56:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5e:	fb0e f003 	mul.w	r0, lr, r3
 8000d62:	4288      	cmp	r0, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x12c>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x12a>
 8000d70:	4288      	cmp	r0, r1
 8000d72:	f200 80cb 	bhi.w	8000f0c <__udivmoddi4+0x2c0>
 8000d76:	4643      	mov	r3, r8
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d80:	fb07 1110 	mls	r1, r7, r0, r1
 8000d84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d88:	fb0e fe00 	mul.w	lr, lr, r0
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x156>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x154>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 80bb 	bhi.w	8000f16 <__udivmoddi4+0x2ca>
 8000da0:	4608      	mov	r0, r1
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000dac:	f1c6 0720 	rsb	r7, r6, #32
 8000db0:	40b3      	lsls	r3, r6
 8000db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa20 f407 	lsr.w	r4, r0, r7
 8000dbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	40f9      	lsrs	r1, r7
 8000dc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dca:	fa00 f306 	lsl.w	r3, r0, r6
 8000dce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd2:	0c20      	lsrs	r0, r4, #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ddc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de0:	fb08 f00e 	mul.w	r0, r8, lr
 8000de4:	4288      	cmp	r0, r1
 8000de6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b8>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df4:	f080 8088 	bcs.w	8000f08 <__udivmoddi4+0x2bc>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f240 8085 	bls.w	8000f08 <__udivmoddi4+0x2bc>
 8000dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e18:	458e      	cmp	lr, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1e2>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e24:	d26c      	bcs.n	8000f00 <__udivmoddi4+0x2b4>
 8000e26:	458e      	cmp	lr, r1
 8000e28:	d96a      	bls.n	8000f00 <__udivmoddi4+0x2b4>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e32:	fba0 9402 	umull	r9, r4, r0, r2
 8000e36:	eba1 010e 	sub.w	r1, r1, lr
 8000e3a:	42a1      	cmp	r1, r4
 8000e3c:	46c8      	mov	r8, r9
 8000e3e:	46a6      	mov	lr, r4
 8000e40:	d356      	bcc.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e42:	d053      	beq.n	8000eec <__udivmoddi4+0x2a0>
 8000e44:	b15d      	cbz	r5, 8000e5e <__udivmoddi4+0x212>
 8000e46:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e52:	fa22 f306 	lsr.w	r3, r2, r6
 8000e56:	40f1      	lsrs	r1, r6
 8000e58:	431f      	orrs	r7, r3
 8000e5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	f1c2 0320 	rsb	r3, r2, #32
 8000e6a:	40d8      	lsrs	r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	fa21 f303 	lsr.w	r3, r1, r3
 8000e74:	4091      	lsls	r1, r2
 8000e76:	4301      	orrs	r1, r0
 8000e78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7c:	fa1f fe8c 	uxth.w	lr, ip
 8000e80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e84:	fb07 3610 	mls	r6, r7, r0, r3
 8000e88:	0c0b      	lsrs	r3, r1, #16
 8000e8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e92:	429e      	cmp	r6, r3
 8000e94:	fa04 f402 	lsl.w	r4, r4, r2
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x260>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ea2:	d22f      	bcs.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea4:	429e      	cmp	r6, r3
 8000ea6:	d92d      	bls.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1b9b      	subs	r3, r3, r6
 8000eae:	b289      	uxth	r1, r1
 8000eb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x28a>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ecc:	d216      	bcs.n	8000efc <__udivmoddi4+0x2b0>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d914      	bls.n	8000efc <__udivmoddi4+0x2b0>
 8000ed2:	3e02      	subs	r6, #2
 8000ed4:	4461      	add	r1, ip
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000edc:	e738      	b.n	8000d50 <__udivmoddi4+0x104>
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e705      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e3      	b.n	8000cb0 <__udivmoddi4+0x64>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6f8      	b.n	8000cde <__udivmoddi4+0x92>
 8000eec:	454b      	cmp	r3, r9
 8000eee:	d2a9      	bcs.n	8000e44 <__udivmoddi4+0x1f8>
 8000ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7a3      	b.n	8000e44 <__udivmoddi4+0x1f8>
 8000efc:	4646      	mov	r6, r8
 8000efe:	e7ea      	b.n	8000ed6 <__udivmoddi4+0x28a>
 8000f00:	4620      	mov	r0, r4
 8000f02:	e794      	b.n	8000e2e <__udivmoddi4+0x1e2>
 8000f04:	4640      	mov	r0, r8
 8000f06:	e7d1      	b.n	8000eac <__udivmoddi4+0x260>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	e77b      	b.n	8000e04 <__udivmoddi4+0x1b8>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	e732      	b.n	8000d78 <__udivmoddi4+0x12c>
 8000f12:	4630      	mov	r0, r6
 8000f14:	e709      	b.n	8000d2a <__udivmoddi4+0xde>
 8000f16:	4464      	add	r4, ip
 8000f18:	3802      	subs	r0, #2
 8000f1a:	e742      	b.n	8000da2 <__udivmoddi4+0x156>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <vApplicationGetIdleTaskMemory+0x30>)
 8000f36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000090 	.word	0x20000090
 8000f50:	200000e4 	.word	0x200000e4

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char flag = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f001 f85b 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f84b 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 fa37 	bl	80013d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6a:	f000 fa05 	bl	8001378 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f6e:	f000 f897 	bl	80010a0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f72:	f000 f981 	bl	8001278 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f76:	f000 f909 	bl	800118c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000f7a:	f000 f9cd 	bl	8001318 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <main+0x8c>)
 8000f82:	f004 f9e9 	bl	8005358 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <main+0x90>)
 8000f88:	463c      	mov	r4, r7
 8000f8a:	461d      	mov	r5, r3
 8000f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f006 f9ad 	bl	80072fc <osThreadCreate>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <main+0x94>)
 8000fa6:	6013      	str	r3, [r2, #0]
//  configMINIMAL_STACK_SIZE, /* tamanho da pilha da task */
//  NULL, /* parametro para a task */
//  1, /* nivel de prioridade */
//  NULL); /* ponteiro para o handle da task */

  xTaskCreate(
 8000fa8:	f107 031f 	add.w	r3, r7, #31
 8000fac:	2200      	movs	r2, #0
 8000fae:	9201      	str	r2, [sp, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	9200      	str	r2, [sp, #0]
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <main+0x98>)
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <main+0x9c>)
 8000fba:	f006 fb10 	bl	80075de <xTaskCreate>
  		  &flag,
		  tskIDLE_PRIORITY,
  		  NULL);


  xTaskCreate(
 8000fbe:	f107 031f 	add.w	r3, r7, #31
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	9201      	str	r2, [sp, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	9200      	str	r2, [sp, #0]
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	4909      	ldr	r1, [pc, #36]	; (8000ff4 <main+0xa0>)
 8000fce:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <main+0xa4>)
 8000fd0:	f006 fb05 	bl	80075de <xTaskCreate>
//		 configMINIMAL_STACK_SIZE,
//		 NULL,
//		 1,
//		 NULL);

  flag = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fd8:	f006 f989 	bl	80072ee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <main+0x88>
 8000fde:	bf00      	nop
 8000fe0:	20000348 	.word	0x20000348
 8000fe4:	0800b2d4 	.word	0x0800b2d4
 8000fe8:	200004e8 	.word	0x200004e8
 8000fec:	0800b2bc 	.word	0x0800b2bc
 8000ff0:	08001679 	.word	0x08001679
 8000ff4:	0800b2c8 	.word	0x0800b2c8
 8000ff8:	080017a9 	.word	0x080017a9

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b096      	sub	sp, #88	; 0x58
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	2244      	movs	r2, #68	; 0x44
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f007 fc02 	bl	8008814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800101e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001022:	f002 fd2b 	bl	8003a7c <HAL_PWREx_ControlVoltageScaling>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800102c:	f000 fcb6 	bl	800199c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001038:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103a:	2310      	movs	r3, #16
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103e:	2302      	movs	r3, #2
 8001040:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001042:	2302      	movs	r3, #2
 8001044:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800104a:	230a      	movs	r3, #10
 800104c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800104e:	2307      	movs	r3, #7
 8001050:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001056:	2302      	movs	r3, #2
 8001058:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4618      	mov	r0, r3
 8001060:	f002 fd62 	bl	8003b28 <HAL_RCC_OscConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800106a:	f000 fc97 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106e:	230f      	movs	r3, #15
 8001070:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001072:	2303      	movs	r3, #3
 8001074:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	2104      	movs	r1, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f003 f92a 	bl	80042e0 <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001092:	f000 fc83 	bl	800199c <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3758      	adds	r7, #88	; 0x58
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <MX_ADC1_Init+0xe0>)
 80010c4:	4a2f      	ldr	r2, [pc, #188]	; (8001184 <MX_ADC1_Init+0xe4>)
 80010c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <MX_ADC1_Init+0xe0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <MX_ADC1_Init+0xe0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <MX_ADC1_Init+0xe0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <MX_ADC1_Init+0xe0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <MX_ADC1_Init+0xe0>)
 80010e2:	2204      	movs	r2, #4
 80010e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <MX_ADC1_Init+0xe0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <MX_ADC1_Init+0xe0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <MX_ADC1_Init+0xe0>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_ADC1_Init+0xe0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_ADC1_Init+0xe0>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_ADC1_Init+0xe0>)
 8001108:	2200      	movs	r2, #0
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_ADC1_Init+0xe0>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_ADC1_Init+0xe0>)
 8001116:	2200      	movs	r2, #0
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_ADC1_Init+0xe0>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001122:	4817      	ldr	r0, [pc, #92]	; (8001180 <MX_ADC1_Init+0xe0>)
 8001124:	f001 f99c 	bl	8002460 <HAL_ADC_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800112e:	f000 fc35 	bl	800199c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	4810      	ldr	r0, [pc, #64]	; (8001180 <MX_ADC1_Init+0xe0>)
 800113e:	f002 f921 	bl	8003384 <HAL_ADCEx_MultiModeConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001148:	f000 fc28 	bl	800199c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_ADC1_Init+0xe8>)
 800114e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001150:	2306      	movs	r3, #6
 8001152:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001158:	237f      	movs	r3, #127	; 0x7f
 800115a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800115c:	2304      	movs	r3, #4
 800115e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_ADC1_Init+0xe0>)
 800116a:	f001 fc6f 	bl	8002a4c <HAL_ADC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001174:	f000 fc12 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	3728      	adds	r7, #40	; 0x28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200002e4 	.word	0x200002e4
 8001184:	50040000 	.word	0x50040000
 8001188:	14f00020 	.word	0x14f00020

0800118c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	; 0x38
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80011c6:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011c8:	227f      	movs	r2, #127	; 0x7f
 80011ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011d4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80011d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e6:	4823      	ldr	r0, [pc, #140]	; (8001274 <MX_TIM2_Init+0xe8>)
 80011e8:	f003 ff8c 	bl	8005104 <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011f2:	f000 fbd3 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001200:	4619      	mov	r1, r3
 8001202:	481c      	ldr	r0, [pc, #112]	; (8001274 <MX_TIM2_Init+0xe8>)
 8001204:	f004 fc78 	bl	8005af8 <HAL_TIM_ConfigClockSource>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800120e:	f000 fbc5 	bl	800199c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001212:	4818      	ldr	r0, [pc, #96]	; (8001274 <MX_TIM2_Init+0xe8>)
 8001214:	f004 f83e 	bl	8005294 <HAL_TIM_PWM_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800121e:	f000 fbbd 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4810      	ldr	r0, [pc, #64]	; (8001274 <MX_TIM2_Init+0xe8>)
 8001232:	f005 f983 	bl	800653c <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800123c:	f000 fbae 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001240:	2360      	movs	r3, #96	; 0x60
 8001242:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	4619      	mov	r1, r3
 8001256:	4807      	ldr	r0, [pc, #28]	; (8001274 <MX_TIM2_Init+0xe8>)
 8001258:	f004 fb3a 	bl	80058d0 <HAL_TIM_PWM_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001262:	f000 fb9b 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <MX_TIM2_Init+0xe8>)
 8001268:	f000 fc66 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 800126c:	bf00      	nop
 800126e:	3738      	adds	r7, #56	; 0x38
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000348 	.word	0x20000348

08001278 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_TIM3_Init+0x98>)
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <MX_TIM3_Init+0x9c>)
 800129a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 400-1;
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_TIM3_Init+0x98>)
 800129e:	f240 128f 	movw	r2, #399	; 0x18f
 80012a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_TIM3_Init+0x98>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_TIM3_Init+0x98>)
 80012ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80012b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_TIM3_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_TIM3_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_TIM3_Init+0x98>)
 80012c0:	f003 ff20 	bl	8005104 <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80012ca:	f000 fb67 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_TIM3_Init+0x98>)
 80012dc:	f004 fc0c 	bl	8005af8 <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80012e6:	f000 fb59 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_TIM3_Init+0x98>)
 80012f8:	f005 f920 	bl	800653c <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001302:	f000 fb4b 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000394 	.word	0x20000394
 8001314:	40000400 	.word	0x40000400

08001318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_USART1_UART_Init+0x58>)
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <MX_USART1_UART_Init+0x5c>)
 8001320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART1_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART1_UART_Init+0x58>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART1_UART_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART1_UART_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART1_UART_Init+0x58>)
 800135c:	f005 f994 	bl	8006688 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001366:	f000 fb19 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200003e0 	.word	0x200003e0
 8001374:	40013800 	.word	0x40013800

08001378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <MX_USART2_UART_Init+0x5c>)
 8001380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 80013bc:	f005 f964 	bl	8006688 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013c6:	f000 fae9 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000464 	.word	0x20000464
 80013d4:	40004400 	.word	0x40004400

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <MX_GPIO_Init+0x114>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a3e      	ldr	r2, [pc, #248]	; (80014ec <MX_GPIO_Init+0x114>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <MX_GPIO_Init+0x114>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001406:	4b39      	ldr	r3, [pc, #228]	; (80014ec <MX_GPIO_Init+0x114>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a38      	ldr	r2, [pc, #224]	; (80014ec <MX_GPIO_Init+0x114>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b36      	ldr	r3, [pc, #216]	; (80014ec <MX_GPIO_Init+0x114>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <MX_GPIO_Init+0x114>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a32      	ldr	r2, [pc, #200]	; (80014ec <MX_GPIO_Init+0x114>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b30      	ldr	r3, [pc, #192]	; (80014ec <MX_GPIO_Init+0x114>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <MX_GPIO_Init+0x114>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a2c      	ldr	r2, [pc, #176]	; (80014ec <MX_GPIO_Init+0x114>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <MX_GPIO_Init+0x114>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001458:	f002 fad0 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	4823      	ldr	r0, [pc, #140]	; (80014f0 <MX_GPIO_Init+0x118>)
 8001462:	f002 facb 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2120      	movs	r1, #32
 800146a:	4822      	ldr	r0, [pc, #136]	; (80014f4 <MX_GPIO_Init+0x11c>)
 800146c:	f002 fac6 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001476:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	481a      	ldr	r0, [pc, #104]	; (80014f0 <MX_GPIO_Init+0x118>)
 8001488:	f002 f90e 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800148c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a8:	f002 f8fe 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <MX_GPIO_Init+0x118>)
 80014c4:	f002 f8f0 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014c8:	2320      	movs	r3, #32
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_GPIO_Init+0x11c>)
 80014e0:	f002 f8e2 	bl	80036a8 <HAL_GPIO_Init>

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000800 	.word	0x48000800
 80014f4:	48000400 	.word	0x48000400

080014f8 <user_pwm_setvalue>:

/* USER CODE BEGIN 4 */

void user_pwm_setvalue(uint16_t value)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001502:	2100      	movs	r1, #0
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <user_pwm_setvalue+0x40>)
 8001506:	f004 f82d 	bl	8005564 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150a:	2360      	movs	r3, #96	; 0x60
 800150c:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <user_pwm_setvalue+0x40>)
 8001524:	f004 f9d4 	bl	80058d0 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001528:	2100      	movs	r1, #0
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <user_pwm_setvalue+0x40>)
 800152c:	f003 ff14 	bl	8005358 <HAL_TIM_PWM_Start>
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000348 	.word	0x20000348

0800153c <readVoltage>:

int16_t readVoltage(void){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <readVoltage+0x24>)
 8001542:	f001 f8e3 	bl	800270c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001546:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <readVoltage+0x24>)
 800154c:	f001 f998 	bl	8002880 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(&hadc1);
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <readVoltage+0x24>)
 8001552:	f001 fa6d 	bl	8002a30 <HAL_ADC_GetValue>
 8001556:	4603      	mov	r3, r0
 8001558:	b21b      	sxth	r3, r3
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200002e4 	.word	0x200002e4

08001564 <sendChar>:

void sendChar(unsigned char c, int uart_number){
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
	unsigned char pChar = c;
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	73fb      	strb	r3, [r7, #15]
	if(uart_number == 1){
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <sendChar+0x28>
		HAL_UART_Transmit(&huart1, &pChar, 1, HAL_MAX_DELAY );
 800157a:	f107 010f 	add.w	r1, r7, #15
 800157e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001582:	2201      	movs	r2, #1
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <sendChar+0x48>)
 8001586:	f005 f8cd 	bl	8006724 <HAL_UART_Transmit>
	}
	else if(uart_number == 2){
		HAL_UART_Transmit(&huart2, &pChar, 1,HAL_MAX_DELAY );
	}
}
 800158a:	e00a      	b.n	80015a2 <sendChar+0x3e>
	else if(uart_number == 2){
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d107      	bne.n	80015a2 <sendChar+0x3e>
		HAL_UART_Transmit(&huart2, &pChar, 1,HAL_MAX_DELAY );
 8001592:	f107 010f 	add.w	r1, r7, #15
 8001596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800159a:	2201      	movs	r2, #1
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <sendChar+0x4c>)
 800159e:	f005 f8c1 	bl	8006724 <HAL_UART_Transmit>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200003e0 	.word	0x200003e0
 80015b0:	20000464 	.word	0x20000464

080015b4 <envia_para_node_mcu>:

void envia_para_node_mcu(int param){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	unsigned char caracter;

//	while(1){
		//Aguarda receber um carcater do terminal serial
//		caracter = readChar(2);
		caracter = param;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
		//Envia o caracter para a UART 1 que está conectada a placa NodemCU
		sendChar(caracter, 1);
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	2101      	movs	r1, #1
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ffcd 	bl	8001564 <sendChar>
//		vTaskDelay(1);
//	}
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	0000      	movs	r0, r0
 80015d4:	0000      	movs	r0, r0
	...

080015d8 <int_to_string>:

char* int_to_string(int num) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

    static char str[50];

	float ten = (float)num * 0.0008;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	ee17 0a90 	vmov	r0, s15
 80015ee:	f7fe ffab 	bl	8000548 <__aeabi_f2d>
 80015f2:	a314      	add	r3, pc, #80	; (adr r3, 8001644 <int_to_string+0x6c>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7fe fffe 	bl	80005f8 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff faba 	bl	8000b7c <__aeabi_d2f>
 8001608:	4603      	mov	r3, r0
 800160a:	60fb      	str	r3, [r7, #12]

    gcvt(ten, 3, str);
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7fe ff9b 	bl	8000548 <__aeabi_f2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <int_to_string+0x60>)
 8001618:	2003      	movs	r0, #3
 800161a:	ec43 2b10 	vmov	d0, r2, r3
 800161e:	f007 f89d 	bl	800875c <gcvt>
    sprintf(str+3, " V //  %d\n\r", num);
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <int_to_string+0x64>)
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	4906      	ldr	r1, [pc, #24]	; (8001640 <int_to_string+0x68>)
 8001628:	4618      	mov	r0, r3
 800162a:	f007 f8fb 	bl	8008824 <siprintf>

    return str;
 800162e:	4b02      	ldr	r3, [pc, #8]	; (8001638 <int_to_string+0x60>)
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200004ec 	.word	0x200004ec
 800163c:	200004ef 	.word	0x200004ef
 8001640:	0800b2f0 	.word	0x0800b2f0
 8001644:	eb1c432d 	.word	0xeb1c432d
 8001648:	3f4a36e2 	.word	0x3f4a36e2

0800164c <sendString>:


void sendString(char * str) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY );
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7fe fdbb 	bl	80001d0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <sendString+0x28>)
 8001666:	f005 f85d 	bl	8006724 <HAL_UART_Transmit>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000464 	.word	0x20000464

08001678 <cli>:


void cli(void * vParam) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

	uint8_t caracter;
	char *flag = (char*) vParam;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	60fb      	str	r3, [r7, #12]

	while(1) {
		while(HAL_UART_Receive(&huart2, &caracter, 1, HAL_MAX_DELAY) != HAL_OK);
 8001684:	bf00      	nop
 8001686:	f107 010b 	add.w	r1, r7, #11
 800168a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800168e:	2201      	movs	r2, #1
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <cli+0x2c>)
 8001692:	f005 f8db 	bl	800684c <HAL_UART_Receive>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f4      	bne.n	8001686 <cli+0xe>
		*flag = caracter;
 800169c:	7afa      	ldrb	r2, [r7, #11]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	701a      	strb	r2, [r3, #0]
		while(HAL_UART_Receive(&huart2, &caracter, 1, HAL_MAX_DELAY) != HAL_OK);
 80016a2:	e7ef      	b.n	8001684 <cli+0xc>
 80016a4:	20000464 	.word	0x20000464

080016a8 <loudMode>:
	}
}


void loudMode(){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	sendString("Red light on.\r\n");
 80016ac:	4812      	ldr	r0, [pc, #72]	; (80016f8 <loudMode+0x50>)
 80016ae:	f7ff ffcd 	bl	800164c <sendString>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	4811      	ldr	r0, [pc, #68]	; (80016fc <loudMode+0x54>)
 80016b8:	f002 f9a0 	bl	80039fc <HAL_GPIO_WritePin>

	sendString("Green light off.\r\n");
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <loudMode+0x58>)
 80016be:	f7ff ffc5 	bl	800164c <sendString>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f002 f997 	bl	80039fc <HAL_GPIO_WritePin>

	sendString("Yellow light off.\r\n");
 80016ce:	480d      	ldr	r0, [pc, #52]	; (8001704 <loudMode+0x5c>)
 80016d0:	f7ff ffbc 	bl	800164c <sendString>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2120      	movs	r1, #32
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <loudMode+0x60>)
 80016da:	f002 f98f 	bl	80039fc <HAL_GPIO_WritePin>

	sendString("Buzzer on.\r\n");
 80016de:	480b      	ldr	r0, [pc, #44]	; (800170c <loudMode+0x64>)
 80016e0:	f7ff ffb4 	bl	800164c <sendString>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80016e4:	2201      	movs	r2, #1
 80016e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ee:	f002 f985 	bl	80039fc <HAL_GPIO_WritePin>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	0800b2fc 	.word	0x0800b2fc
 80016fc:	48000800 	.word	0x48000800
 8001700:	0800b30c 	.word	0x0800b30c
 8001704:	0800b320 	.word	0x0800b320
 8001708:	48000400 	.word	0x48000400
 800170c:	0800b334 	.word	0x0800b334

08001710 <warningMode>:


void warningMode(){
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	sendString("Green light off.\r\n");
 8001714:	4812      	ldr	r0, [pc, #72]	; (8001760 <warningMode+0x50>)
 8001716:	f7ff ff99 	bl	800164c <sendString>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f002 f96b 	bl	80039fc <HAL_GPIO_WritePin>

	sendString("Red light off.\r\n");
 8001726:	480f      	ldr	r0, [pc, #60]	; (8001764 <warningMode+0x54>)
 8001728:	f7ff ff90 	bl	800164c <sendString>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <warningMode+0x58>)
 8001732:	f002 f963 	bl	80039fc <HAL_GPIO_WritePin>

	sendString("Yellow light on.\r\n");
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <warningMode+0x5c>)
 8001738:	f7ff ff88 	bl	800164c <sendString>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800173c:	2201      	movs	r2, #1
 800173e:	2120      	movs	r1, #32
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <warningMode+0x60>)
 8001742:	f002 f95b 	bl	80039fc <HAL_GPIO_WritePin>

	sendString("Buzzer off.\r\n");
 8001746:	480b      	ldr	r0, [pc, #44]	; (8001774 <warningMode+0x64>)
 8001748:	f7ff ff80 	bl	800164c <sendString>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f002 f951 	bl	80039fc <HAL_GPIO_WritePin>
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0800b30c 	.word	0x0800b30c
 8001764:	0800b344 	.word	0x0800b344
 8001768:	48000800 	.word	0x48000800
 800176c:	0800b358 	.word	0x0800b358
 8001770:	48000400 	.word	0x48000400
 8001774:	0800b36c 	.word	0x0800b36c

08001778 <debugSwitch>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);

}


void debugSwitch(char *caracter, char *message, int port, int pin) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
	sendString(message);
 8001786:	68b8      	ldr	r0, [r7, #8]
 8001788:	f7ff ff60 	bl	800164c <sendString>
	HAL_GPIO_TogglePin(port, pin);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	b292      	uxth	r2, r2
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f002 f949 	bl	8003a2c <HAL_GPIO_TogglePin>
	*caracter = 'd';
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2264      	movs	r2, #100	; 0x64
 800179e:	701a      	strb	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <toggleTaskFcn>:


void toggleTaskFcn(void * argument) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  char * caracter = (char * ) argument;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	61fb      	str	r3, [r7, #28]

  * caracter = 'o';
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	226f      	movs	r2, #111	; 0x6f
 80017b8:	701a      	strb	r2, [r3, #0]
  int mode = 4;
 80017ba:	2304      	movs	r3, #4
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24

  for (;;) {

	   if ( * caracter == 'p') {
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b70      	cmp	r3, #112	; 0x70
 80017c4:	d14d      	bne.n	8001862 <toggleTaskFcn+0xba>
	      sendString("Product mode selected.\r\n");
 80017c6:	4860      	ldr	r0, [pc, #384]	; (8001948 <toggleTaskFcn+0x1a0>)
 80017c8:	f7ff ff40 	bl	800164c <sendString>

	      while (1) {
	    	int rv = readVoltage();
 80017cc:	f7ff feb6 	bl	800153c <readVoltage>
 80017d0:	4603      	mov	r3, r0
 80017d2:	613b      	str	r3, [r7, #16]

	        if ( * caracter == 'd') {
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	f000 80b2 	beq.w	8001942 <toggleTaskFcn+0x19a>
	          break;
	        } else if (rv >= 3000) {
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80017e4:	4293      	cmp	r3, r2
 80017e6:	dd04      	ble.n	80017f2 <toggleTaskFcn+0x4a>
	          loudMode();
 80017e8:	f7ff ff5e 	bl	80016a8 <loudMode>
	          mode = 3;
 80017ec:	2303      	movs	r3, #3
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
 80017f0:	e00b      	b.n	800180a <toggleTaskFcn+0x62>

	        } else if (rv < 1500) {
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f240 52db 	movw	r2, #1499	; 0x5db
 80017f8:	4293      	cmp	r3, r2
 80017fa:	dc02      	bgt.n	8001802 <toggleTaskFcn+0x5a>
	          mode = 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001800:	e003      	b.n	800180a <toggleTaskFcn+0x62>

	        } else {
	          warningMode();
 8001802:	f7ff ff85 	bl	8001710 <warningMode>
	          mode = 2;
 8001806:	2302      	movs	r3, #2
 8001808:	627b      	str	r3, [r7, #36]	; 0x24

	        }

        int mcurv = rv / 16;
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	2b00      	cmp	r3, #0
 800180e:	da00      	bge.n	8001812 <toggleTaskFcn+0x6a>
 8001810:	330f      	adds	r3, #15
 8001812:	111b      	asrs	r3, r3, #4
 8001814:	623b      	str	r3, [r7, #32]

        if (mcurv < 8) {
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	2b07      	cmp	r3, #7
 800181a:	dc01      	bgt.n	8001820 <toggleTaskFcn+0x78>
        	mcurv = 9;
 800181c:	2309      	movs	r3, #9
 800181e:	623b      	str	r3, [r7, #32]
        }

        envia_para_node_mcu(mcurv);
 8001820:	6a38      	ldr	r0, [r7, #32]
 8001822:	f7ff fec7 	bl	80015b4 <envia_para_node_mcu>

        char * str = int_to_string(rv);
 8001826:	6938      	ldr	r0, [r7, #16]
 8001828:	f7ff fed6 	bl	80015d8 <int_to_string>
 800182c:	60f8      	str	r0, [r7, #12]
        sendString(str);
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f7ff ff0c 	bl	800164c <sendString>

		user_pwm_setvalue(rv / 2);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	0fda      	lsrs	r2, r3, #31
 8001838:	4413      	add	r3, r2
 800183a:	105b      	asrs	r3, r3, #1
 800183c:	b29b      	uxth	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fe5a 	bl	80014f8 <user_pwm_setvalue>

        vTaskDelay(3500);
 8001844:	f640 50ac 	movw	r0, #3500	; 0xdac
 8001848:	f006 f800 	bl	800784c <vTaskDelay>

        sendChar(mode, 1);
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2101      	movs	r1, #1
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fe86 	bl	8001564 <sendChar>

        vTaskDelay(3500);
 8001858:	f640 50ac 	movw	r0, #3500	; 0xdac
 800185c:	f005 fff6 	bl	800784c <vTaskDelay>
	      while (1) {
 8001860:	e7b4      	b.n	80017cc <toggleTaskFcn+0x24>
      }

    } else if ( * caracter == 'd') {
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d1a9      	bne.n	80017be <toggleTaskFcn+0x16>
      sendString("Debug mode selected.\r\n");
 800186a:	4838      	ldr	r0, [pc, #224]	; (800194c <toggleTaskFcn+0x1a4>)
 800186c:	f7ff feee 	bl	800164c <sendString>
      sendChar(15, 1);
 8001870:	2101      	movs	r1, #1
 8001872:	200f      	movs	r0, #15
 8001874:	f7ff fe76 	bl	8001564 <sendChar>

      while (1) {
        if ( * caracter == 'r') {
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b72      	cmp	r3, #114	; 0x72
 800187e:	d10a      	bne.n	8001896 <toggleTaskFcn+0xee>
		  debugSwitch(caracter, "Red light switched.\r\n", GPIOC, GPIO_PIN_7);
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	4a33      	ldr	r2, [pc, #204]	; (8001950 <toggleTaskFcn+0x1a8>)
 8001884:	4933      	ldr	r1, [pc, #204]	; (8001954 <toggleTaskFcn+0x1ac>)
 8001886:	69f8      	ldr	r0, [r7, #28]
 8001888:	f7ff ff76 	bl	8001778 <debugSwitch>
	      sendChar(6, 1);
 800188c:	2101      	movs	r1, #1
 800188e:	2006      	movs	r0, #6
 8001890:	f7ff fe68 	bl	8001564 <sendChar>
 8001894:	e7f0      	b.n	8001878 <toggleTaskFcn+0xd0>


        } else if ( * caracter == 'g') {
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b67      	cmp	r3, #103	; 0x67
 800189c:	d10b      	bne.n	80018b6 <toggleTaskFcn+0x10e>
  		  debugSwitch(caracter, "Green light switched.\r\n", GPIOA, GPIO_PIN_7);
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018a4:	492c      	ldr	r1, [pc, #176]	; (8001958 <toggleTaskFcn+0x1b0>)
 80018a6:	69f8      	ldr	r0, [r7, #28]
 80018a8:	f7ff ff66 	bl	8001778 <debugSwitch>
  	      sendChar(4, 1);
 80018ac:	2101      	movs	r1, #1
 80018ae:	2004      	movs	r0, #4
 80018b0:	f7ff fe58 	bl	8001564 <sendChar>
 80018b4:	e7e0      	b.n	8001878 <toggleTaskFcn+0xd0>


        } else if ( * caracter == 'y') {
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b79      	cmp	r3, #121	; 0x79
 80018bc:	d10a      	bne.n	80018d4 <toggleTaskFcn+0x12c>
  		  debugSwitch(caracter, "Yellow light switched.\r\n", GPIOB, GPIO_PIN_5);
 80018be:	2320      	movs	r3, #32
 80018c0:	4a26      	ldr	r2, [pc, #152]	; (800195c <toggleTaskFcn+0x1b4>)
 80018c2:	4927      	ldr	r1, [pc, #156]	; (8001960 <toggleTaskFcn+0x1b8>)
 80018c4:	69f8      	ldr	r0, [r7, #28]
 80018c6:	f7ff ff57 	bl	8001778 <debugSwitch>
  	      sendChar(5, 1);
 80018ca:	2101      	movs	r1, #1
 80018cc:	2005      	movs	r0, #5
 80018ce:	f7ff fe49 	bl	8001564 <sendChar>
 80018d2:	e7d1      	b.n	8001878 <toggleTaskFcn+0xd0>


        } else if ( * caracter == 'b') {
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b62      	cmp	r3, #98	; 0x62
 80018da:	d10c      	bne.n	80018f6 <toggleTaskFcn+0x14e>
  		  debugSwitch(caracter, "Buzzer switched.\r\n", GPIOA, GPIO_PIN_8);
 80018dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018e4:	491f      	ldr	r1, [pc, #124]	; (8001964 <toggleTaskFcn+0x1bc>)
 80018e6:	69f8      	ldr	r0, [r7, #28]
 80018e8:	f7ff ff46 	bl	8001778 <debugSwitch>
  	      sendChar(7, 1);
 80018ec:	2101      	movs	r1, #1
 80018ee:	2007      	movs	r0, #7
 80018f0:	f7ff fe38 	bl	8001564 <sendChar>
 80018f4:	e7c0      	b.n	8001878 <toggleTaskFcn+0xd0>


        } else if ( * caracter == 'i') {
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b69      	cmp	r3, #105	; 0x69
 80018fc:	d118      	bne.n	8001930 <toggleTaskFcn+0x188>
          int rv = readVoltage();
 80018fe:	f7ff fe1d 	bl	800153c <readVoltage>
 8001902:	4603      	mov	r3, r0
 8001904:	61bb      	str	r3, [r7, #24]
          char * str = int_to_string(rv);
 8001906:	69b8      	ldr	r0, [r7, #24]
 8001908:	f7ff fe66 	bl	80015d8 <int_to_string>
 800190c:	6178      	str	r0, [r7, #20]
		  sendChar((rv/16), 1);
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	2b00      	cmp	r3, #0
 8001912:	da00      	bge.n	8001916 <toggleTaskFcn+0x16e>
 8001914:	330f      	adds	r3, #15
 8001916:	111b      	asrs	r3, r3, #4
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2101      	movs	r1, #1
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fe21 	bl	8001564 <sendChar>
		  sendString(str);
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff fe92 	bl	800164c <sendString>
          * caracter = 'd';
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	2264      	movs	r2, #100	; 0x64
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e7a3      	b.n	8001878 <toggleTaskFcn+0xd0>

        } else if ( * caracter == 'p') {
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b70      	cmp	r3, #112	; 0x70
 8001936:	d19f      	bne.n	8001878 <toggleTaskFcn+0xd0>
          vTaskDelay(3500);
 8001938:	f640 50ac 	movw	r0, #3500	; 0xdac
 800193c:	f005 ff86 	bl	800784c <vTaskDelay>
          break;
 8001940:	e000      	b.n	8001944 <toggleTaskFcn+0x19c>
	          break;
 8001942:	bf00      	nop
	   if ( * caracter == 'p') {
 8001944:	e73b      	b.n	80017be <toggleTaskFcn+0x16>
 8001946:	bf00      	nop
 8001948:	0800b390 	.word	0x0800b390
 800194c:	0800b3ac 	.word	0x0800b3ac
 8001950:	48000800 	.word	0x48000800
 8001954:	0800b3c4 	.word	0x0800b3c4
 8001958:	0800b3dc 	.word	0x0800b3dc
 800195c:	48000400 	.word	0x48000400
 8001960:	0800b3f4 	.word	0x0800b3f4
 8001964:	0800b410 	.word	0x0800b410

08001968 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001970:	2001      	movs	r0, #1
 8001972:	f005 fd0f 	bl	8007394 <osDelay>
 8001976:	e7fb      	b.n	8001970 <StartDefaultTask+0x8>

08001978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800198a:	f000 fb65 	bl	8002058 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40012c00 	.word	0x40012c00

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <Error_Handler+0x8>
	...

080019a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_MspInit+0x4c>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_MspInit+0x4c>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_MspInit+0x4c>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_MspInit+0x4c>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_MspInit+0x4c>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6593      	str	r3, [r2, #88]	; 0x58
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_MspInit+0x4c>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	210f      	movs	r1, #15
 80019e2:	f06f 0001 	mvn.w	r0, #1
 80019e6:	f001 fe35 	bl	8003654 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000

080019f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0ac      	sub	sp, #176	; 0xb0
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2288      	movs	r2, #136	; 0x88
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f006 fefb 	bl	8008814 <memset>
  if(hadc->Instance==ADC1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <HAL_ADC_MspInit+0xc8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d147      	bne.n	8001ab8 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a2c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001a3e:	2308      	movs	r3, #8
 8001a40:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a42:	2307      	movs	r3, #7
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a46:	2302      	movs	r3, #2
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001a4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 fe97 	bl	800478c <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001a64:	f7ff ff9a 	bl	800199c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_ADC_MspInit+0xcc>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <HAL_ADC_MspInit+0xcc>)
 8001a6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_ADC_MspInit+0xcc>)
 8001a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_ADC_MspInit+0xcc>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a84:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <HAL_ADC_MspInit+0xcc>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_ADC_MspInit+0xcc>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a9e:	230b      	movs	r3, #11
 8001aa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab4:	f001 fdf8 	bl	80036a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	37b0      	adds	r7, #176	; 0xb0
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	50040000 	.word	0x50040000
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad8:	d10c      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_TIM_Base_MspInit+0x68>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <HAL_TIM_Base_MspInit+0x68>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_TIM_Base_MspInit+0x68>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001af2:	e018      	b.n	8001b26 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <HAL_TIM_Base_MspInit+0x6c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d113      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_TIM_Base_MspInit+0x68>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_TIM_Base_MspInit+0x68>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_TIM_Base_MspInit+0x68>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2105      	movs	r1, #5
 8001b1a:	201d      	movs	r0, #29
 8001b1c:	f001 fd9a 	bl	8003654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b20:	201d      	movs	r0, #29
 8001b22:	f001 fdb3 	bl	800368c <HAL_NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40000400 	.word	0x40000400

08001b38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b58:	d11c      	bne.n	8001b94 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_TIM_MspPostInit+0x64>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <HAL_TIM_MspPostInit+0x64>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_TIM_MspPostInit+0x64>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b72:	2320      	movs	r3, #32
 8001b74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b90:	f001 fd8a 	bl	80036a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0ae      	sub	sp, #184	; 0xb8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2288      	movs	r2, #136	; 0x88
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f006 fe27 	bl	8008814 <memset>
  if(huart->Instance==USART1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a43      	ldr	r2, [pc, #268]	; (8001cd8 <HAL_UART_MspInit+0x138>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d13d      	bne.n	8001c4c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f002 fdd5 	bl	800478c <HAL_RCCEx_PeriphCLKConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001be8:	f7ff fed8 	bl	800199c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bec:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	4a3a      	ldr	r2, [pc, #232]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf6:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf8:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c04:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c08:	4a34      	ldr	r2, [pc, #208]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c10:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c36:	2307      	movs	r3, #7
 8001c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c40:	4619      	mov	r1, r3
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c46:	f001 fd2f 	bl	80036a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c4a:	e040      	b.n	8001cce <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <HAL_UART_MspInit+0x140>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d13b      	bne.n	8001cce <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 fd92 	bl	800478c <HAL_RCCEx_PeriphCLKConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001c6e:	f7ff fe95 	bl	800199c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_UART_MspInit+0x13c>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cba:	2307      	movs	r3, #7
 8001cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cca:	f001 fced 	bl	80036a8 <HAL_GPIO_Init>
}
 8001cce:	bf00      	nop
 8001cd0:	37b8      	adds	r7, #184	; 0xb8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40013800 	.word	0x40013800
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40004400 	.word	0x40004400

08001ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf2:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_InitTick+0xc8>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <HAL_InitTick+0xc8>)
 8001cf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_InitTick+0xc8>)
 8001d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d0a:	f107 020c 	add.w	r2, r7, #12
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 fca7 	bl	8004668 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d1a:	f002 fc8f 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8001d1e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d22:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <HAL_InitTick+0xcc>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	0c9b      	lsrs	r3, r3, #18
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_InitTick+0xd0>)
 8001d30:	4a21      	ldr	r2, [pc, #132]	; (8001db8 <HAL_InitTick+0xd4>)
 8001d32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <HAL_InitTick+0xd0>)
 8001d36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d3a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	; (8001db4 <HAL_InitTick+0xd0>)
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_InitTick+0xd0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_InitTick+0xd0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_InitTick+0xd0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d54:	4817      	ldr	r0, [pc, #92]	; (8001db4 <HAL_InitTick+0xd0>)
 8001d56:	f003 f9d5 	bl	8005104 <HAL_TIM_Base_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d11b      	bne.n	8001da0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d68:	4812      	ldr	r0, [pc, #72]	; (8001db4 <HAL_InitTick+0xd0>)
 8001d6a:	f003 fa23 	bl	80051b4 <HAL_TIM_Base_Start_IT>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d111      	bne.n	8001da0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d7c:	2019      	movs	r0, #25
 8001d7e:	f001 fc85 	bl	800368c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b0f      	cmp	r3, #15
 8001d86:	d808      	bhi.n	8001d9a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	2019      	movs	r0, #25
 8001d8e:	f001 fc61 	bl	8003654 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_InitTick+0xd8>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	e002      	b.n	8001da0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001da0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3730      	adds	r7, #48	; 0x30
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	20000520 	.word	0x20000520
 8001db8:	40012c00 	.word	0x40012c00
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <UsageFault_Handler+0x4>

08001dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001df2:	f003 fc4d 	bl	8005690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000520 	.word	0x20000520

08001e00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <TIM3_IRQHandler+0x10>)
 8001e06:	f003 fc43 	bl	8005690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000394 	.word	0x20000394

08001e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return 1;
 8001e18:	2301      	movs	r3, #1
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_kill>:

int _kill(int pid, int sig)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e2e:	f006 fcb9 	bl	80087a4 <__errno>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2216      	movs	r2, #22
 8001e36:	601a      	str	r2, [r3, #0]
  return -1;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_exit>:

void _exit (int status)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ffe7 	bl	8001e24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e56:	e7fe      	b.n	8001e56 <_exit+0x12>

08001e58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	e00a      	b.n	8001e80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e6a:	f3af 8000 	nop.w
 8001e6e:	4601      	mov	r1, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	60ba      	str	r2, [r7, #8]
 8001e76:	b2ca      	uxtb	r2, r1
 8001e78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dbf0      	blt.n	8001e6a <_read+0x12>
  }

  return len;
 8001e88:	687b      	ldr	r3, [r7, #4]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e009      	b.n	8001eb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbf1      	blt.n	8001ea4 <_write+0x12>
  }
  return len;
 8001ec0:	687b      	ldr	r3, [r7, #4]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_close>:

int _close(int file)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_isatty>:

int _isatty(int file)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <_sbrk+0x5c>)
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <_sbrk+0x60>)
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <_sbrk+0x64>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <_sbrk+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d207      	bcs.n	8001f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f64:	f006 fc1e 	bl	80087a4 <__errno>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f72:	e009      	b.n	8001f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <_sbrk+0x64>)
 8001f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20018000 	.word	0x20018000
 8001f94:	00000400 	.word	0x00000400
 8001f98:	2000056c 	.word	0x2000056c
 8001f9c:	20001290 	.word	0x20001290

08001fa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <SystemInit+0x20>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <SystemInit+0x20>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ffc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc8:	f7ff ffea 	bl	8001fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fce:	490d      	ldr	r1, [pc, #52]	; (8002004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <LoopForever+0xe>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	; (8002010 <LoopForever+0x16>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f006 fbdd 	bl	80087b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ff6:	f7fe ffad 	bl	8000f54 <main>

08001ffa <LoopForever>:

LoopForever:
    b LoopForever
 8001ffa:	e7fe      	b.n	8001ffa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ffc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002004:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002008:	0800b748 	.word	0x0800b748
  ldr r2, =_sbss
 800200c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002010:	20001290 	.word	0x20001290

08002014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC1_2_IRQHandler>
	...

08002018 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_Init+0x3c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <HAL_Init+0x3c>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202e:	2003      	movs	r0, #3
 8002030:	f001 fb05 	bl	800363e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002034:	200f      	movs	r0, #15
 8002036:	f7ff fe55 	bl	8001ce4 <HAL_InitTick>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	e001      	b.n	800204a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002046:	f7ff fcaf 	bl	80019a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800204a:	79fb      	ldrb	r3, [r7, #7]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40022000 	.word	0x40022000

08002058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_IncTick+0x20>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_IncTick+0x24>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <HAL_IncTick+0x24>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000008 	.word	0x20000008
 800207c:	20000570 	.word	0x20000570

08002080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_GetTick+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000570 	.word	0x20000570

08002098 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	609a      	str	r2, [r3, #8]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3360      	adds	r3, #96	; 0x60
 8002112:	461a      	mov	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <LL_ADC_SetOffset+0x44>)
 8002122:	4013      	ands	r3, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	4313      	orrs	r3, r2
 8002130:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002138:	bf00      	nop
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	03fff000 	.word	0x03fff000

08002148 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3360      	adds	r3, #96	; 0x60
 8002156:	461a      	mov	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3360      	adds	r3, #96	; 0x60
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3330      	adds	r3, #48	; 0x30
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	4413      	add	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	211f      	movs	r1, #31
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	401a      	ands	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0e9b      	lsrs	r3, r3, #26
 8002208:	f003 011f 	and.w	r1, r3, #31
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	431a      	orrs	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800221c:	bf00      	nop
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3314      	adds	r3, #20
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	0e5b      	lsrs	r3, r3, #25
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	4413      	add	r3, r2
 8002246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	0d1b      	lsrs	r3, r3, #20
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2107      	movs	r1, #7
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	401a      	ands	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	0d1b      	lsrs	r3, r3, #20
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	431a      	orrs	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002272:	bf00      	nop
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0318 	and.w	r3, r3, #24
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022a4:	40d9      	lsrs	r1, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	400b      	ands	r3, r1
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	431a      	orrs	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	0007ffff 	.word	0x0007ffff

080022c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 031f 	and.w	r3, r3, #31
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6093      	str	r3, [r2, #8]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002338:	d101      	bne.n	800233e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800235c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002360:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002388:	d101      	bne.n	800238e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <LL_ADC_IsEnabled+0x18>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <LL_ADC_IsEnabled+0x1a>
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023fe:	f043 0204 	orr.w	r2, r3, #4
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d101      	bne.n	800242a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d101      	bne.n	8002450 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e136      	b.n	80026e8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fab5 	bl	80019f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff3f 	bl	8002324 <LL_ADC_IsDeepPowerDownEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff25 	bl	8002300 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff5a 	bl	8002374 <LL_ADC_IsInternalRegulatorEnabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d115      	bne.n	80024f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff3e 	bl	800234c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024d0:	4b87      	ldr	r3, [pc, #540]	; (80026f0 <HAL_ADC_Init+0x290>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	4a87      	ldr	r2, [pc, #540]	; (80026f4 <HAL_ADC_Init+0x294>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	3301      	adds	r3, #1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024e4:	e002      	b.n	80024ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f9      	bne.n	80024e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff3c 	bl	8002374 <LL_ADC_IsInternalRegulatorEnabled>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10d      	bne.n	800251e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f043 0210 	orr.w	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff75 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 8002528:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 80cf 	bne.w	80026d6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 80cb 	bne.w	80026d6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002548:	f043 0202 	orr.w	r2, r3, #2
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff35 	bl	80023c4 <LL_ADC_IsEnabled>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d115      	bne.n	800258c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002560:	4865      	ldr	r0, [pc, #404]	; (80026f8 <HAL_ADC_Init+0x298>)
 8002562:	f7ff ff2f 	bl	80023c4 <LL_ADC_IsEnabled>
 8002566:	4604      	mov	r4, r0
 8002568:	4864      	ldr	r0, [pc, #400]	; (80026fc <HAL_ADC_Init+0x29c>)
 800256a:	f7ff ff2b 	bl	80023c4 <LL_ADC_IsEnabled>
 800256e:	4603      	mov	r3, r0
 8002570:	431c      	orrs	r4, r3
 8002572:	4863      	ldr	r0, [pc, #396]	; (8002700 <HAL_ADC_Init+0x2a0>)
 8002574:	f7ff ff26 	bl	80023c4 <LL_ADC_IsEnabled>
 8002578:	4603      	mov	r3, r0
 800257a:	4323      	orrs	r3, r4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4619      	mov	r1, r3
 8002586:	485f      	ldr	r0, [pc, #380]	; (8002704 <HAL_ADC_Init+0x2a4>)
 8002588:	f7ff fd86 	bl	8002098 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7e5b      	ldrb	r3, [r3, #25]
 8002590:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002596:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800259c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d106      	bne.n	80025c8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	3b01      	subs	r3, #1
 80025c0:	045b      	lsls	r3, r3, #17
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d009      	beq.n	80025e4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_ADC_Init+0x2a8>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	430b      	orrs	r3, r1
 80025f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff08 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 8002602:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff15 	bl	8002438 <LL_ADC_INJ_IsConversionOngoing>
 800260e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d13d      	bne.n	8002692 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d13a      	bne.n	8002692 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002620:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002628:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002638:	f023 0302 	bic.w	r3, r3, #2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	69b9      	ldr	r1, [r7, #24]
 8002642:	430b      	orrs	r3, r1
 8002644:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800264c:	2b01      	cmp	r3, #1
 800264e:	d118      	bne.n	8002682 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800266c:	4311      	orrs	r1, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002672:	430a      	orrs	r2, r1
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	611a      	str	r2, [r3, #16]
 8002680:	e007      	b.n	8002692 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10c      	bne.n	80026b4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	f023 010f 	bic.w	r1, r3, #15
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
 80026b2:	e007      	b.n	80026c4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 020f 	bic.w	r2, r2, #15
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f023 0303 	bic.w	r3, r3, #3
 80026cc:	f043 0201 	orr.w	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
 80026d4:	e007      	b.n	80026e6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f043 0210 	orr.w	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3724      	adds	r7, #36	; 0x24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}
 80026f0:	20000000 	.word	0x20000000
 80026f4:	053e2d63 	.word	0x053e2d63
 80026f8:	50040000 	.word	0x50040000
 80026fc:	50040100 	.word	0x50040100
 8002700:	50040200 	.word	0x50040200
 8002704:	50040300 	.word	0x50040300
 8002708:	fff0c007 	.word	0xfff0c007

0800270c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002714:	4857      	ldr	r0, [pc, #348]	; (8002874 <HAL_ADC_Start+0x168>)
 8002716:	f7ff fdd7 	bl	80022c8 <LL_ADC_GetMultimode>
 800271a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fe76 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	f040 809c 	bne.w	8002866 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_ADC_Start+0x30>
 8002738:	2302      	movs	r3, #2
 800273a:	e097      	b.n	800286c <HAL_ADC_Start+0x160>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fd71 	bl	800322c <ADC_Enable>
 800274a:	4603      	mov	r3, r0
 800274c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800274e:	7dfb      	ldrb	r3, [r7, #23]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f040 8083 	bne.w	800285c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a42      	ldr	r2, [pc, #264]	; (8002878 <HAL_ADC_Start+0x16c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d002      	beq.n	800277a <HAL_ADC_Start+0x6e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	e000      	b.n	800277c <HAL_ADC_Start+0x70>
 800277a:	4b40      	ldr	r3, [pc, #256]	; (800287c <HAL_ADC_Start+0x170>)
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	4293      	cmp	r3, r2
 8002782:	d002      	beq.n	800278a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	d106      	bne.n	80027b2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f023 0206 	bic.w	r2, r3, #6
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	659a      	str	r2, [r3, #88]	; 0x58
 80027b0:	e002      	b.n	80027b8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	221c      	movs	r2, #28
 80027be:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <HAL_ADC_Start+0x16c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d002      	beq.n	80027d8 <HAL_ADC_Start+0xcc>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	e000      	b.n	80027da <HAL_ADC_Start+0xce>
 80027d8:	4b28      	ldr	r3, [pc, #160]	; (800287c <HAL_ADC_Start+0x170>)
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	4293      	cmp	r3, r2
 80027e0:	d008      	beq.n	80027f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d002      	beq.n	80027f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b09      	cmp	r3, #9
 80027f2:	d114      	bne.n	800281e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800280a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fde7 	bl	80023ea <LL_ADC_REG_StartConversion>
 800281c:	e025      	b.n	800286a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <HAL_ADC_Start+0x16c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d002      	beq.n	800283a <HAL_ADC_Start+0x12e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	e000      	b.n	800283c <HAL_ADC_Start+0x130>
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_ADC_Start+0x170>)
 800283c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00f      	beq.n	800286a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002852:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
 800285a:	e006      	b.n	800286a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002864:	e001      	b.n	800286a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002866:	2302      	movs	r3, #2
 8002868:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800286a:	7dfb      	ldrb	r3, [r7, #23]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	50040300 	.word	0x50040300
 8002878:	50040100 	.word	0x50040100
 800287c:	50040000 	.word	0x50040000

08002880 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800288a:	4866      	ldr	r0, [pc, #408]	; (8002a24 <HAL_ADC_PollForConversion+0x1a4>)
 800288c:	f7ff fd1c 	bl	80022c8 <LL_ADC_GetMultimode>
 8002890:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d102      	bne.n	80028a0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800289a:	2308      	movs	r3, #8
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e02a      	b.n	80028f6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d002      	beq.n	80028b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b09      	cmp	r3, #9
 80028b0:	d111      	bne.n	80028d6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0a4      	b.n	8002a1a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028d0:	2304      	movs	r3, #4
 80028d2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028d4:	e00f      	b.n	80028f6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028d6:	4853      	ldr	r0, [pc, #332]	; (8002a24 <HAL_ADC_PollForConversion+0x1a4>)
 80028d8:	f7ff fd04 	bl	80022e4 <LL_ADC_GetMultiDMATransfer>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e093      	b.n	8002a1a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028f2:	2304      	movs	r3, #4
 80028f4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028f6:	f7ff fbc3 	bl	8002080 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028fc:	e021      	b.n	8002942 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002904:	d01d      	beq.n	8002942 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002906:	f7ff fbbb 	bl	8002080 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <HAL_ADC_PollForConversion+0x9c>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d112      	bne.n	8002942 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10b      	bne.n	8002942 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	f043 0204 	orr.w	r2, r3, #4
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e06b      	b.n	8002a1a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0d6      	beq.n	80028fe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fc22 	bl	80021aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01c      	beq.n	80029a6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7e5b      	ldrb	r3, [r3, #25]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d118      	bne.n	80029a6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b08      	cmp	r3, #8
 8002980:	d111      	bne.n	80029a6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <HAL_ADC_PollForConversion+0x1a8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d002      	beq.n	80029b6 <HAL_ADC_PollForConversion+0x136>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	e000      	b.n	80029b8 <HAL_ADC_PollForConversion+0x138>
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_ADC_PollForConversion+0x1ac>)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	4293      	cmp	r3, r2
 80029be:	d008      	beq.n	80029d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d002      	beq.n	80029d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d104      	bne.n	80029dc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	e00c      	b.n	80029f6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <HAL_ADC_PollForConversion+0x1a8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d002      	beq.n	80029ec <HAL_ADC_PollForConversion+0x16c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	e000      	b.n	80029ee <HAL_ADC_PollForConversion+0x16e>
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_ADC_PollForConversion+0x1ac>)
 80029ee:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d104      	bne.n	8002a06 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2208      	movs	r2, #8
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e008      	b.n	8002a18 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	220c      	movs	r2, #12
 8002a16:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	50040300 	.word	0x50040300
 8002a28:	50040100 	.word	0x50040100
 8002a2c:	50040000 	.word	0x50040000

08002a30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b0b6      	sub	sp, #216	; 0xd8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x22>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e3c7      	b.n	80031fe <HAL_ADC_ConfigChannel+0x7b2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fcc9 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 83a8 	bne.w	80031d8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d824      	bhi.n	8002ada <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	3b02      	subs	r3, #2
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d81b      	bhi.n	8002ad2 <HAL_ADC_ConfigChannel+0x86>
 8002a9a:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <HAL_ADC_ConfigChannel+0x54>)
 8002a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002ab9 	.word	0x08002ab9
 8002aa8:	08002ac1 	.word	0x08002ac1
 8002aac:	08002ac9 	.word	0x08002ac9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	605a      	str	r2, [r3, #4]
          break;
 8002ab6:	e011      	b.n	8002adc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2212      	movs	r2, #18
 8002abc:	605a      	str	r2, [r3, #4]
          break;
 8002abe:	e00d      	b.n	8002adc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2218      	movs	r2, #24
 8002ac4:	605a      	str	r2, [r3, #4]
          break;
 8002ac6:	e009      	b.n	8002adc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ace:	605a      	str	r2, [r3, #4]
          break;
 8002ad0:	e004      	b.n	8002adc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2206      	movs	r2, #6
 8002ad6:	605a      	str	r2, [r3, #4]
          break;
 8002ad8:	e000      	b.n	8002adc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002ada:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f7ff fb71 	bl	80021d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fc8d 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 8002af8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fc99 	bl	8002438 <LL_ADC_INJ_IsConversionOngoing>
 8002b06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 81a6 	bne.w	8002e60 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f040 81a1 	bne.w	8002e60 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f7ff fb7c 	bl	8002228 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	08db      	lsrs	r3, r3, #3
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d00a      	beq.n	8002b68 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6919      	ldr	r1, [r3, #16]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b62:	f7ff facd 	bl	8002100 <LL_ADC_SetOffset>
 8002b66:	e17b      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff faea 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x148>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fadf 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	0e9b      	lsrs	r3, r3, #26
 8002b8e:	f003 021f 	and.w	r2, r3, #31
 8002b92:	e01e      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x186>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fad4 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e004      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d105      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x19e>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	e018      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x1d0>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e004      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d106      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff faa3 	bl	8002174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2101      	movs	r1, #1
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fa87 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x20e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fa7c 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	0e9b      	lsrs	r3, r3, #26
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	e01e      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x24c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fa71 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e004      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x264>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0e9b      	lsrs	r3, r3, #26
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	e018      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x296>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	e004      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d106      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	2101      	movs	r1, #1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fa40 	bl	8002174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fa24 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x2d4>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2102      	movs	r1, #2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fa19 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	f003 021f 	and.w	r2, r3, #31
 8002d1e:	e01e      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x312>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fa0e 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e004      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x32a>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	e016      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x358>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e004      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d106      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2102      	movs	r1, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f9df 	bl	8002174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2103      	movs	r1, #3
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff f9c3 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x396>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff f9b8 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	0e9b      	lsrs	r3, r3, #26
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	e017      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x3c6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2103      	movs	r1, #3
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff f9ad 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dfc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	e003      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x3de>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	0e9b      	lsrs	r3, r3, #26
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	e011      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x402>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e003      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d106      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2200      	movs	r2, #0
 8002e58:	2103      	movs	r1, #3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff f98a 	bl	8002174 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff faad 	bl	80023c4 <LL_ADC_IsEnabled>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f040 813f 	bne.w	80030f0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f7ff f9fe 	bl	8002280 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a8e      	ldr	r2, [pc, #568]	; (80030c4 <HAL_ADC_ConfigChannel+0x678>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	f040 8130 	bne.w	80030f0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x46c>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e019      	b.n	8002eec <HAL_ADC_ConfigChannel+0x4a0>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e003      	b.n	8002edc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2b09      	cmp	r3, #9
 8002ee4:	bf94      	ite	ls
 8002ee6:	2301      	movls	r3, #1
 8002ee8:	2300      	movhi	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d079      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x4c0>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	3301      	adds	r3, #1
 8002f04:	069b      	lsls	r3, r3, #26
 8002f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f0a:	e015      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x4ec>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e003      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	069b      	lsls	r3, r3, #26
 8002f34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x50c>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	0e9b      	lsrs	r3, r3, #26
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	e017      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x53c>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e003      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	ea42 0103 	orr.w	r1, r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x562>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0e9b      	lsrs	r3, r3, #26
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	051b      	lsls	r3, r3, #20
 8002fac:	e018      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x594>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e003      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	e080      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x5b4>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	069b      	lsls	r3, r3, #26
 8002ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ffe:	e015      	b.n	800302c <HAL_ADC_ConfigChannel+0x5e0>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e003      	b.n	8003024 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3301      	adds	r3, #1
 8003026:	069b      	lsls	r3, r3, #26
 8003028:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <HAL_ADC_ConfigChannel+0x600>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	3301      	adds	r3, #1
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	e017      	b.n	800307c <HAL_ADC_ConfigChannel+0x630>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	61fb      	str	r3, [r7, #28]
  return result;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e003      	b.n	8003070 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3301      	adds	r3, #1
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	ea42 0103 	orr.w	r1, r2, r3
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10d      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x65c>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	0e9b      	lsrs	r3, r3, #26
 8003092:	3301      	adds	r3, #1
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	3b1e      	subs	r3, #30
 80030a0:	051b      	lsls	r3, r3, #20
 80030a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030a6:	e01d      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x698>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	613b      	str	r3, [r7, #16]
  return result;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	e005      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x684>
 80030c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3301      	adds	r3, #1
 80030d2:	f003 021f 	and.w	r2, r3, #31
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	3b1e      	subs	r3, #30
 80030de:	051b      	lsls	r3, r3, #20
 80030e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e4:	430b      	orrs	r3, r1
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	6892      	ldr	r2, [r2, #8]
 80030ea:	4619      	mov	r1, r3
 80030ec:	f7ff f89c 	bl	8002228 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_ADC_ConfigChannel+0x7bc>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d07a      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030fc:	4843      	ldr	r0, [pc, #268]	; (800320c <HAL_ADC_ConfigChannel+0x7c0>)
 80030fe:	f7fe fff1 	bl	80020e4 <LL_ADC_GetCommonPathInternalCh>
 8003102:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a41      	ldr	r2, [pc, #260]	; (8003210 <HAL_ADC_ConfigChannel+0x7c4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d12c      	bne.n	800316a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d126      	bne.n	800316a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3c      	ldr	r2, [pc, #240]	; (8003214 <HAL_ADC_ConfigChannel+0x7c8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_ADC_ConfigChannel+0x6e4>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a3b      	ldr	r2, [pc, #236]	; (8003218 <HAL_ADC_ConfigChannel+0x7cc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d15d      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003134:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003138:	4619      	mov	r1, r3
 800313a:	4834      	ldr	r0, [pc, #208]	; (800320c <HAL_ADC_ConfigChannel+0x7c0>)
 800313c:	f7fe ffbf 	bl	80020be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003140:	4b36      	ldr	r3, [pc, #216]	; (800321c <HAL_ADC_ConfigChannel+0x7d0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	4a36      	ldr	r2, [pc, #216]	; (8003220 <HAL_ADC_ConfigChannel+0x7d4>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800315a:	e002      	b.n	8003162 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3b01      	subs	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f9      	bne.n	800315c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003168:	e040      	b.n	80031ec <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2d      	ldr	r2, [pc, #180]	; (8003224 <HAL_ADC_ConfigChannel+0x7d8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d118      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x75a>
 8003174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d112      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a23      	ldr	r2, [pc, #140]	; (8003214 <HAL_ADC_ConfigChannel+0x7c8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_ADC_ConfigChannel+0x748>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_ADC_ConfigChannel+0x7cc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d12d      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003198:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319c:	4619      	mov	r1, r3
 800319e:	481b      	ldr	r0, [pc, #108]	; (800320c <HAL_ADC_ConfigChannel+0x7c0>)
 80031a0:	f7fe ff8d 	bl	80020be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031a4:	e024      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1f      	ldr	r2, [pc, #124]	; (8003228 <HAL_ADC_ConfigChannel+0x7dc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d120      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11a      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <HAL_ADC_ConfigChannel+0x7c8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d115      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031ce:	4619      	mov	r1, r3
 80031d0:	480e      	ldr	r0, [pc, #56]	; (800320c <HAL_ADC_ConfigChannel+0x7c0>)
 80031d2:	f7fe ff74 	bl	80020be <LL_ADC_SetCommonPathInternalCh>
 80031d6:	e00c      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031ea:	e002      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ec:	bf00      	nop
 80031ee:	e000      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031fe:	4618      	mov	r0, r3
 8003200:	37d8      	adds	r7, #216	; 0xd8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	80080000 	.word	0x80080000
 800320c:	50040300 	.word	0x50040300
 8003210:	c7520000 	.word	0xc7520000
 8003214:	50040000 	.word	0x50040000
 8003218:	50040200 	.word	0x50040200
 800321c:	20000000 	.word	0x20000000
 8003220:	053e2d63 	.word	0x053e2d63
 8003224:	cb840000 	.word	0xcb840000
 8003228:	80000001 	.word	0x80000001

0800322c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003234:	2300      	movs	r3, #0
 8003236:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff f8c1 	bl	80023c4 <LL_ADC_IsEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d169      	bne.n	800331c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	4b36      	ldr	r3, [pc, #216]	; (8003328 <ADC_Enable+0xfc>)
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f043 0210 	orr.w	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e055      	b.n	800331e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff f890 	bl	800239c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800327c:	482b      	ldr	r0, [pc, #172]	; (800332c <ADC_Enable+0x100>)
 800327e:	f7fe ff31 	bl	80020e4 <LL_ADC_GetCommonPathInternalCh>
 8003282:	4603      	mov	r3, r0
 8003284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800328c:	4b28      	ldr	r3, [pc, #160]	; (8003330 <ADC_Enable+0x104>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	099b      	lsrs	r3, r3, #6
 8003292:	4a28      	ldr	r2, [pc, #160]	; (8003334 <ADC_Enable+0x108>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80032a6:	e002      	b.n	80032ae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f9      	bne.n	80032a8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032b4:	f7fe fee4 	bl	8002080 <HAL_GetTick>
 80032b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ba:	e028      	b.n	800330e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff f87f 	bl	80023c4 <LL_ADC_IsEnabled>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d104      	bne.n	80032d6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff f863 	bl	800239c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032d6:	f7fe fed3 	bl	8002080 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d914      	bls.n	800330e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d00d      	beq.n	800330e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	f043 0210 	orr.w	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	f043 0201 	orr.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e007      	b.n	800331e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d1cf      	bne.n	80032bc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	8000003f 	.word	0x8000003f
 800332c:	50040300 	.word	0x50040300
 8003330:	20000000 	.word	0x20000000
 8003334:	053e2d63 	.word	0x053e2d63

08003338 <LL_ADC_IsEnabled>:
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <LL_ADC_IsEnabled+0x18>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <LL_ADC_IsEnabled+0x1a>
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_ADC_REG_IsConversionOngoing>:
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d101      	bne.n	8003376 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b09f      	sub	sp, #124	; 0x7c
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800339e:	2302      	movs	r3, #2
 80033a0:	e093      	b.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80033aa:	2300      	movs	r3, #0
 80033ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80033ae:	2300      	movs	r3, #0
 80033b0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a47      	ldr	r2, [pc, #284]	; (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d102      	bne.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033bc:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	e001      	b.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10b      	bne.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e072      	b.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ffb9 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 80033ec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff ffb3 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d154      	bne.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003400:	2b00      	cmp	r3, #0
 8003402:	d151      	bne.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003404:	4b35      	ldr	r3, [pc, #212]	; (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003406:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d02c      	beq.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003422:	035b      	lsls	r3, r3, #13
 8003424:	430b      	orrs	r3, r1
 8003426:	431a      	orrs	r2, r3
 8003428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800342c:	4829      	ldr	r0, [pc, #164]	; (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800342e:	f7ff ff83 	bl	8003338 <LL_ADC_IsEnabled>
 8003432:	4604      	mov	r4, r0
 8003434:	4828      	ldr	r0, [pc, #160]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003436:	f7ff ff7f 	bl	8003338 <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	431c      	orrs	r4, r3
 800343e:	4828      	ldr	r0, [pc, #160]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003440:	f7ff ff7a 	bl	8003338 <LL_ADC_IsEnabled>
 8003444:	4603      	mov	r3, r0
 8003446:	4323      	orrs	r3, r4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d137      	bne.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800344c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003454:	f023 030f 	bic.w	r3, r3, #15
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	6811      	ldr	r1, [r2, #0]
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	6892      	ldr	r2, [r2, #8]
 8003460:	430a      	orrs	r2, r1
 8003462:	431a      	orrs	r2, r3
 8003464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003466:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003468:	e028      	b.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800346a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003476:	4817      	ldr	r0, [pc, #92]	; (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003478:	f7ff ff5e 	bl	8003338 <LL_ADC_IsEnabled>
 800347c:	4604      	mov	r4, r0
 800347e:	4816      	ldr	r0, [pc, #88]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003480:	f7ff ff5a 	bl	8003338 <LL_ADC_IsEnabled>
 8003484:	4603      	mov	r3, r0
 8003486:	431c      	orrs	r4, r3
 8003488:	4815      	ldr	r0, [pc, #84]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800348a:	f7ff ff55 	bl	8003338 <LL_ADC_IsEnabled>
 800348e:	4603      	mov	r3, r0
 8003490:	4323      	orrs	r3, r4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d112      	bne.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800349e:	f023 030f 	bic.w	r3, r3, #15
 80034a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034a6:	e009      	b.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034ba:	e000      	b.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	377c      	adds	r7, #124	; 0x7c
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd90      	pop	{r4, r7, pc}
 80034d2:	bf00      	nop
 80034d4:	50040000 	.word	0x50040000
 80034d8:	50040100 	.word	0x50040100
 80034dc:	50040300 	.word	0x50040300
 80034e0:	50040200 	.word	0x50040200

080034e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003500:	4013      	ands	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800350c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003516:	4a04      	ldr	r2, [pc, #16]	; (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	60d3      	str	r3, [r2, #12]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <__NVIC_GetPriorityGrouping+0x18>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	f003 0307 	and.w	r3, r3, #7
}
 800353a:	4618      	mov	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	2b00      	cmp	r3, #0
 8003558:	db0b      	blt.n	8003572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	f003 021f 	and.w	r2, r3, #31
 8003560:	4907      	ldr	r1, [pc, #28]	; (8003580 <__NVIC_EnableIRQ+0x38>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2001      	movs	r0, #1
 800356a:	fa00 f202 	lsl.w	r2, r0, r2
 800356e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e000e100 	.word	0xe000e100

08003584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	6039      	str	r1, [r7, #0]
 800358e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	2b00      	cmp	r3, #0
 8003596:	db0a      	blt.n	80035ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	490c      	ldr	r1, [pc, #48]	; (80035d0 <__NVIC_SetPriority+0x4c>)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	0112      	lsls	r2, r2, #4
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	440b      	add	r3, r1
 80035a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035ac:	e00a      	b.n	80035c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4908      	ldr	r1, [pc, #32]	; (80035d4 <__NVIC_SetPriority+0x50>)
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	3b04      	subs	r3, #4
 80035bc:	0112      	lsls	r2, r2, #4
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	440b      	add	r3, r1
 80035c2:	761a      	strb	r2, [r3, #24]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000e100 	.word	0xe000e100
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	; 0x24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f1c3 0307 	rsb	r3, r3, #7
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	bf28      	it	cs
 80035f6:	2304      	movcs	r3, #4
 80035f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2b06      	cmp	r3, #6
 8003600:	d902      	bls.n	8003608 <NVIC_EncodePriority+0x30>
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3b03      	subs	r3, #3
 8003606:	e000      	b.n	800360a <NVIC_EncodePriority+0x32>
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	401a      	ands	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003620:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	43d9      	mvns	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	4313      	orrs	r3, r2
         );
}
 8003632:	4618      	mov	r0, r3
 8003634:	3724      	adds	r7, #36	; 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ff4c 	bl	80034e4 <__NVIC_SetPriorityGrouping>
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003666:	f7ff ff61 	bl	800352c <__NVIC_GetPriorityGrouping>
 800366a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	6978      	ldr	r0, [r7, #20]
 8003672:	f7ff ffb1 	bl	80035d8 <NVIC_EncodePriority>
 8003676:	4602      	mov	r2, r0
 8003678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ff80 	bl	8003584 <__NVIC_SetPriority>
}
 8003684:	bf00      	nop
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff ff54 	bl	8003548 <__NVIC_EnableIRQ>
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b6:	e17f      	b.n	80039b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2101      	movs	r1, #1
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8171 	beq.w	80039b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d005      	beq.n	80036e8 <HAL_GPIO_Init+0x40>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d130      	bne.n	800374a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2203      	movs	r2, #3
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800371e:	2201      	movs	r2, #1
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f003 0201 	and.w	r2, r3, #1
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b03      	cmp	r3, #3
 8003754:	d118      	bne.n	8003788 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800375c:	2201      	movs	r2, #1
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	08db      	lsrs	r3, r3, #3
 8003772:	f003 0201 	and.w	r2, r3, #1
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b03      	cmp	r3, #3
 8003792:	d017      	beq.n	80037c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4013      	ands	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d123      	bne.n	8003818 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	08da      	lsrs	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	6939      	ldr	r1, [r7, #16]
 8003814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80ac 	beq.w	80039b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	4b5f      	ldr	r3, [pc, #380]	; (80039d8 <HAL_GPIO_Init+0x330>)
 800385c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385e:	4a5e      	ldr	r2, [pc, #376]	; (80039d8 <HAL_GPIO_Init+0x330>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6613      	str	r3, [r2, #96]	; 0x60
 8003866:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <HAL_GPIO_Init+0x330>)
 8003868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003872:	4a5a      	ldr	r2, [pc, #360]	; (80039dc <HAL_GPIO_Init+0x334>)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	3302      	adds	r3, #2
 800387a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	220f      	movs	r2, #15
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800389c:	d025      	beq.n	80038ea <HAL_GPIO_Init+0x242>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4f      	ldr	r2, [pc, #316]	; (80039e0 <HAL_GPIO_Init+0x338>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01f      	beq.n	80038e6 <HAL_GPIO_Init+0x23e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4e      	ldr	r2, [pc, #312]	; (80039e4 <HAL_GPIO_Init+0x33c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d019      	beq.n	80038e2 <HAL_GPIO_Init+0x23a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4d      	ldr	r2, [pc, #308]	; (80039e8 <HAL_GPIO_Init+0x340>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_GPIO_Init+0x236>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4c      	ldr	r2, [pc, #304]	; (80039ec <HAL_GPIO_Init+0x344>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00d      	beq.n	80038da <HAL_GPIO_Init+0x232>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4b      	ldr	r2, [pc, #300]	; (80039f0 <HAL_GPIO_Init+0x348>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <HAL_GPIO_Init+0x22e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4a      	ldr	r2, [pc, #296]	; (80039f4 <HAL_GPIO_Init+0x34c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_GPIO_Init+0x22a>
 80038ce:	2306      	movs	r3, #6
 80038d0:	e00c      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038d2:	2307      	movs	r3, #7
 80038d4:	e00a      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038d6:	2305      	movs	r3, #5
 80038d8:	e008      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038da:	2304      	movs	r3, #4
 80038dc:	e006      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038de:	2303      	movs	r3, #3
 80038e0:	e004      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e002      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038ea:	2300      	movs	r3, #0
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	f002 0203 	and.w	r2, r2, #3
 80038f2:	0092      	lsls	r2, r2, #2
 80038f4:	4093      	lsls	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038fc:	4937      	ldr	r1, [pc, #220]	; (80039dc <HAL_GPIO_Init+0x334>)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	3302      	adds	r3, #2
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800390a:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <HAL_GPIO_Init+0x350>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800392e:	4a32      	ldr	r2, [pc, #200]	; (80039f8 <HAL_GPIO_Init+0x350>)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_GPIO_Init+0x350>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003958:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <HAL_GPIO_Init+0x350>)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800395e:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <HAL_GPIO_Init+0x350>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	43db      	mvns	r3, r3
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4013      	ands	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003982:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_GPIO_Init+0x350>)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_GPIO_Init+0x350>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	43db      	mvns	r3, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039ac:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <HAL_GPIO_Init+0x350>)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f47f ae78 	bne.w	80036b8 <HAL_GPIO_Init+0x10>
  }
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40010000 	.word	0x40010000
 80039e0:	48000400 	.word	0x48000400
 80039e4:	48000800 	.word	0x48000800
 80039e8:	48000c00 	.word	0x48000c00
 80039ec:	48001000 	.word	0x48001000
 80039f0:	48001400 	.word	0x48001400
 80039f4:	48001800 	.word	0x48001800
 80039f8:	40010400 	.word	0x40010400

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a18:	e002      	b.n	8003a20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4013      	ands	r3, r2
 8003a44:	041a      	lsls	r2, r3, #16
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	43d9      	mvns	r1, r3
 8003a4a:	887b      	ldrh	r3, [r7, #2]
 8003a4c:	400b      	ands	r3, r1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	619a      	str	r2, [r3, #24]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40007000 	.word	0x40007000

08003a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a8a:	d130      	bne.n	8003aee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a8c:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a98:	d038      	beq.n	8003b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003aa2:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2232      	movs	r2, #50	; 0x32
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	0c9b      	lsrs	r3, r3, #18
 8003abc:	3301      	adds	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ac0:	e002      	b.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad4:	d102      	bne.n	8003adc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f2      	bne.n	8003ac2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003adc:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae8:	d110      	bne.n	8003b0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e00f      	b.n	8003b0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afa:	d007      	beq.n	8003b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b04:	4a05      	ldr	r2, [pc, #20]	; (8003b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	20000000 	.word	0x20000000
 8003b24:	431bde83 	.word	0x431bde83

08003b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e3ca      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b3a:	4b97      	ldr	r3, [pc, #604]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b44:	4b94      	ldr	r3, [pc, #592]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80e4 	beq.w	8003d24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_RCC_OscConfig+0x4a>
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b0c      	cmp	r3, #12
 8003b66:	f040 808b 	bne.w	8003c80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	f040 8087 	bne.w	8003c80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b72:	4b89      	ldr	r3, [pc, #548]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_RCC_OscConfig+0x62>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e3a2      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	4b82      	ldr	r3, [pc, #520]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x7c>
 8003b9a:	4b7f      	ldr	r3, [pc, #508]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba2:	e005      	b.n	8003bb0 <HAL_RCC_OscConfig+0x88>
 8003ba4:	4b7c      	ldr	r3, [pc, #496]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d223      	bcs.n	8003bfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fd87 	bl	80046cc <RCC_SetFlashLatencyFromMSIRange>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e383      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bc8:	4b73      	ldr	r3, [pc, #460]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a72      	ldr	r2, [pc, #456]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003bce:	f043 0308 	orr.w	r3, r3, #8
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b70      	ldr	r3, [pc, #448]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	496d      	ldr	r1, [pc, #436]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003be6:	4b6c      	ldr	r3, [pc, #432]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	4968      	ldr	r1, [pc, #416]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]
 8003bfa:	e025      	b.n	8003c48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bfc:	4b66      	ldr	r3, [pc, #408]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a65      	ldr	r2, [pc, #404]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003c02:	f043 0308 	orr.w	r3, r3, #8
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	4b63      	ldr	r3, [pc, #396]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4960      	ldr	r1, [pc, #384]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c1a:	4b5f      	ldr	r3, [pc, #380]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	495b      	ldr	r1, [pc, #364]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d109      	bne.n	8003c48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fd47 	bl	80046cc <RCC_SetFlashLatencyFromMSIRange>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e343      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c48:	f000 fc4a 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b52      	ldr	r3, [pc, #328]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	4950      	ldr	r1, [pc, #320]	; (8003d9c <HAL_RCC_OscConfig+0x274>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
 8003c64:	4a4e      	ldr	r2, [pc, #312]	; (8003da0 <HAL_RCC_OscConfig+0x278>)
 8003c66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c68:	4b4e      	ldr	r3, [pc, #312]	; (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe f839 	bl	8001ce4 <HAL_InitTick>
 8003c72:	4603      	mov	r3, r0
 8003c74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d052      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	e327      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d032      	beq.n	8003cee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c88:	4b43      	ldr	r3, [pc, #268]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a42      	ldr	r2, [pc, #264]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c94:	f7fe f9f4 	bl	8002080 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c9c:	f7fe f9f0 	bl	8002080 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e310      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cae:	4b3a      	ldr	r3, [pc, #232]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cba:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a36      	ldr	r2, [pc, #216]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	f043 0308 	orr.w	r3, r3, #8
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	4931      	ldr	r1, [pc, #196]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cd8:	4b2f      	ldr	r3, [pc, #188]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	492c      	ldr	r1, [pc, #176]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
 8003cec:	e01a      	b.n	8003d24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cee:	4b2a      	ldr	r3, [pc, #168]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a29      	ldr	r2, [pc, #164]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cfa:	f7fe f9c1 	bl	8002080 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d02:	f7fe f9bd 	bl	8002080 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e2dd      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d14:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0x1da>
 8003d20:	e000      	b.n	8003d24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d074      	beq.n	8003e1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d005      	beq.n	8003d42 <HAL_RCC_OscConfig+0x21a>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d10e      	bne.n	8003d5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d10b      	bne.n	8003d5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d42:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d064      	beq.n	8003e18 <HAL_RCC_OscConfig+0x2f0>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d160      	bne.n	8003e18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e2ba      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x24a>
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0b      	ldr	r2, [pc, #44]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	e026      	b.n	8003dc0 <HAL_RCC_OscConfig+0x298>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d7a:	d115      	bne.n	8003da8 <HAL_RCC_OscConfig+0x280>
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a02      	ldr	r2, [pc, #8]	; (8003d98 <HAL_RCC_OscConfig+0x270>)
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	e014      	b.n	8003dc0 <HAL_RCC_OscConfig+0x298>
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	0800b42c 	.word	0x0800b42c
 8003da0:	20000000 	.word	0x20000000
 8003da4:	20000004 	.word	0x20000004
 8003da8:	4ba0      	ldr	r3, [pc, #640]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a9f      	ldr	r2, [pc, #636]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4b9d      	ldr	r3, [pc, #628]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a9c      	ldr	r2, [pc, #624]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d013      	beq.n	8003df0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe f95a 	bl	8002080 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe f956 	bl	8002080 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e276      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de2:	4b92      	ldr	r3, [pc, #584]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x2a8>
 8003dee:	e014      	b.n	8003e1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fe f946 	bl	8002080 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fe f942 	bl	8002080 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	; 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e262      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0a:	4b88      	ldr	r3, [pc, #544]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x2d0>
 8003e16:	e000      	b.n	8003e1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d060      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_OscConfig+0x310>
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d119      	bne.n	8003e66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d116      	bne.n	8003e66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e38:	4b7c      	ldr	r3, [pc, #496]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_OscConfig+0x328>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e23f      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	4b76      	ldr	r3, [pc, #472]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	061b      	lsls	r3, r3, #24
 8003e5e:	4973      	ldr	r1, [pc, #460]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e64:	e040      	b.n	8003ee8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d023      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e6e:	4b6f      	ldr	r3, [pc, #444]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a6e      	ldr	r2, [pc, #440]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fe f901 	bl	8002080 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e82:	f7fe f8fd 	bl	8002080 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e21d      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e94:	4b65      	ldr	r3, [pc, #404]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea0:	4b62      	ldr	r3, [pc, #392]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	061b      	lsls	r3, r3, #24
 8003eae:	495f      	ldr	r1, [pc, #380]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
 8003eb4:	e018      	b.n	8003ee8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb6:	4b5d      	ldr	r3, [pc, #372]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a5c      	ldr	r2, [pc, #368]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fe f8dd 	bl	8002080 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eca:	f7fe f8d9 	bl	8002080 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e1f9      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003edc:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f0      	bne.n	8003eca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d03c      	beq.n	8003f6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01c      	beq.n	8003f36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efc:	4b4b      	ldr	r3, [pc, #300]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f02:	4a4a      	ldr	r2, [pc, #296]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fe f8b8 	bl	8002080 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f14:	f7fe f8b4 	bl	8002080 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1d4      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ef      	beq.n	8003f14 <HAL_RCC_OscConfig+0x3ec>
 8003f34:	e01b      	b.n	8003f6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3c:	4a3b      	ldr	r2, [pc, #236]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f46:	f7fe f89b 	bl	8002080 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4e:	f7fe f897 	bl	8002080 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1b7      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f60:	4b32      	ldr	r3, [pc, #200]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1ef      	bne.n	8003f4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80a6 	beq.w	80040c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f80:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b27      	ldr	r3, [pc, #156]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	4a26      	ldr	r2, [pc, #152]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f96:	6593      	str	r3, [r2, #88]	; 0x58
 8003f98:	4b24      	ldr	r3, [pc, #144]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_RCC_OscConfig+0x508>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d118      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb4:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <HAL_RCC_OscConfig+0x508>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1d      	ldr	r2, [pc, #116]	; (8004030 <HAL_RCC_OscConfig+0x508>)
 8003fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc0:	f7fe f85e 	bl	8002080 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc8:	f7fe f85a 	bl	8002080 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e17a      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_RCC_OscConfig+0x508>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d108      	bne.n	8004000 <HAL_RCC_OscConfig+0x4d8>
 8003fee:	4b0f      	ldr	r3, [pc, #60]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff4:	4a0d      	ldr	r2, [pc, #52]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ffe:	e029      	b.n	8004054 <HAL_RCC_OscConfig+0x52c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b05      	cmp	r3, #5
 8004006:	d115      	bne.n	8004034 <HAL_RCC_OscConfig+0x50c>
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <HAL_RCC_OscConfig+0x504>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	4a07      	ldr	r2, [pc, #28]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8004010:	f043 0304 	orr.w	r3, r3, #4
 8004014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <HAL_RCC_OscConfig+0x504>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	4a03      	ldr	r2, [pc, #12]	; (800402c <HAL_RCC_OscConfig+0x504>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004028:	e014      	b.n	8004054 <HAL_RCC_OscConfig+0x52c>
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	40007000 	.word	0x40007000
 8004034:	4b9c      	ldr	r3, [pc, #624]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	4a9b      	ldr	r2, [pc, #620]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004044:	4b98      	ldr	r3, [pc, #608]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	4a97      	ldr	r2, [pc, #604]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d016      	beq.n	800408a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fe f810 	bl	8002080 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004062:	e00a      	b.n	800407a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004064:	f7fe f80c 	bl	8002080 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e12a      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407a:	4b8b      	ldr	r3, [pc, #556]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ed      	beq.n	8004064 <HAL_RCC_OscConfig+0x53c>
 8004088:	e015      	b.n	80040b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408a:	f7fd fff9 	bl	8002080 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fd fff5 	bl	8002080 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e113      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040a8:	4b7f      	ldr	r3, [pc, #508]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1ed      	bne.n	8004092 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b6:	7ffb      	ldrb	r3, [r7, #31]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d105      	bne.n	80040c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040bc:	4b7a      	ldr	r3, [pc, #488]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	4a79      	ldr	r2, [pc, #484]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 80040c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80fe 	beq.w	80042ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	f040 80d0 	bne.w	800427c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040dc:	4b72      	ldr	r3, [pc, #456]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f003 0203 	and.w	r2, r3, #3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d130      	bne.n	8004152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	3b01      	subs	r3, #1
 80040fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d127      	bne.n	8004152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d11f      	bne.n	8004152 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800411c:	2a07      	cmp	r2, #7
 800411e:	bf14      	ite	ne
 8004120:	2201      	movne	r2, #1
 8004122:	2200      	moveq	r2, #0
 8004124:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004126:	4293      	cmp	r3, r2
 8004128:	d113      	bne.n	8004152 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004134:	085b      	lsrs	r3, r3, #1
 8004136:	3b01      	subs	r3, #1
 8004138:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d109      	bne.n	8004152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	3b01      	subs	r3, #1
 800414c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d06e      	beq.n	8004230 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	d069      	beq.n	800422c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004158:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004164:	4b50      	ldr	r3, [pc, #320]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0ad      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004174:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a4b      	ldr	r2, [pc, #300]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 800417a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800417e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004180:	f7fd ff7e 	bl	8002080 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fd ff7a 	bl	8002080 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e09a      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800419a:	4b43      	ldr	r3, [pc, #268]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a6:	4b40      	ldr	r3, [pc, #256]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	4b40      	ldr	r3, [pc, #256]	; (80042ac <HAL_RCC_OscConfig+0x784>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041b6:	3a01      	subs	r2, #1
 80041b8:	0112      	lsls	r2, r2, #4
 80041ba:	4311      	orrs	r1, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041c0:	0212      	lsls	r2, r2, #8
 80041c2:	4311      	orrs	r1, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041c8:	0852      	lsrs	r2, r2, #1
 80041ca:	3a01      	subs	r2, #1
 80041cc:	0552      	lsls	r2, r2, #21
 80041ce:	4311      	orrs	r1, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041d4:	0852      	lsrs	r2, r2, #1
 80041d6:	3a01      	subs	r2, #1
 80041d8:	0652      	lsls	r2, r2, #25
 80041da:	4311      	orrs	r1, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041e0:	0912      	lsrs	r2, r2, #4
 80041e2:	0452      	lsls	r2, r2, #17
 80041e4:	430a      	orrs	r2, r1
 80041e6:	4930      	ldr	r1, [pc, #192]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041ec:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2d      	ldr	r2, [pc, #180]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 80041f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041f8:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a2a      	ldr	r2, [pc, #168]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 80041fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004202:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004204:	f7fd ff3c 	bl	8002080 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420c:	f7fd ff38 	bl	8002080 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e058      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421e:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800422a:	e050      	b.n	80042ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e04f      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004230:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d148      	bne.n	80042ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800423c:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 8004242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004246:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004248:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a16      	ldr	r2, [pc, #88]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 800424e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004252:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004254:	f7fd ff14 	bl	8002080 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425c:	f7fd ff10 	bl	8002080 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e030      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800426e:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x734>
 800427a:	e028      	b.n	80042ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d023      	beq.n	80042ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <HAL_RCC_OscConfig+0x780>)
 8004288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800428c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fd fef7 	bl	8002080 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004294:	e00c      	b.n	80042b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004296:	f7fd fef3 	bl	8002080 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d905      	bls.n	80042b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e013      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
 80042a8:	40021000 	.word	0x40021000
 80042ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <HAL_RCC_OscConfig+0x7b0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1ec      	bne.n	8004296 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_RCC_OscConfig+0x7b0>)
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	4905      	ldr	r1, [pc, #20]	; (80042d8 <HAL_RCC_OscConfig+0x7b0>)
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_RCC_OscConfig+0x7b4>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	60cb      	str	r3, [r1, #12]
 80042c8:	e001      	b.n	80042ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	feeefffc 	.word	0xfeeefffc

080042e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0e7      	b.n	80044c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f4:	4b75      	ldr	r3, [pc, #468]	; (80044cc <HAL_RCC_ClockConfig+0x1ec>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d910      	bls.n	8004324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b72      	ldr	r3, [pc, #456]	; (80044cc <HAL_RCC_ClockConfig+0x1ec>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 0207 	bic.w	r2, r3, #7
 800430a:	4970      	ldr	r1, [pc, #448]	; (80044cc <HAL_RCC_ClockConfig+0x1ec>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b6e      	ldr	r3, [pc, #440]	; (80044cc <HAL_RCC_ClockConfig+0x1ec>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0cf      	b.n	80044c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d010      	beq.n	8004352 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	4b66      	ldr	r3, [pc, #408]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800433c:	429a      	cmp	r2, r3
 800433e:	d908      	bls.n	8004352 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004340:	4b63      	ldr	r3, [pc, #396]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4960      	ldr	r1, [pc, #384]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d04c      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004366:	4b5a      	ldr	r3, [pc, #360]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d121      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0a6      	b.n	80044c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d107      	bne.n	800438e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800437e:	4b54      	ldr	r3, [pc, #336]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d115      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e09a      	b.n	80044c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004396:	4b4e      	ldr	r3, [pc, #312]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e08e      	b.n	80044c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a6:	4b4a      	ldr	r3, [pc, #296]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e086      	b.n	80044c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043b6:	4b46      	ldr	r3, [pc, #280]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 0203 	bic.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4943      	ldr	r1, [pc, #268]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c8:	f7fd fe5a 	bl	8002080 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d0:	f7fd fe56 	bl	8002080 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e06e      	b.n	80044c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	4b3a      	ldr	r3, [pc, #232]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 020c 	and.w	r2, r3, #12
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d1eb      	bne.n	80043d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004410:	429a      	cmp	r2, r3
 8004412:	d208      	bcs.n	8004426 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004414:	4b2e      	ldr	r3, [pc, #184]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	492b      	ldr	r1, [pc, #172]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004426:	4b29      	ldr	r3, [pc, #164]	; (80044cc <HAL_RCC_ClockConfig+0x1ec>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d210      	bcs.n	8004456 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004434:	4b25      	ldr	r3, [pc, #148]	; (80044cc <HAL_RCC_ClockConfig+0x1ec>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f023 0207 	bic.w	r2, r3, #7
 800443c:	4923      	ldr	r1, [pc, #140]	; (80044cc <HAL_RCC_ClockConfig+0x1ec>)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	4313      	orrs	r3, r2
 8004442:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004444:	4b21      	ldr	r3, [pc, #132]	; (80044cc <HAL_RCC_ClockConfig+0x1ec>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d001      	beq.n	8004456 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e036      	b.n	80044c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004462:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	4918      	ldr	r1, [pc, #96]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004470:	4313      	orrs	r3, r2
 8004472:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d009      	beq.n	8004494 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004480:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4910      	ldr	r1, [pc, #64]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004490:	4313      	orrs	r3, r2
 8004492:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004494:	f000 f824 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <HAL_RCC_ClockConfig+0x1f0>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	490b      	ldr	r1, [pc, #44]	; (80044d4 <HAL_RCC_ClockConfig+0x1f4>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
 80044b0:	4a09      	ldr	r2, [pc, #36]	; (80044d8 <HAL_RCC_ClockConfig+0x1f8>)
 80044b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_RCC_ClockConfig+0x1fc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fd fc13 	bl	8001ce4 <HAL_InitTick>
 80044be:	4603      	mov	r3, r0
 80044c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80044c2:	7afb      	ldrb	r3, [r7, #11]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40022000 	.word	0x40022000
 80044d0:	40021000 	.word	0x40021000
 80044d4:	0800b42c 	.word	0x0800b42c
 80044d8:	20000000 	.word	0x20000000
 80044dc:	20000004 	.word	0x20000004

080044e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b089      	sub	sp, #36	; 0x24
 80044e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ee:	4b3e      	ldr	r3, [pc, #248]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
 80044f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044f8:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0x34>
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	2b0c      	cmp	r3, #12
 800450c:	d121      	bne.n	8004552 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d11e      	bne.n	8004552 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004514:	4b34      	ldr	r3, [pc, #208]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d107      	bne.n	8004530 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004520:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	e005      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004530:	4b2d      	ldr	r3, [pc, #180]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800453c:	4a2b      	ldr	r2, [pc, #172]	; (80045ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004544:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10d      	bne.n	8004568 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004550:	e00a      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d102      	bne.n	800455e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004558:	4b25      	ldr	r3, [pc, #148]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	e004      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d101      	bne.n	8004568 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004564:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004566:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b0c      	cmp	r3, #12
 800456c:	d134      	bne.n	80045d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800456e:	4b1e      	ldr	r3, [pc, #120]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d003      	beq.n	8004586 <HAL_RCC_GetSysClockFreq+0xa6>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b03      	cmp	r3, #3
 8004582:	d003      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0xac>
 8004584:	e005      	b.n	8004592 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004588:	617b      	str	r3, [r7, #20]
      break;
 800458a:	e005      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800458c:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800458e:	617b      	str	r3, [r7, #20]
      break;
 8004590:	e002      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	617b      	str	r3, [r7, #20]
      break;
 8004596:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	091b      	lsrs	r3, r3, #4
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	3301      	adds	r3, #1
 80045a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	0a1b      	lsrs	r3, r3, #8
 80045ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	fb03 f202 	mul.w	r2, r3, r2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	0e5b      	lsrs	r3, r3, #25
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	3301      	adds	r3, #1
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045d8:	69bb      	ldr	r3, [r7, #24]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000
 80045ec:	0800b444 	.word	0x0800b444
 80045f0:	00f42400 	.word	0x00f42400
 80045f4:	007a1200 	.word	0x007a1200

080045f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <HAL_RCC_GetHCLKFreq+0x14>)
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000000 	.word	0x20000000

08004610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004614:	f7ff fff0 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b06      	ldr	r3, [pc, #24]	; (8004634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0a1b      	lsrs	r3, r3, #8
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4904      	ldr	r1, [pc, #16]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40021000 	.word	0x40021000
 8004638:	0800b43c 	.word	0x0800b43c

0800463c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004640:	f7ff ffda 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004644:	4602      	mov	r2, r0
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	0adb      	lsrs	r3, r3, #11
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	4904      	ldr	r1, [pc, #16]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004652:	5ccb      	ldrb	r3, [r1, r3]
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	0800b43c 	.word	0x0800b43c

08004668 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	220f      	movs	r2, #15
 8004676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0203 	and.w	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800469c:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <HAL_RCC_GetClockConfig+0x60>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0207 	and.w	r2, r3, #7
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	601a      	str	r2, [r3, #0]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40022000 	.word	0x40022000

080046cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046d8:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046e4:	f7ff f9bc 	bl	8003a60 <HAL_PWREx_GetVoltageRange>
 80046e8:	6178      	str	r0, [r7, #20]
 80046ea:	e014      	b.n	8004716 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	4a24      	ldr	r2, [pc, #144]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f6:	6593      	str	r3, [r2, #88]	; 0x58
 80046f8:	4b22      	ldr	r3, [pc, #136]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004704:	f7ff f9ac 	bl	8003a60 <HAL_PWREx_GetVoltageRange>
 8004708:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800470a:	4b1e      	ldr	r3, [pc, #120]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800470c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470e:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004714:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471c:	d10b      	bne.n	8004736 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b80      	cmp	r3, #128	; 0x80
 8004722:	d919      	bls.n	8004758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2ba0      	cmp	r3, #160	; 0xa0
 8004728:	d902      	bls.n	8004730 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800472a:	2302      	movs	r3, #2
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	e013      	b.n	8004758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004730:	2301      	movs	r3, #1
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	e010      	b.n	8004758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b80      	cmp	r3, #128	; 0x80
 800473a:	d902      	bls.n	8004742 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800473c:	2303      	movs	r3, #3
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	e00a      	b.n	8004758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b80      	cmp	r3, #128	; 0x80
 8004746:	d102      	bne.n	800474e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004748:	2302      	movs	r3, #2
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	e004      	b.n	8004758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b70      	cmp	r3, #112	; 0x70
 8004752:	d101      	bne.n	8004758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004754:	2301      	movs	r3, #1
 8004756:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f023 0207 	bic.w	r2, r3, #7
 8004760:	4909      	ldr	r1, [pc, #36]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004768:	4b07      	ldr	r3, [pc, #28]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	429a      	cmp	r2, r3
 8004774:	d001      	beq.n	800477a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021000 	.word	0x40021000
 8004788:	40022000 	.word	0x40022000

0800478c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004794:	2300      	movs	r3, #0
 8004796:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004798:	2300      	movs	r3, #0
 800479a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d041      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047b0:	d02a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80047b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047b6:	d824      	bhi.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047bc:	d008      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047c2:	d81e      	bhi.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80047c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047cc:	d010      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047ce:	e018      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047d0:	4b86      	ldr	r3, [pc, #536]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4a85      	ldr	r2, [pc, #532]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047dc:	e015      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3304      	adds	r3, #4
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fabb 	bl	8004d60 <RCCEx_PLLSAI1_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047ee:	e00c      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3320      	adds	r3, #32
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fba6 	bl	8004f48 <RCCEx_PLLSAI2_Config>
 80047fc:	4603      	mov	r3, r0
 80047fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004800:	e003      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	74fb      	strb	r3, [r7, #19]
      break;
 8004806:	e000      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004810:	4b76      	ldr	r3, [pc, #472]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800481e:	4973      	ldr	r1, [pc, #460]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004826:	e001      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d041      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800483c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004840:	d02a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004842:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004846:	d824      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800484c:	d008      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800484e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004852:	d81e      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800485c:	d010      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800485e:	e018      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004860:	4b62      	ldr	r3, [pc, #392]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4a61      	ldr	r2, [pc, #388]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800486c:	e015      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fa73 	bl	8004d60 <RCCEx_PLLSAI1_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800487e:	e00c      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3320      	adds	r3, #32
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fb5e 	bl	8004f48 <RCCEx_PLLSAI2_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004890:	e003      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	74fb      	strb	r3, [r7, #19]
      break;
 8004896:	e000      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048a0:	4b52      	ldr	r3, [pc, #328]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ae:	494f      	ldr	r1, [pc, #316]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048b6:	e001      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b8:	7cfb      	ldrb	r3, [r7, #19]
 80048ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80a0 	beq.w	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ca:	2300      	movs	r3, #0
 80048cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048ce:	4b47      	ldr	r3, [pc, #284]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00d      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e4:	4b41      	ldr	r3, [pc, #260]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e8:	4a40      	ldr	r2, [pc, #256]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ee:	6593      	str	r3, [r2, #88]	; 0x58
 80048f0:	4b3e      	ldr	r3, [pc, #248]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fc:	2301      	movs	r3, #1
 80048fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004900:	4b3b      	ldr	r3, [pc, #236]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a3a      	ldr	r2, [pc, #232]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800490a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800490c:	f7fd fbb8 	bl	8002080 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004912:	e009      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004914:	f7fd fbb4 	bl	8002080 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d902      	bls.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	74fb      	strb	r3, [r7, #19]
        break;
 8004926:	e005      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004928:	4b31      	ldr	r3, [pc, #196]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0ef      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004934:	7cfb      	ldrb	r3, [r7, #19]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d15c      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800493a:	4b2c      	ldr	r3, [pc, #176]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004944:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01f      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	429a      	cmp	r2, r3
 8004956:	d019      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004958:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004962:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004964:	4b21      	ldr	r3, [pc, #132]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496a:	4a20      	ldr	r2, [pc, #128]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004974:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497a:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004984:	4a19      	ldr	r2, [pc, #100]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d016      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004996:	f7fd fb73 	bl	8002080 <HAL_GetTick>
 800499a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800499c:	e00b      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499e:	f7fd fb6f 	bl	8002080 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d902      	bls.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	74fb      	strb	r3, [r7, #19]
            break;
 80049b4:	e006      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0ec      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80049c4:	7cfb      	ldrb	r3, [r7, #19]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049da:	4904      	ldr	r1, [pc, #16]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049e2:	e009      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
 80049e6:	74bb      	strb	r3, [r7, #18]
 80049e8:	e006      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f8:	7c7b      	ldrb	r3, [r7, #17]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d105      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fe:	4b9e      	ldr	r3, [pc, #632]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	4a9d      	ldr	r2, [pc, #628]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a16:	4b98      	ldr	r3, [pc, #608]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f023 0203 	bic.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	4994      	ldr	r1, [pc, #592]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a38:	4b8f      	ldr	r3, [pc, #572]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f023 020c 	bic.w	r2, r3, #12
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a46:	498c      	ldr	r1, [pc, #560]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a5a:	4b87      	ldr	r3, [pc, #540]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	4983      	ldr	r1, [pc, #524]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a7c:	4b7e      	ldr	r3, [pc, #504]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	497b      	ldr	r1, [pc, #492]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a9e:	4b76      	ldr	r3, [pc, #472]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aac:	4972      	ldr	r1, [pc, #456]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ac0:	4b6d      	ldr	r3, [pc, #436]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ace:	496a      	ldr	r1, [pc, #424]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ae2:	4b65      	ldr	r3, [pc, #404]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	4961      	ldr	r1, [pc, #388]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b04:	4b5c      	ldr	r3, [pc, #368]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b12:	4959      	ldr	r1, [pc, #356]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b26:	4b54      	ldr	r3, [pc, #336]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b34:	4950      	ldr	r1, [pc, #320]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b48:	4b4b      	ldr	r3, [pc, #300]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b56:	4948      	ldr	r1, [pc, #288]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b6a:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	493f      	ldr	r1, [pc, #252]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d028      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b8c:	4b3a      	ldr	r3, [pc, #232]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b9a:	4937      	ldr	r1, [pc, #220]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004baa:	d106      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bac:	4b32      	ldr	r3, [pc, #200]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a31      	ldr	r2, [pc, #196]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb6:	60d3      	str	r3, [r2, #12]
 8004bb8:	e011      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bc2:	d10c      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	2101      	movs	r1, #1
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f8c8 	bl	8004d60 <RCCEx_PLLSAI1_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004bda:	7cfb      	ldrb	r3, [r7, #19]
 8004bdc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d028      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bea:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	491f      	ldr	r1, [pc, #124]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c08:	d106      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c0a:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	4a1a      	ldr	r2, [pc, #104]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c14:	60d3      	str	r3, [r2, #12]
 8004c16:	e011      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c20:	d10c      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3304      	adds	r3, #4
 8004c26:	2101      	movs	r1, #1
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 f899 	bl	8004d60 <RCCEx_PLLSAI1_Config>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c32:	7cfb      	ldrb	r3, [r7, #19]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c38:	7cfb      	ldrb	r3, [r7, #19]
 8004c3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d02b      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c56:	4908      	ldr	r1, [pc, #32]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c66:	d109      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4a02      	ldr	r2, [pc, #8]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c72:	60d3      	str	r3, [r2, #12]
 8004c74:	e014      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 f867 	bl	8004d60 <RCCEx_PLLSAI1_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c96:	7cfb      	ldrb	r3, [r7, #19]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d02f      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cba:	4928      	ldr	r1, [pc, #160]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cca:	d10d      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	2102      	movs	r1, #2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f844 	bl	8004d60 <RCCEx_PLLSAI1_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d014      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ce2:	7cfb      	ldrb	r3, [r7, #19]
 8004ce4:	74bb      	strb	r3, [r7, #18]
 8004ce6:	e011      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3320      	adds	r3, #32
 8004cf6:	2102      	movs	r1, #2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f925 	bl	8004f48 <RCCEx_PLLSAI2_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d02:	7cfb      	ldrb	r3, [r7, #19]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
 8004d0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d26:	490d      	ldr	r1, [pc, #52]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d3a:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d4a:	4904      	ldr	r1, [pc, #16]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d52:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40021000 	.word	0x40021000

08004d60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d6e:	4b75      	ldr	r3, [pc, #468]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d018      	beq.n	8004dac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d7a:	4b72      	ldr	r3, [pc, #456]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0203 	and.w	r2, r3, #3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d10d      	bne.n	8004da6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d92:	4b6c      	ldr	r3, [pc, #432]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
       ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d047      	beq.n	8004e36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
 8004daa:	e044      	b.n	8004e36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d018      	beq.n	8004de6 <RCCEx_PLLSAI1_Config+0x86>
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d825      	bhi.n	8004e04 <RCCEx_PLLSAI1_Config+0xa4>
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d002      	beq.n	8004dc2 <RCCEx_PLLSAI1_Config+0x62>
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d009      	beq.n	8004dd4 <RCCEx_PLLSAI1_Config+0x74>
 8004dc0:	e020      	b.n	8004e04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dc2:	4b60      	ldr	r3, [pc, #384]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d11d      	bne.n	8004e0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd2:	e01a      	b.n	8004e0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dd4:	4b5b      	ldr	r3, [pc, #364]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d116      	bne.n	8004e0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de4:	e013      	b.n	8004e0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004de6:	4b57      	ldr	r3, [pc, #348]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10f      	bne.n	8004e12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004df2:	4b54      	ldr	r3, [pc, #336]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e02:	e006      	b.n	8004e12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
      break;
 8004e08:	e004      	b.n	8004e14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e12:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e1a:	4b4a      	ldr	r3, [pc, #296]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6819      	ldr	r1, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	4944      	ldr	r1, [pc, #272]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d17d      	bne.n	8004f38 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e3c:	4b41      	ldr	r3, [pc, #260]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a40      	ldr	r2, [pc, #256]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e48:	f7fd f91a 	bl	8002080 <HAL_GetTick>
 8004e4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e4e:	e009      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e50:	f7fd f916 	bl	8002080 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d902      	bls.n	8004e64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	73fb      	strb	r3, [r7, #15]
        break;
 8004e62:	e005      	b.n	8004e70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e64:	4b37      	ldr	r3, [pc, #220]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ef      	bne.n	8004e50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d160      	bne.n	8004f38 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d111      	bne.n	8004ea0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e7c:	4b31      	ldr	r3, [pc, #196]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6892      	ldr	r2, [r2, #8]
 8004e8c:	0211      	lsls	r1, r2, #8
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68d2      	ldr	r2, [r2, #12]
 8004e92:	0912      	lsrs	r2, r2, #4
 8004e94:	0452      	lsls	r2, r2, #17
 8004e96:	430a      	orrs	r2, r1
 8004e98:	492a      	ldr	r1, [pc, #168]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	610b      	str	r3, [r1, #16]
 8004e9e:	e027      	b.n	8004ef0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d112      	bne.n	8004ecc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ea6:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004eae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6892      	ldr	r2, [r2, #8]
 8004eb6:	0211      	lsls	r1, r2, #8
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6912      	ldr	r2, [r2, #16]
 8004ebc:	0852      	lsrs	r2, r2, #1
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	0552      	lsls	r2, r2, #21
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	491f      	ldr	r1, [pc, #124]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	610b      	str	r3, [r1, #16]
 8004eca:	e011      	b.n	8004ef0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ed4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6892      	ldr	r2, [r2, #8]
 8004edc:	0211      	lsls	r1, r2, #8
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6952      	ldr	r2, [r2, #20]
 8004ee2:	0852      	lsrs	r2, r2, #1
 8004ee4:	3a01      	subs	r2, #1
 8004ee6:	0652      	lsls	r2, r2, #25
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	4916      	ldr	r1, [pc, #88]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ef0:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a13      	ldr	r2, [pc, #76]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004efa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efc:	f7fd f8c0 	bl	8002080 <HAL_GetTick>
 8004f00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f02:	e009      	b.n	8004f18 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f04:	f7fd f8bc 	bl	8002080 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d902      	bls.n	8004f18 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	73fb      	strb	r3, [r7, #15]
          break;
 8004f16:	e005      	b.n	8004f24 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f18:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0ef      	beq.n	8004f04 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	4904      	ldr	r1, [pc, #16]	; (8004f44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40021000 	.word	0x40021000

08004f48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f56:	4b6a      	ldr	r3, [pc, #424]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d018      	beq.n	8004f94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f62:	4b67      	ldr	r3, [pc, #412]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0203 	and.w	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d10d      	bne.n	8004f8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
       ||
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f7a:	4b61      	ldr	r3, [pc, #388]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
       ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d047      	beq.n	800501e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	73fb      	strb	r3, [r7, #15]
 8004f92:	e044      	b.n	800501e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d018      	beq.n	8004fce <RCCEx_PLLSAI2_Config+0x86>
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d825      	bhi.n	8004fec <RCCEx_PLLSAI2_Config+0xa4>
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d002      	beq.n	8004faa <RCCEx_PLLSAI2_Config+0x62>
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d009      	beq.n	8004fbc <RCCEx_PLLSAI2_Config+0x74>
 8004fa8:	e020      	b.n	8004fec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004faa:	4b55      	ldr	r3, [pc, #340]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d11d      	bne.n	8004ff2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fba:	e01a      	b.n	8004ff2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fbc:	4b50      	ldr	r3, [pc, #320]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d116      	bne.n	8004ff6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fcc:	e013      	b.n	8004ff6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fce:	4b4c      	ldr	r3, [pc, #304]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10f      	bne.n	8004ffa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fda:	4b49      	ldr	r3, [pc, #292]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fea:	e006      	b.n	8004ffa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff0:	e004      	b.n	8004ffc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ff2:	bf00      	nop
 8004ff4:	e002      	b.n	8004ffc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e000      	b.n	8004ffc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ffa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10d      	bne.n	800501e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005002:	4b3f      	ldr	r3, [pc, #252]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6819      	ldr	r1, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	3b01      	subs	r3, #1
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	430b      	orrs	r3, r1
 8005018:	4939      	ldr	r1, [pc, #228]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 800501a:	4313      	orrs	r3, r2
 800501c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d167      	bne.n	80050f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005024:	4b36      	ldr	r3, [pc, #216]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a35      	ldr	r2, [pc, #212]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 800502a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800502e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005030:	f7fd f826 	bl	8002080 <HAL_GetTick>
 8005034:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005036:	e009      	b.n	800504c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005038:	f7fd f822 	bl	8002080 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d902      	bls.n	800504c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	73fb      	strb	r3, [r7, #15]
        break;
 800504a:	e005      	b.n	8005058 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800504c:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1ef      	bne.n	8005038 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d14a      	bne.n	80050f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d111      	bne.n	8005088 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005064:	4b26      	ldr	r3, [pc, #152]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800506c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6892      	ldr	r2, [r2, #8]
 8005074:	0211      	lsls	r1, r2, #8
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68d2      	ldr	r2, [r2, #12]
 800507a:	0912      	lsrs	r2, r2, #4
 800507c:	0452      	lsls	r2, r2, #17
 800507e:	430a      	orrs	r2, r1
 8005080:	491f      	ldr	r1, [pc, #124]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005082:	4313      	orrs	r3, r2
 8005084:	614b      	str	r3, [r1, #20]
 8005086:	e011      	b.n	80050ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005090:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6892      	ldr	r2, [r2, #8]
 8005098:	0211      	lsls	r1, r2, #8
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6912      	ldr	r2, [r2, #16]
 800509e:	0852      	lsrs	r2, r2, #1
 80050a0:	3a01      	subs	r2, #1
 80050a2:	0652      	lsls	r2, r2, #25
 80050a4:	430a      	orrs	r2, r1
 80050a6:	4916      	ldr	r1, [pc, #88]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050ac:	4b14      	ldr	r3, [pc, #80]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a13      	ldr	r2, [pc, #76]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b8:	f7fc ffe2 	bl	8002080 <HAL_GetTick>
 80050bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050be:	e009      	b.n	80050d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050c0:	f7fc ffde 	bl	8002080 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d902      	bls.n	80050d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	73fb      	strb	r3, [r7, #15]
          break;
 80050d2:	e005      	b.n	80050e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0ef      	beq.n	80050c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050e6:	4b06      	ldr	r3, [pc, #24]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	4904      	ldr	r1, [pc, #16]	; (8005100 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40021000 	.word	0x40021000

08005104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e049      	b.n	80051aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fc fccc 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f000 fdca 	bl	8005cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d001      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e04f      	b.n	800526c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a23      	ldr	r2, [pc, #140]	; (8005278 <HAL_TIM_Base_Start_IT+0xc4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01d      	beq.n	800522a <HAL_TIM_Base_Start_IT+0x76>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d018      	beq.n	800522a <HAL_TIM_Base_Start_IT+0x76>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1f      	ldr	r2, [pc, #124]	; (800527c <HAL_TIM_Base_Start_IT+0xc8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <HAL_TIM_Base_Start_IT+0x76>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1e      	ldr	r2, [pc, #120]	; (8005280 <HAL_TIM_Base_Start_IT+0xcc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00e      	beq.n	800522a <HAL_TIM_Base_Start_IT+0x76>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1c      	ldr	r2, [pc, #112]	; (8005284 <HAL_TIM_Base_Start_IT+0xd0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d009      	beq.n	800522a <HAL_TIM_Base_Start_IT+0x76>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1b      	ldr	r2, [pc, #108]	; (8005288 <HAL_TIM_Base_Start_IT+0xd4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <HAL_TIM_Base_Start_IT+0x76>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a19      	ldr	r2, [pc, #100]	; (800528c <HAL_TIM_Base_Start_IT+0xd8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d115      	bne.n	8005256 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	4b17      	ldr	r3, [pc, #92]	; (8005290 <HAL_TIM_Base_Start_IT+0xdc>)
 8005232:	4013      	ands	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b06      	cmp	r3, #6
 800523a:	d015      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0xb4>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005242:	d011      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005254:	e008      	b.n	8005268 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 0201 	orr.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e000      	b.n	800526a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005268:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40000400 	.word	0x40000400
 8005280:	40000800 	.word	0x40000800
 8005284:	40000c00 	.word	0x40000c00
 8005288:	40013400 	.word	0x40013400
 800528c:	40014000 	.word	0x40014000
 8005290:	00010007 	.word	0x00010007

08005294 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e049      	b.n	800533a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f841 	bl	8005342 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f000 fd02 	bl	8005cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d109      	bne.n	800537c <HAL_TIM_PWM_Start+0x24>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e03c      	b.n	80053f6 <HAL_TIM_PWM_Start+0x9e>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b04      	cmp	r3, #4
 8005380:	d109      	bne.n	8005396 <HAL_TIM_PWM_Start+0x3e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b01      	cmp	r3, #1
 800538c:	bf14      	ite	ne
 800538e:	2301      	movne	r3, #1
 8005390:	2300      	moveq	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	e02f      	b.n	80053f6 <HAL_TIM_PWM_Start+0x9e>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d109      	bne.n	80053b0 <HAL_TIM_PWM_Start+0x58>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	bf14      	ite	ne
 80053a8:	2301      	movne	r3, #1
 80053aa:	2300      	moveq	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	e022      	b.n	80053f6 <HAL_TIM_PWM_Start+0x9e>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d109      	bne.n	80053ca <HAL_TIM_PWM_Start+0x72>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	e015      	b.n	80053f6 <HAL_TIM_PWM_Start+0x9e>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d109      	bne.n	80053e4 <HAL_TIM_PWM_Start+0x8c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b01      	cmp	r3, #1
 80053da:	bf14      	ite	ne
 80053dc:	2301      	movne	r3, #1
 80053de:	2300      	moveq	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	e008      	b.n	80053f6 <HAL_TIM_PWM_Start+0x9e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	bf14      	ite	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	2300      	moveq	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e09c      	b.n	8005538 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Start+0xb6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800540c:	e023      	b.n	8005456 <HAL_TIM_PWM_Start+0xfe>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b04      	cmp	r3, #4
 8005412:	d104      	bne.n	800541e <HAL_TIM_PWM_Start+0xc6>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800541c:	e01b      	b.n	8005456 <HAL_TIM_PWM_Start+0xfe>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d104      	bne.n	800542e <HAL_TIM_PWM_Start+0xd6>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800542c:	e013      	b.n	8005456 <HAL_TIM_PWM_Start+0xfe>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b0c      	cmp	r3, #12
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Start+0xe6>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800543c:	e00b      	b.n	8005456 <HAL_TIM_PWM_Start+0xfe>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b10      	cmp	r3, #16
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Start+0xf6>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800544c:	e003      	b.n	8005456 <HAL_TIM_PWM_Start+0xfe>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2201      	movs	r2, #1
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f001 f846 	bl	80064f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a35      	ldr	r2, [pc, #212]	; (8005540 <HAL_TIM_PWM_Start+0x1e8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <HAL_TIM_PWM_Start+0x13e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a34      	ldr	r2, [pc, #208]	; (8005544 <HAL_TIM_PWM_Start+0x1ec>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_TIM_PWM_Start+0x13e>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a32      	ldr	r2, [pc, #200]	; (8005548 <HAL_TIM_PWM_Start+0x1f0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_TIM_PWM_Start+0x13e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a31      	ldr	r2, [pc, #196]	; (800554c <HAL_TIM_PWM_Start+0x1f4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_TIM_PWM_Start+0x13e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a2f      	ldr	r2, [pc, #188]	; (8005550 <HAL_TIM_PWM_Start+0x1f8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <HAL_TIM_PWM_Start+0x142>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <HAL_TIM_PWM_Start+0x144>
 800549a:	2300      	movs	r3, #0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a22      	ldr	r2, [pc, #136]	; (8005540 <HAL_TIM_PWM_Start+0x1e8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d01d      	beq.n	80054f6 <HAL_TIM_PWM_Start+0x19e>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c2:	d018      	beq.n	80054f6 <HAL_TIM_PWM_Start+0x19e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a22      	ldr	r2, [pc, #136]	; (8005554 <HAL_TIM_PWM_Start+0x1fc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_TIM_PWM_Start+0x19e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a21      	ldr	r2, [pc, #132]	; (8005558 <HAL_TIM_PWM_Start+0x200>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00e      	beq.n	80054f6 <HAL_TIM_PWM_Start+0x19e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1f      	ldr	r2, [pc, #124]	; (800555c <HAL_TIM_PWM_Start+0x204>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d009      	beq.n	80054f6 <HAL_TIM_PWM_Start+0x19e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a17      	ldr	r2, [pc, #92]	; (8005544 <HAL_TIM_PWM_Start+0x1ec>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_TIM_PWM_Start+0x19e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a15      	ldr	r2, [pc, #84]	; (8005548 <HAL_TIM_PWM_Start+0x1f0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d115      	bne.n	8005522 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	4b18      	ldr	r3, [pc, #96]	; (8005560 <HAL_TIM_PWM_Start+0x208>)
 80054fe:	4013      	ands	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b06      	cmp	r3, #6
 8005506:	d015      	beq.n	8005534 <HAL_TIM_PWM_Start+0x1dc>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550e:	d011      	beq.n	8005534 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005520:	e008      	b.n	8005534 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0201 	orr.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e000      	b.n	8005536 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40013400 	.word	0x40013400
 8005548:	40014000 	.word	0x40014000
 800554c:	40014400 	.word	0x40014400
 8005550:	40014800 	.word	0x40014800
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	00010007 	.word	0x00010007

08005564 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 ffba 	bl	80064f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a3e      	ldr	r2, [pc, #248]	; (800567c <HAL_TIM_PWM_Stop+0x118>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d013      	beq.n	80055ae <HAL_TIM_PWM_Stop+0x4a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a3d      	ldr	r2, [pc, #244]	; (8005680 <HAL_TIM_PWM_Stop+0x11c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00e      	beq.n	80055ae <HAL_TIM_PWM_Stop+0x4a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a3b      	ldr	r2, [pc, #236]	; (8005684 <HAL_TIM_PWM_Stop+0x120>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d009      	beq.n	80055ae <HAL_TIM_PWM_Stop+0x4a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a3a      	ldr	r2, [pc, #232]	; (8005688 <HAL_TIM_PWM_Stop+0x124>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_TIM_PWM_Stop+0x4a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a38      	ldr	r2, [pc, #224]	; (800568c <HAL_TIM_PWM_Stop+0x128>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d101      	bne.n	80055b2 <HAL_TIM_PWM_Stop+0x4e>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <HAL_TIM_PWM_Stop+0x50>
 80055b2:	2300      	movs	r3, #0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d017      	beq.n	80055e8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6a1a      	ldr	r2, [r3, #32]
 80055be:	f241 1311 	movw	r3, #4369	; 0x1111
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10f      	bne.n	80055e8 <HAL_TIM_PWM_Stop+0x84>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6a1a      	ldr	r2, [r3, #32]
 80055ce:	f240 4344 	movw	r3, #1092	; 0x444
 80055d2:	4013      	ands	r3, r2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d107      	bne.n	80055e8 <HAL_TIM_PWM_Stop+0x84>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6a1a      	ldr	r2, [r3, #32]
 80055ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10f      	bne.n	8005618 <HAL_TIM_PWM_Stop+0xb4>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6a1a      	ldr	r2, [r3, #32]
 80055fe:	f240 4344 	movw	r3, #1092	; 0x444
 8005602:	4013      	ands	r3, r2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d107      	bne.n	8005618 <HAL_TIM_PWM_Stop+0xb4>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0201 	bic.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <HAL_TIM_PWM_Stop+0xc4>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005626:	e023      	b.n	8005670 <HAL_TIM_PWM_Stop+0x10c>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b04      	cmp	r3, #4
 800562c:	d104      	bne.n	8005638 <HAL_TIM_PWM_Stop+0xd4>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005636:	e01b      	b.n	8005670 <HAL_TIM_PWM_Stop+0x10c>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b08      	cmp	r3, #8
 800563c:	d104      	bne.n	8005648 <HAL_TIM_PWM_Stop+0xe4>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005646:	e013      	b.n	8005670 <HAL_TIM_PWM_Stop+0x10c>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b0c      	cmp	r3, #12
 800564c:	d104      	bne.n	8005658 <HAL_TIM_PWM_Stop+0xf4>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005656:	e00b      	b.n	8005670 <HAL_TIM_PWM_Stop+0x10c>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b10      	cmp	r3, #16
 800565c:	d104      	bne.n	8005668 <HAL_TIM_PWM_Stop+0x104>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005666:	e003      	b.n	8005670 <HAL_TIM_PWM_Stop+0x10c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40013400 	.word	0x40013400
 8005684:	40014000 	.word	0x40014000
 8005688:	40014400 	.word	0x40014400
 800568c:	40014800 	.word	0x40014800

08005690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d122      	bne.n	80056ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d11b      	bne.n	80056ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0202 	mvn.w	r2, #2
 80056bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fae3 	bl	8005c9e <HAL_TIM_IC_CaptureCallback>
 80056d8:	e005      	b.n	80056e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fad5 	bl	8005c8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fae6 	bl	8005cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d122      	bne.n	8005740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b04      	cmp	r3, #4
 8005706:	d11b      	bne.n	8005740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0204 	mvn.w	r2, #4
 8005710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2202      	movs	r2, #2
 8005716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fab9 	bl	8005c9e <HAL_TIM_IC_CaptureCallback>
 800572c:	e005      	b.n	800573a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 faab 	bl	8005c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fabc 	bl	8005cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b08      	cmp	r3, #8
 800574c:	d122      	bne.n	8005794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b08      	cmp	r3, #8
 800575a:	d11b      	bne.n	8005794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0208 	mvn.w	r2, #8
 8005764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2204      	movs	r2, #4
 800576a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fa8f 	bl	8005c9e <HAL_TIM_IC_CaptureCallback>
 8005780:	e005      	b.n	800578e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa81 	bl	8005c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fa92 	bl	8005cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b10      	cmp	r3, #16
 80057a0:	d122      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d11b      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0210 	mvn.w	r2, #16
 80057b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2208      	movs	r2, #8
 80057be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa65 	bl	8005c9e <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa57 	bl	8005c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fa68 	bl	8005cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d10e      	bne.n	8005814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b01      	cmp	r3, #1
 8005802:	d107      	bne.n	8005814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0201 	mvn.w	r2, #1
 800580c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fc f8b2 	bl	8001978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581e:	2b80      	cmp	r3, #128	; 0x80
 8005820:	d10e      	bne.n	8005840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582c:	2b80      	cmp	r3, #128	; 0x80
 800582e:	d107      	bne.n	8005840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 ff10 	bl	8006660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800584e:	d10e      	bne.n	800586e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b80      	cmp	r3, #128	; 0x80
 800585c:	d107      	bne.n	800586e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 ff03 	bl	8006674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d10e      	bne.n	800589a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d107      	bne.n	800589a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fa16 	bl	8005cc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d10e      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d107      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f06f 0220 	mvn.w	r2, #32
 80058be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fec3 	bl	800664c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e0ff      	b.n	8005aee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b14      	cmp	r3, #20
 80058fa:	f200 80f0 	bhi.w	8005ade <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058fe:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005904:	08005959 	.word	0x08005959
 8005908:	08005adf 	.word	0x08005adf
 800590c:	08005adf 	.word	0x08005adf
 8005910:	08005adf 	.word	0x08005adf
 8005914:	08005999 	.word	0x08005999
 8005918:	08005adf 	.word	0x08005adf
 800591c:	08005adf 	.word	0x08005adf
 8005920:	08005adf 	.word	0x08005adf
 8005924:	080059db 	.word	0x080059db
 8005928:	08005adf 	.word	0x08005adf
 800592c:	08005adf 	.word	0x08005adf
 8005930:	08005adf 	.word	0x08005adf
 8005934:	08005a1b 	.word	0x08005a1b
 8005938:	08005adf 	.word	0x08005adf
 800593c:	08005adf 	.word	0x08005adf
 8005940:	08005adf 	.word	0x08005adf
 8005944:	08005a5d 	.word	0x08005a5d
 8005948:	08005adf 	.word	0x08005adf
 800594c:	08005adf 	.word	0x08005adf
 8005950:	08005adf 	.word	0x08005adf
 8005954:	08005a9d 	.word	0x08005a9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fa56 	bl	8005e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0208 	orr.w	r2, r2, #8
 8005972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0204 	bic.w	r2, r2, #4
 8005982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6999      	ldr	r1, [r3, #24]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	619a      	str	r2, [r3, #24]
      break;
 8005996:	e0a5      	b.n	8005ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fac6 	bl	8005f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6999      	ldr	r1, [r3, #24]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	021a      	lsls	r2, r3, #8
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	619a      	str	r2, [r3, #24]
      break;
 80059d8:	e084      	b.n	8005ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fb2f 	bl	8006044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0208 	orr.w	r2, r2, #8
 80059f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0204 	bic.w	r2, r2, #4
 8005a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69d9      	ldr	r1, [r3, #28]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	61da      	str	r2, [r3, #28]
      break;
 8005a18:	e064      	b.n	8005ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fb97 	bl	8006154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69d9      	ldr	r1, [r3, #28]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	021a      	lsls	r2, r3, #8
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	61da      	str	r2, [r3, #28]
      break;
 8005a5a:	e043      	b.n	8005ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fbe0 	bl	8006228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0208 	orr.w	r2, r2, #8
 8005a76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0204 	bic.w	r2, r2, #4
 8005a86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a9a:	e023      	b.n	8005ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fc24 	bl	80062f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ab6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	021a      	lsls	r2, r3, #8
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005adc:	e002      	b.n	8005ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop

08005af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_TIM_ConfigClockSource+0x1c>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e0b6      	b.n	8005c82 <HAL_TIM_ConfigClockSource+0x18a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b50:	d03e      	beq.n	8005bd0 <HAL_TIM_ConfigClockSource+0xd8>
 8005b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b56:	f200 8087 	bhi.w	8005c68 <HAL_TIM_ConfigClockSource+0x170>
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5e:	f000 8086 	beq.w	8005c6e <HAL_TIM_ConfigClockSource+0x176>
 8005b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b66:	d87f      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x170>
 8005b68:	2b70      	cmp	r3, #112	; 0x70
 8005b6a:	d01a      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0xaa>
 8005b6c:	2b70      	cmp	r3, #112	; 0x70
 8005b6e:	d87b      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x170>
 8005b70:	2b60      	cmp	r3, #96	; 0x60
 8005b72:	d050      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x11e>
 8005b74:	2b60      	cmp	r3, #96	; 0x60
 8005b76:	d877      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x170>
 8005b78:	2b50      	cmp	r3, #80	; 0x50
 8005b7a:	d03c      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0xfe>
 8005b7c:	2b50      	cmp	r3, #80	; 0x50
 8005b7e:	d873      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x170>
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	d058      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0x13e>
 8005b84:	2b40      	cmp	r3, #64	; 0x40
 8005b86:	d86f      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x170>
 8005b88:	2b30      	cmp	r3, #48	; 0x30
 8005b8a:	d064      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x15e>
 8005b8c:	2b30      	cmp	r3, #48	; 0x30
 8005b8e:	d86b      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x170>
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d060      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x15e>
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d867      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x170>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d05c      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x15e>
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d05a      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x15e>
 8005ba0:	e062      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6899      	ldr	r1, [r3, #8]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f000 fc7d 	bl	80064b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	609a      	str	r2, [r3, #8]
      break;
 8005bce:	e04f      	b.n	8005c70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	6899      	ldr	r1, [r3, #8]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f000 fc66 	bl	80064b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bf2:	609a      	str	r2, [r3, #8]
      break;
 8005bf4:	e03c      	b.n	8005c70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6859      	ldr	r1, [r3, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f000 fbda 	bl	80063bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2150      	movs	r1, #80	; 0x50
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fc33 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005c14:	e02c      	b.n	8005c70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	6859      	ldr	r1, [r3, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f000 fbf9 	bl	800641a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2160      	movs	r1, #96	; 0x60
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fc23 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005c34:	e01c      	b.n	8005c70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6859      	ldr	r1, [r3, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f000 fbba 	bl	80063bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2140      	movs	r1, #64	; 0x40
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fc13 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005c54:	e00c      	b.n	8005c70 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4610      	mov	r0, r2
 8005c62:	f000 fc0a 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005c66:	e003      	b.n	8005c70 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c6c:	e000      	b.n	8005c70 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
	...

08005cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a40      	ldr	r2, [pc, #256]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d00f      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3d      	ldr	r2, [pc, #244]	; (8005df4 <TIM_Base_SetConfig+0x118>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00b      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3c      	ldr	r2, [pc, #240]	; (8005df8 <TIM_Base_SetConfig+0x11c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d007      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a3b      	ldr	r2, [pc, #236]	; (8005dfc <TIM_Base_SetConfig+0x120>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a3a      	ldr	r2, [pc, #232]	; (8005e00 <TIM_Base_SetConfig+0x124>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d108      	bne.n	8005d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2f      	ldr	r2, [pc, #188]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01f      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3c:	d01b      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2c      	ldr	r2, [pc, #176]	; (8005df4 <TIM_Base_SetConfig+0x118>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d017      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a2b      	ldr	r2, [pc, #172]	; (8005df8 <TIM_Base_SetConfig+0x11c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a2a      	ldr	r2, [pc, #168]	; (8005dfc <TIM_Base_SetConfig+0x120>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00f      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a29      	ldr	r2, [pc, #164]	; (8005e00 <TIM_Base_SetConfig+0x124>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00b      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a28      	ldr	r2, [pc, #160]	; (8005e04 <TIM_Base_SetConfig+0x128>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d007      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a27      	ldr	r2, [pc, #156]	; (8005e08 <TIM_Base_SetConfig+0x12c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a26      	ldr	r2, [pc, #152]	; (8005e0c <TIM_Base_SetConfig+0x130>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d108      	bne.n	8005d88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a10      	ldr	r2, [pc, #64]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00f      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <TIM_Base_SetConfig+0x124>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00b      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a11      	ldr	r2, [pc, #68]	; (8005e04 <TIM_Base_SetConfig+0x128>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <TIM_Base_SetConfig+0x12c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a0f      	ldr	r2, [pc, #60]	; (8005e0c <TIM_Base_SetConfig+0x130>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d103      	bne.n	8005ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	615a      	str	r2, [r3, #20]
}
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	40013400 	.word	0x40013400
 8005e04:	40014000 	.word	0x40014000
 8005e08:	40014400 	.word	0x40014400
 8005e0c:	40014800 	.word	0x40014800

08005e10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f023 0201 	bic.w	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 0302 	bic.w	r3, r3, #2
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <TIM_OC1_SetConfig+0x10c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_OC1_SetConfig+0x80>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a2b      	ldr	r2, [pc, #172]	; (8005f20 <TIM_OC1_SetConfig+0x110>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_OC1_SetConfig+0x80>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a2a      	ldr	r2, [pc, #168]	; (8005f24 <TIM_OC1_SetConfig+0x114>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_OC1_SetConfig+0x80>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a29      	ldr	r2, [pc, #164]	; (8005f28 <TIM_OC1_SetConfig+0x118>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_OC1_SetConfig+0x80>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a28      	ldr	r2, [pc, #160]	; (8005f2c <TIM_OC1_SetConfig+0x11c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d10c      	bne.n	8005eaa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f023 0308 	bic.w	r3, r3, #8
 8005e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 0304 	bic.w	r3, r3, #4
 8005ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <TIM_OC1_SetConfig+0x10c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00f      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xc2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1a      	ldr	r2, [pc, #104]	; (8005f20 <TIM_OC1_SetConfig+0x110>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00b      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xc2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a19      	ldr	r2, [pc, #100]	; (8005f24 <TIM_OC1_SetConfig+0x114>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d007      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xc2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <TIM_OC1_SetConfig+0x118>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xc2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a17      	ldr	r2, [pc, #92]	; (8005f2c <TIM_OC1_SetConfig+0x11c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d111      	bne.n	8005ef6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	621a      	str	r2, [r3, #32]
}
 8005f10:	bf00      	nop
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40013400 	.word	0x40013400
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800

08005f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0210 	bic.w	r2, r3, #16
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f023 0320 	bic.w	r3, r3, #32
 8005f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a28      	ldr	r2, [pc, #160]	; (8006030 <TIM_OC2_SetConfig+0x100>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_OC2_SetConfig+0x6c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a27      	ldr	r2, [pc, #156]	; (8006034 <TIM_OC2_SetConfig+0x104>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d10d      	bne.n	8005fb8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a1d      	ldr	r2, [pc, #116]	; (8006030 <TIM_OC2_SetConfig+0x100>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xb0>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <TIM_OC2_SetConfig+0x104>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xb0>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a1b      	ldr	r2, [pc, #108]	; (8006038 <TIM_OC2_SetConfig+0x108>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xb0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1a      	ldr	r2, [pc, #104]	; (800603c <TIM_OC2_SetConfig+0x10c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xb0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a19      	ldr	r2, [pc, #100]	; (8006040 <TIM_OC2_SetConfig+0x110>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d113      	bne.n	8006008 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40012c00 	.word	0x40012c00
 8006034:	40013400 	.word	0x40013400
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800

08006044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a27      	ldr	r2, [pc, #156]	; (8006140 <TIM_OC3_SetConfig+0xfc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d003      	beq.n	80060ae <TIM_OC3_SetConfig+0x6a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a26      	ldr	r2, [pc, #152]	; (8006144 <TIM_OC3_SetConfig+0x100>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d10d      	bne.n	80060ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a1c      	ldr	r2, [pc, #112]	; (8006140 <TIM_OC3_SetConfig+0xfc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00f      	beq.n	80060f2 <TIM_OC3_SetConfig+0xae>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1b      	ldr	r2, [pc, #108]	; (8006144 <TIM_OC3_SetConfig+0x100>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00b      	beq.n	80060f2 <TIM_OC3_SetConfig+0xae>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1a      	ldr	r2, [pc, #104]	; (8006148 <TIM_OC3_SetConfig+0x104>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d007      	beq.n	80060f2 <TIM_OC3_SetConfig+0xae>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a19      	ldr	r2, [pc, #100]	; (800614c <TIM_OC3_SetConfig+0x108>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_OC3_SetConfig+0xae>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a18      	ldr	r2, [pc, #96]	; (8006150 <TIM_OC3_SetConfig+0x10c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d113      	bne.n	800611a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	621a      	str	r2, [r3, #32]
}
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	40012c00 	.word	0x40012c00
 8006144:	40013400 	.word	0x40013400
 8006148:	40014000 	.word	0x40014000
 800614c:	40014400 	.word	0x40014400
 8006150:	40014800 	.word	0x40014800

08006154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	031b      	lsls	r3, r3, #12
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a18      	ldr	r2, [pc, #96]	; (8006214 <TIM_OC4_SetConfig+0xc0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00f      	beq.n	80061d8 <TIM_OC4_SetConfig+0x84>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a17      	ldr	r2, [pc, #92]	; (8006218 <TIM_OC4_SetConfig+0xc4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00b      	beq.n	80061d8 <TIM_OC4_SetConfig+0x84>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a16      	ldr	r2, [pc, #88]	; (800621c <TIM_OC4_SetConfig+0xc8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <TIM_OC4_SetConfig+0x84>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a15      	ldr	r2, [pc, #84]	; (8006220 <TIM_OC4_SetConfig+0xcc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_OC4_SetConfig+0x84>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a14      	ldr	r2, [pc, #80]	; (8006224 <TIM_OC4_SetConfig+0xd0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d109      	bne.n	80061ec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	019b      	lsls	r3, r3, #6
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40012c00 	.word	0x40012c00
 8006218:	40013400 	.word	0x40013400
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800

08006228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800626c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a17      	ldr	r2, [pc, #92]	; (80062dc <TIM_OC5_SetConfig+0xb4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00f      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <TIM_OC5_SetConfig+0xb8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a15      	ldr	r2, [pc, #84]	; (80062e4 <TIM_OC5_SetConfig+0xbc>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a14      	ldr	r2, [pc, #80]	; (80062e8 <TIM_OC5_SetConfig+0xc0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a13      	ldr	r2, [pc, #76]	; (80062ec <TIM_OC5_SetConfig+0xc4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d109      	bne.n	80062b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	621a      	str	r2, [r3, #32]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	40012c00 	.word	0x40012c00
 80062e0:	40013400 	.word	0x40013400
 80062e4:	40014000 	.word	0x40014000
 80062e8:	40014400 	.word	0x40014400
 80062ec:	40014800 	.word	0x40014800

080062f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800631e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	051b      	lsls	r3, r3, #20
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a18      	ldr	r2, [pc, #96]	; (80063a8 <TIM_OC6_SetConfig+0xb8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00f      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a17      	ldr	r2, [pc, #92]	; (80063ac <TIM_OC6_SetConfig+0xbc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00b      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a16      	ldr	r2, [pc, #88]	; (80063b0 <TIM_OC6_SetConfig+0xc0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d007      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <TIM_OC6_SetConfig+0xc4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <TIM_OC6_SetConfig+0xc8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d109      	bne.n	8006380 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006372:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	029b      	lsls	r3, r3, #10
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800

080063bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0201 	bic.w	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f023 030a 	bic.w	r3, r3, #10
 80063f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641a:	b480      	push	{r7}
 800641c:	b087      	sub	sp, #28
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	f023 0210 	bic.w	r2, r3, #16
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	031b      	lsls	r3, r3, #12
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	f043 0307 	orr.w	r3, r3, #7
 800649c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	609a      	str	r2, [r3, #8]
}
 80064a4:	bf00      	nop
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	021a      	lsls	r2, r3, #8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	609a      	str	r2, [r3, #8]
}
 80064e4:	bf00      	nop
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2201      	movs	r2, #1
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1a      	ldr	r2, [r3, #32]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	43db      	mvns	r3, r3
 8006512:	401a      	ands	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a1a      	ldr	r2, [r3, #32]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f003 031f 	and.w	r3, r3, #31
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	fa01 f303 	lsl.w	r3, r1, r3
 8006528:	431a      	orrs	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
	...

0800653c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006550:	2302      	movs	r3, #2
 8006552:	e068      	b.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a2e      	ldr	r2, [pc, #184]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d004      	beq.n	8006588 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a2d      	ldr	r2, [pc, #180]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d108      	bne.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800658e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1e      	ldr	r2, [pc, #120]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d01d      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c6:	d018      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1b      	ldr	r2, [pc, #108]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1a      	ldr	r2, [pc, #104]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a18      	ldr	r2, [pc, #96]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a13      	ldr	r2, [pc, #76]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a14      	ldr	r2, [pc, #80]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d10c      	bne.n	8006614 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	4313      	orrs	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40013400 	.word	0x40013400
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	40014000 	.word	0x40014000

0800664c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e040      	b.n	800671c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fb fa78 	bl	8001ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2224      	movs	r2, #36	; 0x24
 80066b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0201 	bic.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f992 	bl	80069f0 <UART_SetConfig>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e022      	b.n	800671c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fc3e 	bl	8006f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fcc5 	bl	80070a4 <UART_CheckIdleState>
 800671a:	4603      	mov	r3, r0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08a      	sub	sp, #40	; 0x28
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006738:	2b20      	cmp	r3, #32
 800673a:	f040 8082 	bne.w	8006842 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <HAL_UART_Transmit+0x26>
 8006744:	88fb      	ldrh	r3, [r7, #6]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e07a      	b.n	8006844 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_UART_Transmit+0x38>
 8006758:	2302      	movs	r3, #2
 800675a:	e073      	b.n	8006844 <HAL_UART_Transmit+0x120>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2221      	movs	r2, #33	; 0x21
 8006770:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006772:	f7fb fc85 	bl	8002080 <HAL_GetTick>
 8006776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	88fa      	ldrh	r2, [r7, #6]
 800677c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006790:	d108      	bne.n	80067a4 <HAL_UART_Transmit+0x80>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	e003      	b.n	80067ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80067b4:	e02d      	b.n	8006812 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2200      	movs	r2, #0
 80067be:	2180      	movs	r1, #128	; 0x80
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fcb8 	bl	8007136 <UART_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e039      	b.n	8006844 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10b      	bne.n	80067ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	881a      	ldrh	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067e2:	b292      	uxth	r2, r2
 80067e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	3302      	adds	r3, #2
 80067ea:	61bb      	str	r3, [r7, #24]
 80067ec:	e008      	b.n	8006800 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	781a      	ldrb	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	b292      	uxth	r2, r2
 80067f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	3301      	adds	r3, #1
 80067fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1cb      	bne.n	80067b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2200      	movs	r2, #0
 8006826:	2140      	movs	r1, #64	; 0x40
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 fc84 	bl	8007136 <UART_WaitOnFlagUntilTimeout>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e005      	b.n	8006844 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e000      	b.n	8006844 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006842:	2302      	movs	r3, #2
  }
}
 8006844:	4618      	mov	r0, r3
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	4613      	mov	r3, r2
 800685a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006860:	2b20      	cmp	r3, #32
 8006862:	f040 80bf 	bne.w	80069e4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <HAL_UART_Receive+0x26>
 800686c:	88fb      	ldrh	r3, [r7, #6]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e0b7      	b.n	80069e6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_UART_Receive+0x38>
 8006880:	2302      	movs	r3, #2
 8006882:	e0b0      	b.n	80069e6 <HAL_UART_Receive+0x19a>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2222      	movs	r2, #34	; 0x22
 8006898:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068a0:	f7fb fbee 	bl	8002080 <HAL_GetTick>
 80068a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	88fa      	ldrh	r2, [r7, #6]
 80068aa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	88fa      	ldrh	r2, [r7, #6]
 80068b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068be:	d10e      	bne.n	80068de <HAL_UART_Receive+0x92>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d105      	bne.n	80068d4 <HAL_UART_Receive+0x88>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80068ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068d2:	e02d      	b.n	8006930 <HAL_UART_Receive+0xe4>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	22ff      	movs	r2, #255	; 0xff
 80068d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068dc:	e028      	b.n	8006930 <HAL_UART_Receive+0xe4>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10d      	bne.n	8006902 <HAL_UART_Receive+0xb6>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d104      	bne.n	80068f8 <HAL_UART_Receive+0xac>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	22ff      	movs	r2, #255	; 0xff
 80068f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068f6:	e01b      	b.n	8006930 <HAL_UART_Receive+0xe4>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	227f      	movs	r2, #127	; 0x7f
 80068fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006900:	e016      	b.n	8006930 <HAL_UART_Receive+0xe4>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800690a:	d10d      	bne.n	8006928 <HAL_UART_Receive+0xdc>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <HAL_UART_Receive+0xd2>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	227f      	movs	r2, #127	; 0x7f
 8006918:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800691c:	e008      	b.n	8006930 <HAL_UART_Receive+0xe4>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	223f      	movs	r2, #63	; 0x3f
 8006922:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006926:	e003      	b.n	8006930 <HAL_UART_Receive+0xe4>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006936:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006940:	d108      	bne.n	8006954 <HAL_UART_Receive+0x108>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e003      	b.n	800695c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006958:	2300      	movs	r3, #0
 800695a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006964:	e033      	b.n	80069ce <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2200      	movs	r2, #0
 800696e:	2120      	movs	r1, #32
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 fbe0 	bl	8007136 <UART_WaitOnFlagUntilTimeout>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e032      	b.n	80069e6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10c      	bne.n	80069a0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800698c:	b29a      	uxth	r2, r3
 800698e:	8a7b      	ldrh	r3, [r7, #18]
 8006990:	4013      	ands	r3, r2
 8006992:	b29a      	uxth	r2, r3
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	3302      	adds	r3, #2
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	e00d      	b.n	80069bc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	8a7b      	ldrh	r3, [r7, #18]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	4013      	ands	r3, r2
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	3301      	adds	r3, #1
 80069ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1c5      	bne.n	8006966 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	e000      	b.n	80069e6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80069e4:	2302      	movs	r3, #2
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3720      	adds	r7, #32
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f4:	b08a      	sub	sp, #40	; 0x28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4ba4      	ldr	r3, [pc, #656]	; (8006cb0 <UART_SetConfig+0x2c0>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a99      	ldr	r2, [pc, #612]	; (8006cb4 <UART_SetConfig+0x2c4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a90      	ldr	r2, [pc, #576]	; (8006cb8 <UART_SetConfig+0x2c8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d126      	bne.n	8006ac8 <UART_SetConfig+0xd8>
 8006a7a:	4b90      	ldr	r3, [pc, #576]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a80:	f003 0303 	and.w	r3, r3, #3
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d81b      	bhi.n	8006ac0 <UART_SetConfig+0xd0>
 8006a88:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <UART_SetConfig+0xa0>)
 8006a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8e:	bf00      	nop
 8006a90:	08006aa1 	.word	0x08006aa1
 8006a94:	08006ab1 	.word	0x08006ab1
 8006a98:	08006aa9 	.word	0x08006aa9
 8006a9c:	08006ab9 	.word	0x08006ab9
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa6:	e116      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aae:	e112      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab6:	e10e      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006ab8:	2308      	movs	r3, #8
 8006aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006abe:	e10a      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac6:	e106      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a7c      	ldr	r2, [pc, #496]	; (8006cc0 <UART_SetConfig+0x2d0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d138      	bne.n	8006b44 <UART_SetConfig+0x154>
 8006ad2:	4b7a      	ldr	r3, [pc, #488]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad8:	f003 030c 	and.w	r3, r3, #12
 8006adc:	2b0c      	cmp	r3, #12
 8006ade:	d82d      	bhi.n	8006b3c <UART_SetConfig+0x14c>
 8006ae0:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0xf8>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b1d 	.word	0x08006b1d
 8006aec:	08006b3d 	.word	0x08006b3d
 8006af0:	08006b3d 	.word	0x08006b3d
 8006af4:	08006b3d 	.word	0x08006b3d
 8006af8:	08006b2d 	.word	0x08006b2d
 8006afc:	08006b3d 	.word	0x08006b3d
 8006b00:	08006b3d 	.word	0x08006b3d
 8006b04:	08006b3d 	.word	0x08006b3d
 8006b08:	08006b25 	.word	0x08006b25
 8006b0c:	08006b3d 	.word	0x08006b3d
 8006b10:	08006b3d 	.word	0x08006b3d
 8006b14:	08006b3d 	.word	0x08006b3d
 8006b18:	08006b35 	.word	0x08006b35
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b22:	e0d8      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006b24:	2302      	movs	r3, #2
 8006b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2a:	e0d4      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b32:	e0d0      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006b34:	2308      	movs	r3, #8
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3a:	e0cc      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b42:	e0c8      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a5e      	ldr	r2, [pc, #376]	; (8006cc4 <UART_SetConfig+0x2d4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d125      	bne.n	8006b9a <UART_SetConfig+0x1aa>
 8006b4e:	4b5b      	ldr	r3, [pc, #364]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b58:	2b30      	cmp	r3, #48	; 0x30
 8006b5a:	d016      	beq.n	8006b8a <UART_SetConfig+0x19a>
 8006b5c:	2b30      	cmp	r3, #48	; 0x30
 8006b5e:	d818      	bhi.n	8006b92 <UART_SetConfig+0x1a2>
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d00a      	beq.n	8006b7a <UART_SetConfig+0x18a>
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d814      	bhi.n	8006b92 <UART_SetConfig+0x1a2>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <UART_SetConfig+0x182>
 8006b6c:	2b10      	cmp	r3, #16
 8006b6e:	d008      	beq.n	8006b82 <UART_SetConfig+0x192>
 8006b70:	e00f      	b.n	8006b92 <UART_SetConfig+0x1a2>
 8006b72:	2300      	movs	r3, #0
 8006b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b78:	e0ad      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b80:	e0a9      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006b82:	2304      	movs	r3, #4
 8006b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b88:	e0a5      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b90:	e0a1      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006b92:	2310      	movs	r3, #16
 8006b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b98:	e09d      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a4a      	ldr	r2, [pc, #296]	; (8006cc8 <UART_SetConfig+0x2d8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d125      	bne.n	8006bf0 <UART_SetConfig+0x200>
 8006ba4:	4b45      	ldr	r3, [pc, #276]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006baa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bae:	2bc0      	cmp	r3, #192	; 0xc0
 8006bb0:	d016      	beq.n	8006be0 <UART_SetConfig+0x1f0>
 8006bb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006bb4:	d818      	bhi.n	8006be8 <UART_SetConfig+0x1f8>
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d00a      	beq.n	8006bd0 <UART_SetConfig+0x1e0>
 8006bba:	2b80      	cmp	r3, #128	; 0x80
 8006bbc:	d814      	bhi.n	8006be8 <UART_SetConfig+0x1f8>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <UART_SetConfig+0x1d8>
 8006bc2:	2b40      	cmp	r3, #64	; 0x40
 8006bc4:	d008      	beq.n	8006bd8 <UART_SetConfig+0x1e8>
 8006bc6:	e00f      	b.n	8006be8 <UART_SetConfig+0x1f8>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bce:	e082      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd6:	e07e      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bde:	e07a      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be6:	e076      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bee:	e072      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a35      	ldr	r2, [pc, #212]	; (8006ccc <UART_SetConfig+0x2dc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d12a      	bne.n	8006c50 <UART_SetConfig+0x260>
 8006bfa:	4b30      	ldr	r3, [pc, #192]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c08:	d01a      	beq.n	8006c40 <UART_SetConfig+0x250>
 8006c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c0e:	d81b      	bhi.n	8006c48 <UART_SetConfig+0x258>
 8006c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c14:	d00c      	beq.n	8006c30 <UART_SetConfig+0x240>
 8006c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c1a:	d815      	bhi.n	8006c48 <UART_SetConfig+0x258>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <UART_SetConfig+0x238>
 8006c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c24:	d008      	beq.n	8006c38 <UART_SetConfig+0x248>
 8006c26:	e00f      	b.n	8006c48 <UART_SetConfig+0x258>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2e:	e052      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006c30:	2302      	movs	r3, #2
 8006c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c36:	e04e      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3e:	e04a      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c46:	e046      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c4e:	e042      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a17      	ldr	r2, [pc, #92]	; (8006cb4 <UART_SetConfig+0x2c4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d13a      	bne.n	8006cd0 <UART_SetConfig+0x2e0>
 8006c5a:	4b18      	ldr	r3, [pc, #96]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c68:	d01a      	beq.n	8006ca0 <UART_SetConfig+0x2b0>
 8006c6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c6e:	d81b      	bhi.n	8006ca8 <UART_SetConfig+0x2b8>
 8006c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c74:	d00c      	beq.n	8006c90 <UART_SetConfig+0x2a0>
 8006c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7a:	d815      	bhi.n	8006ca8 <UART_SetConfig+0x2b8>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <UART_SetConfig+0x298>
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c84:	d008      	beq.n	8006c98 <UART_SetConfig+0x2a8>
 8006c86:	e00f      	b.n	8006ca8 <UART_SetConfig+0x2b8>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8e:	e022      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006c90:	2302      	movs	r3, #2
 8006c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c96:	e01e      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c9e:	e01a      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ca6:	e016      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cae:	e012      	b.n	8006cd6 <UART_SetConfig+0x2e6>
 8006cb0:	efff69f3 	.word	0xefff69f3
 8006cb4:	40008000 	.word	0x40008000
 8006cb8:	40013800 	.word	0x40013800
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40004400 	.word	0x40004400
 8006cc4:	40004800 	.word	0x40004800
 8006cc8:	40004c00 	.word	0x40004c00
 8006ccc:	40005000 	.word	0x40005000
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a9f      	ldr	r2, [pc, #636]	; (8006f58 <UART_SetConfig+0x568>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d17a      	bne.n	8006dd6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d824      	bhi.n	8006d32 <UART_SetConfig+0x342>
 8006ce8:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <UART_SetConfig+0x300>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d15 	.word	0x08006d15
 8006cf4:	08006d33 	.word	0x08006d33
 8006cf8:	08006d1d 	.word	0x08006d1d
 8006cfc:	08006d33 	.word	0x08006d33
 8006d00:	08006d23 	.word	0x08006d23
 8006d04:	08006d33 	.word	0x08006d33
 8006d08:	08006d33 	.word	0x08006d33
 8006d0c:	08006d33 	.word	0x08006d33
 8006d10:	08006d2b 	.word	0x08006d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d14:	f7fd fc7c 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8006d18:	61f8      	str	r0, [r7, #28]
        break;
 8006d1a:	e010      	b.n	8006d3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d1c:	4b8f      	ldr	r3, [pc, #572]	; (8006f5c <UART_SetConfig+0x56c>)
 8006d1e:	61fb      	str	r3, [r7, #28]
        break;
 8006d20:	e00d      	b.n	8006d3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d22:	f7fd fbdd 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8006d26:	61f8      	str	r0, [r7, #28]
        break;
 8006d28:	e009      	b.n	8006d3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2e:	61fb      	str	r3, [r7, #28]
        break;
 8006d30:	e005      	b.n	8006d3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80fb 	beq.w	8006f3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	4413      	add	r3, r2
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d305      	bcc.n	8006d62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d5c:	69fa      	ldr	r2, [r7, #28]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d903      	bls.n	8006d6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d68:	e0e8      	b.n	8006f3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	461c      	mov	r4, r3
 8006d70:	4615      	mov	r5, r2
 8006d72:	f04f 0200 	mov.w	r2, #0
 8006d76:	f04f 0300 	mov.w	r3, #0
 8006d7a:	022b      	lsls	r3, r5, #8
 8006d7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d80:	0222      	lsls	r2, r4, #8
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	6849      	ldr	r1, [r1, #4]
 8006d86:	0849      	lsrs	r1, r1, #1
 8006d88:	2000      	movs	r0, #0
 8006d8a:	4688      	mov	r8, r1
 8006d8c:	4681      	mov	r9, r0
 8006d8e:	eb12 0a08 	adds.w	sl, r2, r8
 8006d92:	eb43 0b09 	adc.w	fp, r3, r9
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	603b      	str	r3, [r7, #0]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da4:	4650      	mov	r0, sl
 8006da6:	4659      	mov	r1, fp
 8006da8:	f7f9 ff38 	bl	8000c1c <__aeabi_uldivmod>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4613      	mov	r3, r2
 8006db2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dba:	d308      	bcc.n	8006dce <UART_SetConfig+0x3de>
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc2:	d204      	bcs.n	8006dce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	60da      	str	r2, [r3, #12]
 8006dcc:	e0b6      	b.n	8006f3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006dd4:	e0b2      	b.n	8006f3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dde:	d15e      	bne.n	8006e9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d828      	bhi.n	8006e3a <UART_SetConfig+0x44a>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <UART_SetConfig+0x400>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e15 	.word	0x08006e15
 8006df4:	08006e1d 	.word	0x08006e1d
 8006df8:	08006e25 	.word	0x08006e25
 8006dfc:	08006e3b 	.word	0x08006e3b
 8006e00:	08006e2b 	.word	0x08006e2b
 8006e04:	08006e3b 	.word	0x08006e3b
 8006e08:	08006e3b 	.word	0x08006e3b
 8006e0c:	08006e3b 	.word	0x08006e3b
 8006e10:	08006e33 	.word	0x08006e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e14:	f7fd fbfc 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8006e18:	61f8      	str	r0, [r7, #28]
        break;
 8006e1a:	e014      	b.n	8006e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e1c:	f7fd fc0e 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8006e20:	61f8      	str	r0, [r7, #28]
        break;
 8006e22:	e010      	b.n	8006e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e24:	4b4d      	ldr	r3, [pc, #308]	; (8006f5c <UART_SetConfig+0x56c>)
 8006e26:	61fb      	str	r3, [r7, #28]
        break;
 8006e28:	e00d      	b.n	8006e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e2a:	f7fd fb59 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8006e2e:	61f8      	str	r0, [r7, #28]
        break;
 8006e30:	e009      	b.n	8006e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e36:	61fb      	str	r3, [r7, #28]
        break;
 8006e38:	e005      	b.n	8006e46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d077      	beq.n	8006f3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	005a      	lsls	r2, r3, #1
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	085b      	lsrs	r3, r3, #1
 8006e56:	441a      	add	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b0f      	cmp	r3, #15
 8006e66:	d916      	bls.n	8006e96 <UART_SetConfig+0x4a6>
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e6e:	d212      	bcs.n	8006e96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f023 030f 	bic.w	r3, r3, #15
 8006e78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	085b      	lsrs	r3, r3, #1
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	8afb      	ldrh	r3, [r7, #22]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	8afa      	ldrh	r2, [r7, #22]
 8006e92:	60da      	str	r2, [r3, #12]
 8006e94:	e052      	b.n	8006f3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e9c:	e04e      	b.n	8006f3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d827      	bhi.n	8006ef6 <UART_SetConfig+0x506>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <UART_SetConfig+0x4bc>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ed1 	.word	0x08006ed1
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006ee1 	.word	0x08006ee1
 8006eb8:	08006ef7 	.word	0x08006ef7
 8006ebc:	08006ee7 	.word	0x08006ee7
 8006ec0:	08006ef7 	.word	0x08006ef7
 8006ec4:	08006ef7 	.word	0x08006ef7
 8006ec8:	08006ef7 	.word	0x08006ef7
 8006ecc:	08006eef 	.word	0x08006eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ed0:	f7fd fb9e 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8006ed4:	61f8      	str	r0, [r7, #28]
        break;
 8006ed6:	e014      	b.n	8006f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ed8:	f7fd fbb0 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8006edc:	61f8      	str	r0, [r7, #28]
        break;
 8006ede:	e010      	b.n	8006f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ee0:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <UART_SetConfig+0x56c>)
 8006ee2:	61fb      	str	r3, [r7, #28]
        break;
 8006ee4:	e00d      	b.n	8006f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ee6:	f7fd fafb 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8006eea:	61f8      	str	r0, [r7, #28]
        break;
 8006eec:	e009      	b.n	8006f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ef2:	61fb      	str	r3, [r7, #28]
        break;
 8006ef4:	e005      	b.n	8006f02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f00:	bf00      	nop
    }

    if (pclk != 0U)
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d019      	beq.n	8006f3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	085a      	lsrs	r2, r3, #1
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	2b0f      	cmp	r3, #15
 8006f20:	d909      	bls.n	8006f36 <UART_SetConfig+0x546>
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f28:	d205      	bcs.n	8006f36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60da      	str	r2, [r3, #12]
 8006f34:	e002      	b.n	8006f3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3728      	adds	r7, #40	; 0x28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f56:	bf00      	nop
 8006f58:	40008000 	.word	0x40008000
 8006f5c:	00f42400 	.word	0x00f42400

08006f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00a      	beq.n	8007012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01a      	beq.n	8007076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705e:	d10a      	bne.n	8007076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	605a      	str	r2, [r3, #4]
  }
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070b4:	f7fa ffe4 	bl	8002080 <HAL_GetTick>
 80070b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d10e      	bne.n	80070e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f82d 	bl	8007136 <UART_WaitOnFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e023      	b.n	800712e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d10e      	bne.n	8007112 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f817 	bl	8007136 <UART_WaitOnFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e00d      	b.n	800712e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b09c      	sub	sp, #112	; 0x70
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	4613      	mov	r3, r2
 8007144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007146:	e0a5      	b.n	8007294 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800714e:	f000 80a1 	beq.w	8007294 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007152:	f7fa ff95 	bl	8002080 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800715e:	429a      	cmp	r2, r3
 8007160:	d302      	bcc.n	8007168 <UART_WaitOnFlagUntilTimeout+0x32>
 8007162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007164:	2b00      	cmp	r3, #0
 8007166:	d13e      	bne.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007178:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800717c:	667b      	str	r3, [r7, #100]	; 0x64
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007188:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800718c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e6      	bne.n	8007168 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3308      	adds	r3, #8
 80071a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	f023 0301 	bic.w	r3, r3, #1
 80071b0:	663b      	str	r3, [r7, #96]	; 0x60
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3308      	adds	r3, #8
 80071b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80071bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e5      	bne.n	800719a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2220      	movs	r2, #32
 80071d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2220      	movs	r2, #32
 80071d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e067      	b.n	80072b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0304 	and.w	r3, r3, #4
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d04f      	beq.n	8007294 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007202:	d147      	bne.n	8007294 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800720c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007222:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800722c:	637b      	str	r3, [r7, #52]	; 0x34
 800722e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007234:	e841 2300 	strex	r3, r2, [r1]
 8007238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e6      	bne.n	800720e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3308      	adds	r3, #8
 8007246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	613b      	str	r3, [r7, #16]
   return(result);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f023 0301 	bic.w	r3, r3, #1
 8007256:	66bb      	str	r3, [r7, #104]	; 0x68
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3308      	adds	r3, #8
 800725e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007260:	623a      	str	r2, [r7, #32]
 8007262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	69f9      	ldr	r1, [r7, #28]
 8007266:	6a3a      	ldr	r2, [r7, #32]
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	61bb      	str	r3, [r7, #24]
   return(result);
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e5      	bne.n	8007240 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2220      	movs	r2, #32
 8007278:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2220      	movs	r2, #32
 800727e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e010      	b.n	80072b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69da      	ldr	r2, [r3, #28]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	4013      	ands	r3, r2
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	bf0c      	ite	eq
 80072a4:	2301      	moveq	r3, #1
 80072a6:	2300      	movne	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	f43f af4a 	beq.w	8007148 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3770      	adds	r7, #112	; 0x70
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	4603      	mov	r3, r0
 80072c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80072cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072d0:	2b84      	cmp	r3, #132	; 0x84
 80072d2:	d005      	beq.n	80072e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80072d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	3303      	adds	r3, #3
 80072de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80072e0:	68fb      	ldr	r3, [r7, #12]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80072f2:	f000 fadf 	bl	80078b4 <vTaskStartScheduler>
  
  return osOK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	bd80      	pop	{r7, pc}

080072fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80072fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072fe:	b089      	sub	sp, #36	; 0x24
 8007300:	af04      	add	r7, sp, #16
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d020      	beq.n	8007350 <osThreadCreate+0x54>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d01c      	beq.n	8007350 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685c      	ldr	r4, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681d      	ldr	r5, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691e      	ldr	r6, [r3, #16]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff ffc8 	bl	80072be <makeFreeRtosPriority>
 800732e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007338:	9202      	str	r2, [sp, #8]
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	9100      	str	r1, [sp, #0]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	4632      	mov	r2, r6
 8007342:	4629      	mov	r1, r5
 8007344:	4620      	mov	r0, r4
 8007346:	f000 f8ed 	bl	8007524 <xTaskCreateStatic>
 800734a:	4603      	mov	r3, r0
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e01c      	b.n	800738a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685c      	ldr	r4, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800735c:	b29e      	uxth	r6, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff ffaa 	bl	80072be <makeFreeRtosPriority>
 800736a:	4602      	mov	r2, r0
 800736c:	f107 030c 	add.w	r3, r7, #12
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	9200      	str	r2, [sp, #0]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	4632      	mov	r2, r6
 8007378:	4629      	mov	r1, r5
 800737a:	4620      	mov	r0, r4
 800737c:	f000 f92f 	bl	80075de <xTaskCreate>
 8007380:	4603      	mov	r3, r0
 8007382:	2b01      	cmp	r3, #1
 8007384:	d001      	beq.n	800738a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	e000      	b.n	800738c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800738a:	68fb      	ldr	r3, [r7, #12]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007394 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <osDelay+0x16>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	e000      	b.n	80073ac <osDelay+0x18>
 80073aa:	2301      	movs	r3, #1
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fa4d 	bl	800784c <vTaskDelay>
  
  return osOK;
 80073b2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f103 0208 	add.w	r2, r3, #8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f103 0208 	add.w	r2, r3, #8
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f103 0208 	add.w	r2, r3, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007416:	b480      	push	{r7}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	601a      	str	r2, [r3, #0]
}
 8007452:	bf00      	nop
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007474:	d103      	bne.n	800747e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	e00c      	b.n	8007498 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3308      	adds	r3, #8
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	e002      	b.n	800748c <vListInsert+0x2e>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	429a      	cmp	r2, r3
 8007496:	d2f6      	bcs.n	8007486 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]
}
 80074c4:	bf00      	nop
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6892      	ldr	r2, [r2, #8]
 80074e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6852      	ldr	r2, [r2, #4]
 80074f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d103      	bne.n	8007504 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	1e5a      	subs	r2, r3, #1
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08e      	sub	sp, #56	; 0x38
 8007528:	af04      	add	r7, sp, #16
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800754a:	bf00      	nop
 800754c:	e7fe      	b.n	800754c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <xTaskCreateStatic+0x46>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	61fb      	str	r3, [r7, #28]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800756a:	2354      	movs	r3, #84	; 0x54
 800756c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b54      	cmp	r3, #84	; 0x54
 8007572:	d00a      	beq.n	800758a <xTaskCreateStatic+0x66>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	61bb      	str	r3, [r7, #24]
}
 8007586:	bf00      	nop
 8007588:	e7fe      	b.n	8007588 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800758a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	2b00      	cmp	r3, #0
 8007590:	d01e      	beq.n	80075d0 <xTaskCreateStatic+0xac>
 8007592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01b      	beq.n	80075d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075aa:	2300      	movs	r3, #0
 80075ac:	9303      	str	r3, [sp, #12]
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	9302      	str	r3, [sp, #8]
 80075b2:	f107 0314 	add.w	r3, r7, #20
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f850 	bl	8007668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075ca:	f000 f8d5 	bl	8007778 <prvAddNewTaskToReadyList>
 80075ce:	e001      	b.n	80075d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075d4:	697b      	ldr	r3, [r7, #20]
	}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3728      	adds	r7, #40	; 0x28
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b08c      	sub	sp, #48	; 0x30
 80075e2:	af04      	add	r7, sp, #16
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	603b      	str	r3, [r7, #0]
 80075ea:	4613      	mov	r3, r2
 80075ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fec8 	bl	8008388 <pvPortMalloc>
 80075f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00e      	beq.n	800761e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007600:	2054      	movs	r0, #84	; 0x54
 8007602:	f000 fec1 	bl	8008388 <pvPortMalloc>
 8007606:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
 8007614:	e005      	b.n	8007622 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007616:	6978      	ldr	r0, [r7, #20]
 8007618:	f000 ff82 	bl	8008520 <vPortFree>
 800761c:	e001      	b.n	8007622 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d017      	beq.n	8007658 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007630:	88fa      	ldrh	r2, [r7, #6]
 8007632:	2300      	movs	r3, #0
 8007634:	9303      	str	r3, [sp, #12]
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	9302      	str	r3, [sp, #8]
 800763a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 f80e 	bl	8007668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800764c:	69f8      	ldr	r0, [r7, #28]
 800764e:	f000 f893 	bl	8007778 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007652:	2301      	movs	r3, #1
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	e002      	b.n	800765e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800765c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800765e:	69bb      	ldr	r3, [r7, #24]
	}
 8007660:	4618      	mov	r0, r3
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007680:	3b01      	subs	r3, #1
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	f023 0307 	bic.w	r3, r3, #7
 800768e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	617b      	str	r3, [r7, #20]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d01f      	beq.n	80076f6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	e012      	b.n	80076e2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	7819      	ldrb	r1, [r3, #0]
 80076c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	3334      	adds	r3, #52	; 0x34
 80076cc:	460a      	mov	r2, r1
 80076ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4413      	add	r3, r2
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d006      	beq.n	80076ea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	3301      	adds	r3, #1
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	2b0f      	cmp	r3, #15
 80076e6:	d9e9      	bls.n	80076bc <prvInitialiseNewTask+0x54>
 80076e8:	e000      	b.n	80076ec <prvInitialiseNewTask+0x84>
			{
				break;
 80076ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076f4:	e003      	b.n	80076fe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	2b06      	cmp	r3, #6
 8007702:	d901      	bls.n	8007708 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007704:	2306      	movs	r3, #6
 8007706:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800770c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007712:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	2200      	movs	r2, #0
 8007718:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	3304      	adds	r3, #4
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff fe6c 	bl	80073fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	3318      	adds	r3, #24
 8007728:	4618      	mov	r0, r3
 800772a:	f7ff fe67 	bl	80073fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007732:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	f1c3 0207 	rsb	r2, r3, #7
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007742:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	2200      	movs	r2, #0
 8007748:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	68f9      	ldr	r1, [r7, #12]
 8007756:	69b8      	ldr	r0, [r7, #24]
 8007758:	f000 fc06 	bl	8007f68 <pxPortInitialiseStack>
 800775c:	4602      	mov	r2, r0
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800776e:	bf00      	nop
 8007770:	3720      	adds	r7, #32
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007780:	f000 fd20 	bl	80081c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007784:	4b2a      	ldr	r3, [pc, #168]	; (8007830 <prvAddNewTaskToReadyList+0xb8>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3301      	adds	r3, #1
 800778a:	4a29      	ldr	r2, [pc, #164]	; (8007830 <prvAddNewTaskToReadyList+0xb8>)
 800778c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800778e:	4b29      	ldr	r3, [pc, #164]	; (8007834 <prvAddNewTaskToReadyList+0xbc>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d109      	bne.n	80077aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007796:	4a27      	ldr	r2, [pc, #156]	; (8007834 <prvAddNewTaskToReadyList+0xbc>)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800779c:	4b24      	ldr	r3, [pc, #144]	; (8007830 <prvAddNewTaskToReadyList+0xb8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d110      	bne.n	80077c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077a4:	f000 fabc 	bl	8007d20 <prvInitialiseTaskLists>
 80077a8:	e00d      	b.n	80077c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077aa:	4b23      	ldr	r3, [pc, #140]	; (8007838 <prvAddNewTaskToReadyList+0xc0>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d109      	bne.n	80077c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077b2:	4b20      	ldr	r3, [pc, #128]	; (8007834 <prvAddNewTaskToReadyList+0xbc>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	429a      	cmp	r2, r3
 80077be:	d802      	bhi.n	80077c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077c0:	4a1c      	ldr	r2, [pc, #112]	; (8007834 <prvAddNewTaskToReadyList+0xbc>)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077c6:	4b1d      	ldr	r3, [pc, #116]	; (800783c <prvAddNewTaskToReadyList+0xc4>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3301      	adds	r3, #1
 80077cc:	4a1b      	ldr	r2, [pc, #108]	; (800783c <prvAddNewTaskToReadyList+0xc4>)
 80077ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	2201      	movs	r2, #1
 80077d6:	409a      	lsls	r2, r3
 80077d8:	4b19      	ldr	r3, [pc, #100]	; (8007840 <prvAddNewTaskToReadyList+0xc8>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4313      	orrs	r3, r2
 80077de:	4a18      	ldr	r2, [pc, #96]	; (8007840 <prvAddNewTaskToReadyList+0xc8>)
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4a15      	ldr	r2, [pc, #84]	; (8007844 <prvAddNewTaskToReadyList+0xcc>)
 80077f0:	441a      	add	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7ff fe0c 	bl	8007416 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077fe:	f000 fd11 	bl	8008224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007802:	4b0d      	ldr	r3, [pc, #52]	; (8007838 <prvAddNewTaskToReadyList+0xc0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00e      	beq.n	8007828 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800780a:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <prvAddNewTaskToReadyList+0xbc>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	429a      	cmp	r2, r3
 8007816:	d207      	bcs.n	8007828 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007818:	4b0b      	ldr	r3, [pc, #44]	; (8007848 <prvAddNewTaskToReadyList+0xd0>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20000674 	.word	0x20000674
 8007834:	20000574 	.word	0x20000574
 8007838:	20000680 	.word	0x20000680
 800783c:	20000690 	.word	0x20000690
 8007840:	2000067c 	.word	0x2000067c
 8007844:	20000578 	.word	0x20000578
 8007848:	e000ed04 	.word	0xe000ed04

0800784c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007854:	2300      	movs	r3, #0
 8007856:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d017      	beq.n	800788e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800785e:	4b13      	ldr	r3, [pc, #76]	; (80078ac <vTaskDelay+0x60>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <vTaskDelay+0x30>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	60bb      	str	r3, [r7, #8]
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800787c:	f000 f87a 	bl	8007974 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007880:	2100      	movs	r1, #0
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fb0a 	bl	8007e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007888:	f000 f882 	bl	8007990 <xTaskResumeAll>
 800788c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d107      	bne.n	80078a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007894:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <vTaskDelay+0x64>)
 8007896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	2000069c 	.word	0x2000069c
 80078b0:	e000ed04 	.word	0xe000ed04

080078b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08a      	sub	sp, #40	; 0x28
 80078b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078c2:	463a      	mov	r2, r7
 80078c4:	1d39      	adds	r1, r7, #4
 80078c6:	f107 0308 	add.w	r3, r7, #8
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7f9 fb28 	bl	8000f20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	9202      	str	r2, [sp, #8]
 80078d8:	9301      	str	r3, [sp, #4]
 80078da:	2300      	movs	r3, #0
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	2300      	movs	r3, #0
 80078e0:	460a      	mov	r2, r1
 80078e2:	491e      	ldr	r1, [pc, #120]	; (800795c <vTaskStartScheduler+0xa8>)
 80078e4:	481e      	ldr	r0, [pc, #120]	; (8007960 <vTaskStartScheduler+0xac>)
 80078e6:	f7ff fe1d 	bl	8007524 <xTaskCreateStatic>
 80078ea:	4603      	mov	r3, r0
 80078ec:	4a1d      	ldr	r2, [pc, #116]	; (8007964 <vTaskStartScheduler+0xb0>)
 80078ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078f0:	4b1c      	ldr	r3, [pc, #112]	; (8007964 <vTaskStartScheduler+0xb0>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078f8:	2301      	movs	r3, #1
 80078fa:	617b      	str	r3, [r7, #20]
 80078fc:	e001      	b.n	8007902 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078fe:	2300      	movs	r3, #0
 8007900:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d116      	bne.n	8007936 <vTaskStartScheduler+0x82>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	613b      	str	r3, [r7, #16]
}
 800791a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800791c:	4b12      	ldr	r3, [pc, #72]	; (8007968 <vTaskStartScheduler+0xb4>)
 800791e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007922:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007924:	4b11      	ldr	r3, [pc, #68]	; (800796c <vTaskStartScheduler+0xb8>)
 8007926:	2201      	movs	r2, #1
 8007928:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800792a:	4b11      	ldr	r3, [pc, #68]	; (8007970 <vTaskStartScheduler+0xbc>)
 800792c:	2200      	movs	r2, #0
 800792e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007930:	f000 fba6 	bl	8008080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007934:	e00e      	b.n	8007954 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800793c:	d10a      	bne.n	8007954 <vTaskStartScheduler+0xa0>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	60fb      	str	r3, [r7, #12]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <vTaskStartScheduler+0x9e>
}
 8007954:	bf00      	nop
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	0800b424 	.word	0x0800b424
 8007960:	08007cf1 	.word	0x08007cf1
 8007964:	20000698 	.word	0x20000698
 8007968:	20000694 	.word	0x20000694
 800796c:	20000680 	.word	0x20000680
 8007970:	20000678 	.word	0x20000678

08007974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007978:	4b04      	ldr	r3, [pc, #16]	; (800798c <vTaskSuspendAll+0x18>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3301      	adds	r3, #1
 800797e:	4a03      	ldr	r2, [pc, #12]	; (800798c <vTaskSuspendAll+0x18>)
 8007980:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007982:	bf00      	nop
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	2000069c 	.word	0x2000069c

08007990 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800799e:	4b41      	ldr	r3, [pc, #260]	; (8007aa4 <xTaskResumeAll+0x114>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10a      	bne.n	80079bc <xTaskResumeAll+0x2c>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	603b      	str	r3, [r7, #0]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079bc:	f000 fc02 	bl	80081c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079c0:	4b38      	ldr	r3, [pc, #224]	; (8007aa4 <xTaskResumeAll+0x114>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	4a37      	ldr	r2, [pc, #220]	; (8007aa4 <xTaskResumeAll+0x114>)
 80079c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ca:	4b36      	ldr	r3, [pc, #216]	; (8007aa4 <xTaskResumeAll+0x114>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d161      	bne.n	8007a96 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079d2:	4b35      	ldr	r3, [pc, #212]	; (8007aa8 <xTaskResumeAll+0x118>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d05d      	beq.n	8007a96 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079da:	e02e      	b.n	8007a3a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079dc:	4b33      	ldr	r3, [pc, #204]	; (8007aac <xTaskResumeAll+0x11c>)
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3318      	adds	r3, #24
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff fd71 	bl	80074d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3304      	adds	r3, #4
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff fd6c 	bl	80074d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fc:	2201      	movs	r2, #1
 80079fe:	409a      	lsls	r2, r3
 8007a00:	4b2b      	ldr	r3, [pc, #172]	; (8007ab0 <xTaskResumeAll+0x120>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	4a2a      	ldr	r2, [pc, #168]	; (8007ab0 <xTaskResumeAll+0x120>)
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4a27      	ldr	r2, [pc, #156]	; (8007ab4 <xTaskResumeAll+0x124>)
 8007a18:	441a      	add	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f7ff fcf8 	bl	8007416 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2a:	4b23      	ldr	r3, [pc, #140]	; (8007ab8 <xTaskResumeAll+0x128>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d302      	bcc.n	8007a3a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007a34:	4b21      	ldr	r3, [pc, #132]	; (8007abc <xTaskResumeAll+0x12c>)
 8007a36:	2201      	movs	r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a3a:	4b1c      	ldr	r3, [pc, #112]	; (8007aac <xTaskResumeAll+0x11c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1cc      	bne.n	80079dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a48:	f000 fa08 	bl	8007e5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a4c:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <xTaskResumeAll+0x130>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d010      	beq.n	8007a7a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a58:	f000 f836 	bl	8007ac8 <xTaskIncrementTick>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007a62:	4b16      	ldr	r3, [pc, #88]	; (8007abc <xTaskResumeAll+0x12c>)
 8007a64:	2201      	movs	r2, #1
 8007a66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f1      	bne.n	8007a58 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007a74:	4b12      	ldr	r3, [pc, #72]	; (8007ac0 <xTaskResumeAll+0x130>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a7a:	4b10      	ldr	r3, [pc, #64]	; (8007abc <xTaskResumeAll+0x12c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a82:	2301      	movs	r3, #1
 8007a84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a86:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <xTaskResumeAll+0x134>)
 8007a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a96:	f000 fbc5 	bl	8008224 <vPortExitCritical>

	return xAlreadyYielded;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	2000069c 	.word	0x2000069c
 8007aa8:	20000674 	.word	0x20000674
 8007aac:	20000634 	.word	0x20000634
 8007ab0:	2000067c 	.word	0x2000067c
 8007ab4:	20000578 	.word	0x20000578
 8007ab8:	20000574 	.word	0x20000574
 8007abc:	20000688 	.word	0x20000688
 8007ac0:	20000684 	.word	0x20000684
 8007ac4:	e000ed04 	.word	0xe000ed04

08007ac8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ad2:	4b4e      	ldr	r3, [pc, #312]	; (8007c0c <xTaskIncrementTick+0x144>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 808e 	bne.w	8007bf8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007adc:	4b4c      	ldr	r3, [pc, #304]	; (8007c10 <xTaskIncrementTick+0x148>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ae4:	4a4a      	ldr	r2, [pc, #296]	; (8007c10 <xTaskIncrementTick+0x148>)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d120      	bne.n	8007b32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007af0:	4b48      	ldr	r3, [pc, #288]	; (8007c14 <xTaskIncrementTick+0x14c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <xTaskIncrementTick+0x48>
	__asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	603b      	str	r3, [r7, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	e7fe      	b.n	8007b0e <xTaskIncrementTick+0x46>
 8007b10:	4b40      	ldr	r3, [pc, #256]	; (8007c14 <xTaskIncrementTick+0x14c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	4b40      	ldr	r3, [pc, #256]	; (8007c18 <xTaskIncrementTick+0x150>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a3e      	ldr	r2, [pc, #248]	; (8007c14 <xTaskIncrementTick+0x14c>)
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	4a3e      	ldr	r2, [pc, #248]	; (8007c18 <xTaskIncrementTick+0x150>)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	4b3d      	ldr	r3, [pc, #244]	; (8007c1c <xTaskIncrementTick+0x154>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	4a3c      	ldr	r2, [pc, #240]	; (8007c1c <xTaskIncrementTick+0x154>)
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	f000 f995 	bl	8007e5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b32:	4b3b      	ldr	r3, [pc, #236]	; (8007c20 <xTaskIncrementTick+0x158>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d348      	bcc.n	8007bce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b3c:	4b35      	ldr	r3, [pc, #212]	; (8007c14 <xTaskIncrementTick+0x14c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d104      	bne.n	8007b50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b46:	4b36      	ldr	r3, [pc, #216]	; (8007c20 <xTaskIncrementTick+0x158>)
 8007b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b4c:	601a      	str	r2, [r3, #0]
					break;
 8007b4e:	e03e      	b.n	8007bce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b50:	4b30      	ldr	r3, [pc, #192]	; (8007c14 <xTaskIncrementTick+0x14c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d203      	bcs.n	8007b70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b68:	4a2d      	ldr	r2, [pc, #180]	; (8007c20 <xTaskIncrementTick+0x158>)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b6e:	e02e      	b.n	8007bce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff fcab 	bl	80074d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	3318      	adds	r3, #24
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff fca2 	bl	80074d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	2201      	movs	r2, #1
 8007b92:	409a      	lsls	r2, r3
 8007b94:	4b23      	ldr	r3, [pc, #140]	; (8007c24 <xTaskIncrementTick+0x15c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	4a22      	ldr	r2, [pc, #136]	; (8007c24 <xTaskIncrementTick+0x15c>)
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4a1f      	ldr	r2, [pc, #124]	; (8007c28 <xTaskIncrementTick+0x160>)
 8007bac:	441a      	add	r2, r3
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f7ff fc2e 	bl	8007416 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbe:	4b1b      	ldr	r3, [pc, #108]	; (8007c2c <xTaskIncrementTick+0x164>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d3b9      	bcc.n	8007b3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bcc:	e7b6      	b.n	8007b3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bce:	4b17      	ldr	r3, [pc, #92]	; (8007c2c <xTaskIncrementTick+0x164>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd4:	4914      	ldr	r1, [pc, #80]	; (8007c28 <xTaskIncrementTick+0x160>)
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d901      	bls.n	8007bea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007be6:	2301      	movs	r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bea:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <xTaskIncrementTick+0x168>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	e004      	b.n	8007c02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007bf8:	4b0e      	ldr	r3, [pc, #56]	; (8007c34 <xTaskIncrementTick+0x16c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	4a0d      	ldr	r2, [pc, #52]	; (8007c34 <xTaskIncrementTick+0x16c>)
 8007c00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c02:	697b      	ldr	r3, [r7, #20]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	2000069c 	.word	0x2000069c
 8007c10:	20000678 	.word	0x20000678
 8007c14:	2000062c 	.word	0x2000062c
 8007c18:	20000630 	.word	0x20000630
 8007c1c:	2000068c 	.word	0x2000068c
 8007c20:	20000694 	.word	0x20000694
 8007c24:	2000067c 	.word	0x2000067c
 8007c28:	20000578 	.word	0x20000578
 8007c2c:	20000574 	.word	0x20000574
 8007c30:	20000688 	.word	0x20000688
 8007c34:	20000684 	.word	0x20000684

08007c38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c3e:	4b27      	ldr	r3, [pc, #156]	; (8007cdc <vTaskSwitchContext+0xa4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c46:	4b26      	ldr	r3, [pc, #152]	; (8007ce0 <vTaskSwitchContext+0xa8>)
 8007c48:	2201      	movs	r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c4c:	e03f      	b.n	8007cce <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007c4e:	4b24      	ldr	r3, [pc, #144]	; (8007ce0 <vTaskSwitchContext+0xa8>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c54:	4b23      	ldr	r3, [pc, #140]	; (8007ce4 <vTaskSwitchContext+0xac>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	fab3 f383 	clz	r3, r3
 8007c60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c62:	7afb      	ldrb	r3, [r7, #11]
 8007c64:	f1c3 031f 	rsb	r3, r3, #31
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	491f      	ldr	r1, [pc, #124]	; (8007ce8 <vTaskSwitchContext+0xb0>)
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	440b      	add	r3, r1
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	607b      	str	r3, [r7, #4]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <vTaskSwitchContext+0x5a>
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4a12      	ldr	r2, [pc, #72]	; (8007ce8 <vTaskSwitchContext+0xb0>)
 8007ca0:	4413      	add	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	605a      	str	r2, [r3, #4]
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d104      	bne.n	8007cc4 <vTaskSwitchContext+0x8c>
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	605a      	str	r2, [r3, #4]
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	4a08      	ldr	r2, [pc, #32]	; (8007cec <vTaskSwitchContext+0xb4>)
 8007ccc:	6013      	str	r3, [r2, #0]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	2000069c 	.word	0x2000069c
 8007ce0:	20000688 	.word	0x20000688
 8007ce4:	2000067c 	.word	0x2000067c
 8007ce8:	20000578 	.word	0x20000578
 8007cec:	20000574 	.word	0x20000574

08007cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cf8:	f000 f852 	bl	8007da0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cfc:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <prvIdleTask+0x28>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d9f9      	bls.n	8007cf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <prvIdleTask+0x2c>)
 8007d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d14:	e7f0      	b.n	8007cf8 <prvIdleTask+0x8>
 8007d16:	bf00      	nop
 8007d18:	20000578 	.word	0x20000578
 8007d1c:	e000ed04 	.word	0xe000ed04

08007d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d26:	2300      	movs	r3, #0
 8007d28:	607b      	str	r3, [r7, #4]
 8007d2a:	e00c      	b.n	8007d46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4a12      	ldr	r2, [pc, #72]	; (8007d80 <prvInitialiseTaskLists+0x60>)
 8007d38:	4413      	add	r3, r2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff fb3e 	bl	80073bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3301      	adds	r3, #1
 8007d44:	607b      	str	r3, [r7, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b06      	cmp	r3, #6
 8007d4a:	d9ef      	bls.n	8007d2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d4c:	480d      	ldr	r0, [pc, #52]	; (8007d84 <prvInitialiseTaskLists+0x64>)
 8007d4e:	f7ff fb35 	bl	80073bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d52:	480d      	ldr	r0, [pc, #52]	; (8007d88 <prvInitialiseTaskLists+0x68>)
 8007d54:	f7ff fb32 	bl	80073bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d58:	480c      	ldr	r0, [pc, #48]	; (8007d8c <prvInitialiseTaskLists+0x6c>)
 8007d5a:	f7ff fb2f 	bl	80073bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d5e:	480c      	ldr	r0, [pc, #48]	; (8007d90 <prvInitialiseTaskLists+0x70>)
 8007d60:	f7ff fb2c 	bl	80073bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d64:	480b      	ldr	r0, [pc, #44]	; (8007d94 <prvInitialiseTaskLists+0x74>)
 8007d66:	f7ff fb29 	bl	80073bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d6a:	4b0b      	ldr	r3, [pc, #44]	; (8007d98 <prvInitialiseTaskLists+0x78>)
 8007d6c:	4a05      	ldr	r2, [pc, #20]	; (8007d84 <prvInitialiseTaskLists+0x64>)
 8007d6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d70:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <prvInitialiseTaskLists+0x7c>)
 8007d72:	4a05      	ldr	r2, [pc, #20]	; (8007d88 <prvInitialiseTaskLists+0x68>)
 8007d74:	601a      	str	r2, [r3, #0]
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000578 	.word	0x20000578
 8007d84:	20000604 	.word	0x20000604
 8007d88:	20000618 	.word	0x20000618
 8007d8c:	20000634 	.word	0x20000634
 8007d90:	20000648 	.word	0x20000648
 8007d94:	20000660 	.word	0x20000660
 8007d98:	2000062c 	.word	0x2000062c
 8007d9c:	20000630 	.word	0x20000630

08007da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007da6:	e019      	b.n	8007ddc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007da8:	f000 fa0c 	bl	80081c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dac:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <prvCheckTasksWaitingTermination+0x50>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff fb89 	bl	80074d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <prvCheckTasksWaitingTermination+0x54>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	4a0b      	ldr	r2, [pc, #44]	; (8007df4 <prvCheckTasksWaitingTermination+0x54>)
 8007dc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007dc8:	4b0b      	ldr	r3, [pc, #44]	; (8007df8 <prvCheckTasksWaitingTermination+0x58>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	4a0a      	ldr	r2, [pc, #40]	; (8007df8 <prvCheckTasksWaitingTermination+0x58>)
 8007dd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dd2:	f000 fa27 	bl	8008224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f810 	bl	8007dfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ddc:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <prvCheckTasksWaitingTermination+0x58>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e1      	bne.n	8007da8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000648 	.word	0x20000648
 8007df4:	20000674 	.word	0x20000674
 8007df8:	2000065c 	.word	0x2000065c

08007dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d108      	bne.n	8007e20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fb84 	bl	8008520 <vPortFree>
				vPortFree( pxTCB );
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fb81 	bl	8008520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e1e:	e018      	b.n	8007e52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d103      	bne.n	8007e32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fb78 	bl	8008520 <vPortFree>
	}
 8007e30:	e00f      	b.n	8007e52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d00a      	beq.n	8007e52 <prvDeleteTCB+0x56>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	60fb      	str	r3, [r7, #12]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <prvDeleteTCB+0x54>
	}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e62:	4b0c      	ldr	r3, [pc, #48]	; (8007e94 <prvResetNextTaskUnblockTime+0x38>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d104      	bne.n	8007e76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <prvResetNextTaskUnblockTime+0x3c>)
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e74:	e008      	b.n	8007e88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e76:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <prvResetNextTaskUnblockTime+0x38>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	4a04      	ldr	r2, [pc, #16]	; (8007e98 <prvResetNextTaskUnblockTime+0x3c>)
 8007e86:	6013      	str	r3, [r2, #0]
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	2000062c 	.word	0x2000062c
 8007e98:	20000694 	.word	0x20000694

08007e9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ea6:	4b29      	ldr	r3, [pc, #164]	; (8007f4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eac:	4b28      	ldr	r3, [pc, #160]	; (8007f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff fb0c 	bl	80074d0 <uxListRemove>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10b      	bne.n	8007ed6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007ebe:	4b24      	ldr	r3, [pc, #144]	; (8007f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eca:	43da      	mvns	r2, r3
 8007ecc:	4b21      	ldr	r3, [pc, #132]	; (8007f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	4a20      	ldr	r2, [pc, #128]	; (8007f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ed4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007edc:	d10a      	bne.n	8007ef4 <prvAddCurrentTaskToDelayedList+0x58>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d007      	beq.n	8007ef4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ee4:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	4619      	mov	r1, r3
 8007eec:	481a      	ldr	r0, [pc, #104]	; (8007f58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007eee:	f7ff fa92 	bl	8007416 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ef2:	e026      	b.n	8007f42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007efc:	4b14      	ldr	r3, [pc, #80]	; (8007f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d209      	bcs.n	8007f20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f0c:	4b13      	ldr	r3, [pc, #76]	; (8007f5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4619      	mov	r1, r3
 8007f18:	4610      	mov	r0, r2
 8007f1a:	f7ff faa0 	bl	800745e <vListInsert>
}
 8007f1e:	e010      	b.n	8007f42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f20:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f7ff fa96 	bl	800745e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f32:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d202      	bcs.n	8007f42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007f3c:	4a09      	ldr	r2, [pc, #36]	; (8007f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	6013      	str	r3, [r2, #0]
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000678 	.word	0x20000678
 8007f50:	20000574 	.word	0x20000574
 8007f54:	2000067c 	.word	0x2000067c
 8007f58:	20000660 	.word	0x20000660
 8007f5c:	20000630 	.word	0x20000630
 8007f60:	2000062c 	.word	0x2000062c
 8007f64:	20000694 	.word	0x20000694

08007f68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3b04      	subs	r3, #4
 8007f78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3b04      	subs	r3, #4
 8007f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f023 0201 	bic.w	r2, r3, #1
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3b04      	subs	r3, #4
 8007f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f98:	4a0c      	ldr	r2, [pc, #48]	; (8007fcc <pxPortInitialiseStack+0x64>)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3b14      	subs	r3, #20
 8007fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3b04      	subs	r3, #4
 8007fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f06f 0202 	mvn.w	r2, #2
 8007fb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3b20      	subs	r3, #32
 8007fbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	08007fd1 	.word	0x08007fd1

08007fd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fda:	4b12      	ldr	r3, [pc, #72]	; (8008024 <prvTaskExitError+0x54>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fe2:	d00a      	beq.n	8007ffa <prvTaskExitError+0x2a>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	60fb      	str	r3, [r7, #12]
}
 8007ff6:	bf00      	nop
 8007ff8:	e7fe      	b.n	8007ff8 <prvTaskExitError+0x28>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	60bb      	str	r3, [r7, #8]
}
 800800c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800800e:	bf00      	nop
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0fc      	beq.n	8008010 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	2000000c 	.word	0x2000000c
	...

08008030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008030:	4b07      	ldr	r3, [pc, #28]	; (8008050 <pxCurrentTCBConst2>)
 8008032:	6819      	ldr	r1, [r3, #0]
 8008034:	6808      	ldr	r0, [r1, #0]
 8008036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803a:	f380 8809 	msr	PSP, r0
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f04f 0000 	mov.w	r0, #0
 8008046:	f380 8811 	msr	BASEPRI, r0
 800804a:	4770      	bx	lr
 800804c:	f3af 8000 	nop.w

08008050 <pxCurrentTCBConst2>:
 8008050:	20000574 	.word	0x20000574
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop

08008058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008058:	4808      	ldr	r0, [pc, #32]	; (800807c <prvPortStartFirstTask+0x24>)
 800805a:	6800      	ldr	r0, [r0, #0]
 800805c:	6800      	ldr	r0, [r0, #0]
 800805e:	f380 8808 	msr	MSP, r0
 8008062:	f04f 0000 	mov.w	r0, #0
 8008066:	f380 8814 	msr	CONTROL, r0
 800806a:	b662      	cpsie	i
 800806c:	b661      	cpsie	f
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	df00      	svc	0
 8008078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800807a:	bf00      	nop
 800807c:	e000ed08 	.word	0xe000ed08

08008080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008086:	4b46      	ldr	r3, [pc, #280]	; (80081a0 <xPortStartScheduler+0x120>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a46      	ldr	r2, [pc, #280]	; (80081a4 <xPortStartScheduler+0x124>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d10a      	bne.n	80080a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	613b      	str	r3, [r7, #16]
}
 80080a2:	bf00      	nop
 80080a4:	e7fe      	b.n	80080a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080a6:	4b3e      	ldr	r3, [pc, #248]	; (80081a0 <xPortStartScheduler+0x120>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a3f      	ldr	r2, [pc, #252]	; (80081a8 <xPortStartScheduler+0x128>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d10a      	bne.n	80080c6 <xPortStartScheduler+0x46>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	60fb      	str	r3, [r7, #12]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080c6:	4b39      	ldr	r3, [pc, #228]	; (80081ac <xPortStartScheduler+0x12c>)
 80080c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	22ff      	movs	r2, #255	; 0xff
 80080d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	4b31      	ldr	r3, [pc, #196]	; (80081b0 <xPortStartScheduler+0x130>)
 80080ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080ee:	4b31      	ldr	r3, [pc, #196]	; (80081b4 <xPortStartScheduler+0x134>)
 80080f0:	2207      	movs	r2, #7
 80080f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080f4:	e009      	b.n	800810a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80080f6:	4b2f      	ldr	r3, [pc, #188]	; (80081b4 <xPortStartScheduler+0x134>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	4a2d      	ldr	r2, [pc, #180]	; (80081b4 <xPortStartScheduler+0x134>)
 80080fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	b2db      	uxtb	r3, r3
 8008108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800810a:	78fb      	ldrb	r3, [r7, #3]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008112:	2b80      	cmp	r3, #128	; 0x80
 8008114:	d0ef      	beq.n	80080f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008116:	4b27      	ldr	r3, [pc, #156]	; (80081b4 <xPortStartScheduler+0x134>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f1c3 0307 	rsb	r3, r3, #7
 800811e:	2b04      	cmp	r3, #4
 8008120:	d00a      	beq.n	8008138 <xPortStartScheduler+0xb8>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	60bb      	str	r3, [r7, #8]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008138:	4b1e      	ldr	r3, [pc, #120]	; (80081b4 <xPortStartScheduler+0x134>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <xPortStartScheduler+0x134>)
 8008140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008142:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <xPortStartScheduler+0x134>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800814a:	4a1a      	ldr	r2, [pc, #104]	; (80081b4 <xPortStartScheduler+0x134>)
 800814c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	b2da      	uxtb	r2, r3
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008156:	4b18      	ldr	r3, [pc, #96]	; (80081b8 <xPortStartScheduler+0x138>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a17      	ldr	r2, [pc, #92]	; (80081b8 <xPortStartScheduler+0x138>)
 800815c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008162:	4b15      	ldr	r3, [pc, #84]	; (80081b8 <xPortStartScheduler+0x138>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a14      	ldr	r2, [pc, #80]	; (80081b8 <xPortStartScheduler+0x138>)
 8008168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800816c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800816e:	f000 f8dd 	bl	800832c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008172:	4b12      	ldr	r3, [pc, #72]	; (80081bc <xPortStartScheduler+0x13c>)
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008178:	f000 f8fc 	bl	8008374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800817c:	4b10      	ldr	r3, [pc, #64]	; (80081c0 <xPortStartScheduler+0x140>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a0f      	ldr	r2, [pc, #60]	; (80081c0 <xPortStartScheduler+0x140>)
 8008182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008188:	f7ff ff66 	bl	8008058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800818c:	f7ff fd54 	bl	8007c38 <vTaskSwitchContext>
	prvTaskExitError();
 8008190:	f7ff ff1e 	bl	8007fd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	e000ed00 	.word	0xe000ed00
 80081a4:	410fc271 	.word	0x410fc271
 80081a8:	410fc270 	.word	0x410fc270
 80081ac:	e000e400 	.word	0xe000e400
 80081b0:	200006a0 	.word	0x200006a0
 80081b4:	200006a4 	.word	0x200006a4
 80081b8:	e000ed20 	.word	0xe000ed20
 80081bc:	2000000c 	.word	0x2000000c
 80081c0:	e000ef34 	.word	0xe000ef34

080081c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	607b      	str	r3, [r7, #4]
}
 80081dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <vPortEnterCritical+0x58>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3301      	adds	r3, #1
 80081e4:	4a0d      	ldr	r2, [pc, #52]	; (800821c <vPortEnterCritical+0x58>)
 80081e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081e8:	4b0c      	ldr	r3, [pc, #48]	; (800821c <vPortEnterCritical+0x58>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d10f      	bne.n	8008210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081f0:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <vPortEnterCritical+0x5c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <vPortEnterCritical+0x4c>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	603b      	str	r3, [r7, #0]
}
 800820c:	bf00      	nop
 800820e:	e7fe      	b.n	800820e <vPortEnterCritical+0x4a>
	}
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	2000000c 	.word	0x2000000c
 8008220:	e000ed04 	.word	0xe000ed04

08008224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800822a:	4b12      	ldr	r3, [pc, #72]	; (8008274 <vPortExitCritical+0x50>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <vPortExitCritical+0x24>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	607b      	str	r3, [r7, #4]
}
 8008244:	bf00      	nop
 8008246:	e7fe      	b.n	8008246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008248:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <vPortExitCritical+0x50>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3b01      	subs	r3, #1
 800824e:	4a09      	ldr	r2, [pc, #36]	; (8008274 <vPortExitCritical+0x50>)
 8008250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008252:	4b08      	ldr	r3, [pc, #32]	; (8008274 <vPortExitCritical+0x50>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d105      	bne.n	8008266 <vPortExitCritical+0x42>
 800825a:	2300      	movs	r3, #0
 800825c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	2000000c 	.word	0x2000000c
	...

08008280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008280:	f3ef 8009 	mrs	r0, PSP
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <pxCurrentTCBConst>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	f01e 0f10 	tst.w	lr, #16
 8008290:	bf08      	it	eq
 8008292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829a:	6010      	str	r0, [r2, #0]
 800829c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082a4:	f380 8811 	msr	BASEPRI, r0
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f7ff fcc2 	bl	8007c38 <vTaskSwitchContext>
 80082b4:	f04f 0000 	mov.w	r0, #0
 80082b8:	f380 8811 	msr	BASEPRI, r0
 80082bc:	bc09      	pop	{r0, r3}
 80082be:	6819      	ldr	r1, [r3, #0]
 80082c0:	6808      	ldr	r0, [r1, #0]
 80082c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c6:	f01e 0f10 	tst.w	lr, #16
 80082ca:	bf08      	it	eq
 80082cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082d0:	f380 8809 	msr	PSP, r0
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	f3af 8000 	nop.w

080082e0 <pxCurrentTCBConst>:
 80082e0:	20000574 	.word	0x20000574
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop

080082e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	607b      	str	r3, [r7, #4]
}
 8008300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008302:	f7ff fbe1 	bl	8007ac8 <xTaskIncrementTick>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800830c:	4b06      	ldr	r3, [pc, #24]	; (8008328 <SysTick_Handler+0x40>)
 800830e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	2300      	movs	r3, #0
 8008316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f383 8811 	msr	BASEPRI, r3
}
 800831e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	e000ed04 	.word	0xe000ed04

0800832c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008330:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <vPortSetupTimerInterrupt+0x34>)
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008336:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <vPortSetupTimerInterrupt+0x38>)
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <vPortSetupTimerInterrupt+0x3c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a0a      	ldr	r2, [pc, #40]	; (800836c <vPortSetupTimerInterrupt+0x40>)
 8008342:	fba2 2303 	umull	r2, r3, r2, r3
 8008346:	099b      	lsrs	r3, r3, #6
 8008348:	4a09      	ldr	r2, [pc, #36]	; (8008370 <vPortSetupTimerInterrupt+0x44>)
 800834a:	3b01      	subs	r3, #1
 800834c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800834e:	4b04      	ldr	r3, [pc, #16]	; (8008360 <vPortSetupTimerInterrupt+0x34>)
 8008350:	2207      	movs	r2, #7
 8008352:	601a      	str	r2, [r3, #0]
}
 8008354:	bf00      	nop
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	e000e010 	.word	0xe000e010
 8008364:	e000e018 	.word	0xe000e018
 8008368:	20000000 	.word	0x20000000
 800836c:	10624dd3 	.word	0x10624dd3
 8008370:	e000e014 	.word	0xe000e014

08008374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008384 <vPortEnableVFP+0x10>
 8008378:	6801      	ldr	r1, [r0, #0]
 800837a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800837e:	6001      	str	r1, [r0, #0]
 8008380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008382:	bf00      	nop
 8008384:	e000ed88 	.word	0xe000ed88

08008388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	; 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008390:	2300      	movs	r3, #0
 8008392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008394:	f7ff faee 	bl	8007974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008398:	4b5b      	ldr	r3, [pc, #364]	; (8008508 <pvPortMalloc+0x180>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083a0:	f000 f920 	bl	80085e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083a4:	4b59      	ldr	r3, [pc, #356]	; (800850c <pvPortMalloc+0x184>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f040 8093 	bne.w	80084d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01d      	beq.n	80083f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80083b8:	2208      	movs	r2, #8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d014      	beq.n	80083f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f023 0307 	bic.w	r3, r3, #7
 80083d0:	3308      	adds	r3, #8
 80083d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <pvPortMalloc+0x6c>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	617b      	str	r3, [r7, #20]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d06e      	beq.n	80084d8 <pvPortMalloc+0x150>
 80083fa:	4b45      	ldr	r3, [pc, #276]	; (8008510 <pvPortMalloc+0x188>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	429a      	cmp	r2, r3
 8008402:	d869      	bhi.n	80084d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008404:	4b43      	ldr	r3, [pc, #268]	; (8008514 <pvPortMalloc+0x18c>)
 8008406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008408:	4b42      	ldr	r3, [pc, #264]	; (8008514 <pvPortMalloc+0x18c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800840e:	e004      	b.n	800841a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	429a      	cmp	r2, r3
 8008422:	d903      	bls.n	800842c <pvPortMalloc+0xa4>
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1f1      	bne.n	8008410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800842c:	4b36      	ldr	r3, [pc, #216]	; (8008508 <pvPortMalloc+0x180>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008432:	429a      	cmp	r2, r3
 8008434:	d050      	beq.n	80084d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2208      	movs	r2, #8
 800843c:	4413      	add	r3, r2
 800843e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	1ad2      	subs	r2, r2, r3
 8008450:	2308      	movs	r3, #8
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	429a      	cmp	r2, r3
 8008456:	d91f      	bls.n	8008498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4413      	add	r3, r2
 800845e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <pvPortMalloc+0xf8>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	613b      	str	r3, [r7, #16]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	1ad2      	subs	r2, r2, r3
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008492:	69b8      	ldr	r0, [r7, #24]
 8008494:	f000 f908 	bl	80086a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008498:	4b1d      	ldr	r3, [pc, #116]	; (8008510 <pvPortMalloc+0x188>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	4a1b      	ldr	r2, [pc, #108]	; (8008510 <pvPortMalloc+0x188>)
 80084a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084a6:	4b1a      	ldr	r3, [pc, #104]	; (8008510 <pvPortMalloc+0x188>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	4b1b      	ldr	r3, [pc, #108]	; (8008518 <pvPortMalloc+0x190>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d203      	bcs.n	80084ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084b2:	4b17      	ldr	r3, [pc, #92]	; (8008510 <pvPortMalloc+0x188>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a18      	ldr	r2, [pc, #96]	; (8008518 <pvPortMalloc+0x190>)
 80084b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	4b13      	ldr	r3, [pc, #76]	; (800850c <pvPortMalloc+0x184>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	2200      	movs	r2, #0
 80084cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084ce:	4b13      	ldr	r3, [pc, #76]	; (800851c <pvPortMalloc+0x194>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3301      	adds	r3, #1
 80084d4:	4a11      	ldr	r2, [pc, #68]	; (800851c <pvPortMalloc+0x194>)
 80084d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084d8:	f7ff fa5a 	bl	8007990 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <pvPortMalloc+0x174>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60fb      	str	r3, [r7, #12]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <pvPortMalloc+0x172>
	return pvReturn;
 80084fc:	69fb      	ldr	r3, [r7, #28]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3728      	adds	r7, #40	; 0x28
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20001268 	.word	0x20001268
 800850c:	2000127c 	.word	0x2000127c
 8008510:	2000126c 	.word	0x2000126c
 8008514:	20001260 	.word	0x20001260
 8008518:	20001270 	.word	0x20001270
 800851c:	20001274 	.word	0x20001274

08008520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d04d      	beq.n	80085ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008532:	2308      	movs	r3, #8
 8008534:	425b      	negs	r3, r3
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	4413      	add	r3, r2
 800853a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	4b24      	ldr	r3, [pc, #144]	; (80085d8 <vPortFree+0xb8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4013      	ands	r3, r2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <vPortFree+0x44>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	60fb      	str	r3, [r7, #12]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <vPortFree+0x62>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	60bb      	str	r3, [r7, #8]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <vPortFree+0xb8>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01e      	beq.n	80085ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d11a      	bne.n	80085ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <vPortFree+0xb8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	43db      	mvns	r3, r3
 80085a2:	401a      	ands	r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085a8:	f7ff f9e4 	bl	8007974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <vPortFree+0xbc>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4413      	add	r3, r2
 80085b6:	4a09      	ldr	r2, [pc, #36]	; (80085dc <vPortFree+0xbc>)
 80085b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085ba:	6938      	ldr	r0, [r7, #16]
 80085bc:	f000 f874 	bl	80086a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <vPortFree+0xc0>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	4a06      	ldr	r2, [pc, #24]	; (80085e0 <vPortFree+0xc0>)
 80085c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085ca:	f7ff f9e1 	bl	8007990 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085ce:	bf00      	nop
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	2000127c 	.word	0x2000127c
 80085dc:	2000126c 	.word	0x2000126c
 80085e0:	20001278 	.word	0x20001278

080085e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80085ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085f0:	4b27      	ldr	r3, [pc, #156]	; (8008690 <prvHeapInit+0xac>)
 80085f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00c      	beq.n	8008618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3307      	adds	r3, #7
 8008602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0307 	bic.w	r3, r3, #7
 800860a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	4a1f      	ldr	r2, [pc, #124]	; (8008690 <prvHeapInit+0xac>)
 8008614:	4413      	add	r3, r2
 8008616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800861c:	4a1d      	ldr	r2, [pc, #116]	; (8008694 <prvHeapInit+0xb0>)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008622:	4b1c      	ldr	r3, [pc, #112]	; (8008694 <prvHeapInit+0xb0>)
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	4413      	add	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008630:	2208      	movs	r2, #8
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	1a9b      	subs	r3, r3, r2
 8008636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0307 	bic.w	r3, r3, #7
 800863e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4a15      	ldr	r2, [pc, #84]	; (8008698 <prvHeapInit+0xb4>)
 8008644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008646:	4b14      	ldr	r3, [pc, #80]	; (8008698 <prvHeapInit+0xb4>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2200      	movs	r2, #0
 800864c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800864e:	4b12      	ldr	r3, [pc, #72]	; (8008698 <prvHeapInit+0xb4>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008664:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <prvHeapInit+0xb4>)
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	4a0a      	ldr	r2, [pc, #40]	; (800869c <prvHeapInit+0xb8>)
 8008672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	4a09      	ldr	r2, [pc, #36]	; (80086a0 <prvHeapInit+0xbc>)
 800867a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800867c:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <prvHeapInit+0xc0>)
 800867e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008682:	601a      	str	r2, [r3, #0]
}
 8008684:	bf00      	nop
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	200006a8 	.word	0x200006a8
 8008694:	20001260 	.word	0x20001260
 8008698:	20001268 	.word	0x20001268
 800869c:	20001270 	.word	0x20001270
 80086a0:	2000126c 	.word	0x2000126c
 80086a4:	2000127c 	.word	0x2000127c

080086a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086b0:	4b28      	ldr	r3, [pc, #160]	; (8008754 <prvInsertBlockIntoFreeList+0xac>)
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e002      	b.n	80086bc <prvInsertBlockIntoFreeList+0x14>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d8f7      	bhi.n	80086b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4413      	add	r3, r2
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d108      	bne.n	80086ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	441a      	add	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	441a      	add	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d118      	bne.n	8008730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b15      	ldr	r3, [pc, #84]	; (8008758 <prvInsertBlockIntoFreeList+0xb0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	429a      	cmp	r2, r3
 8008708:	d00d      	beq.n	8008726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	441a      	add	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	e008      	b.n	8008738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008726:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <prvInsertBlockIntoFreeList+0xb0>)
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	e003      	b.n	8008738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	429a      	cmp	r2, r3
 800873e:	d002      	beq.n	8008746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20001260 	.word	0x20001260
 8008758:	20001268 	.word	0x20001268

0800875c <gcvt>:
 800875c:	b530      	push	{r4, r5, lr}
 800875e:	2200      	movs	r2, #0
 8008760:	b085      	sub	sp, #20
 8008762:	460c      	mov	r4, r1
 8008764:	4605      	mov	r5, r0
 8008766:	2300      	movs	r3, #0
 8008768:	ec51 0b10 	vmov	r0, r1, d0
 800876c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008770:	f7f8 f9b4 	bl	8000adc <__aeabi_dcmplt>
 8008774:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008778:	4622      	mov	r2, r4
 800877a:	b118      	cbz	r0, 8008784 <gcvt+0x28>
 800877c:	232d      	movs	r3, #45	; 0x2d
 800877e:	f802 3b01 	strb.w	r3, [r2], #1
 8008782:	3d01      	subs	r5, #1
 8008784:	2300      	movs	r3, #0
 8008786:	4806      	ldr	r0, [pc, #24]	; (80087a0 <gcvt+0x44>)
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	4629      	mov	r1, r5
 800878c:	2367      	movs	r3, #103	; 0x67
 800878e:	6800      	ldr	r0, [r0, #0]
 8008790:	f000 f8e2 	bl	8008958 <_gcvt>
 8008794:	2800      	cmp	r0, #0
 8008796:	bf14      	ite	ne
 8008798:	4620      	movne	r0, r4
 800879a:	2000      	moveq	r0, #0
 800879c:	b005      	add	sp, #20
 800879e:	bd30      	pop	{r4, r5, pc}
 80087a0:	20000010 	.word	0x20000010

080087a4 <__errno>:
 80087a4:	4b01      	ldr	r3, [pc, #4]	; (80087ac <__errno+0x8>)
 80087a6:	6818      	ldr	r0, [r3, #0]
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20000010 	.word	0x20000010

080087b0 <__libc_init_array>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	4d0d      	ldr	r5, [pc, #52]	; (80087e8 <__libc_init_array+0x38>)
 80087b4:	4c0d      	ldr	r4, [pc, #52]	; (80087ec <__libc_init_array+0x3c>)
 80087b6:	1b64      	subs	r4, r4, r5
 80087b8:	10a4      	asrs	r4, r4, #2
 80087ba:	2600      	movs	r6, #0
 80087bc:	42a6      	cmp	r6, r4
 80087be:	d109      	bne.n	80087d4 <__libc_init_array+0x24>
 80087c0:	4d0b      	ldr	r5, [pc, #44]	; (80087f0 <__libc_init_array+0x40>)
 80087c2:	4c0c      	ldr	r4, [pc, #48]	; (80087f4 <__libc_init_array+0x44>)
 80087c4:	f002 fd68 	bl	800b298 <_init>
 80087c8:	1b64      	subs	r4, r4, r5
 80087ca:	10a4      	asrs	r4, r4, #2
 80087cc:	2600      	movs	r6, #0
 80087ce:	42a6      	cmp	r6, r4
 80087d0:	d105      	bne.n	80087de <__libc_init_array+0x2e>
 80087d2:	bd70      	pop	{r4, r5, r6, pc}
 80087d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d8:	4798      	blx	r3
 80087da:	3601      	adds	r6, #1
 80087dc:	e7ee      	b.n	80087bc <__libc_init_array+0xc>
 80087de:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e2:	4798      	blx	r3
 80087e4:	3601      	adds	r6, #1
 80087e6:	e7f2      	b.n	80087ce <__libc_init_array+0x1e>
 80087e8:	0800b740 	.word	0x0800b740
 80087ec:	0800b740 	.word	0x0800b740
 80087f0:	0800b740 	.word	0x0800b740
 80087f4:	0800b744 	.word	0x0800b744

080087f8 <memcpy>:
 80087f8:	440a      	add	r2, r1
 80087fa:	4291      	cmp	r1, r2
 80087fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008800:	d100      	bne.n	8008804 <memcpy+0xc>
 8008802:	4770      	bx	lr
 8008804:	b510      	push	{r4, lr}
 8008806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800880a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800880e:	4291      	cmp	r1, r2
 8008810:	d1f9      	bne.n	8008806 <memcpy+0xe>
 8008812:	bd10      	pop	{r4, pc}

08008814 <memset>:
 8008814:	4402      	add	r2, r0
 8008816:	4603      	mov	r3, r0
 8008818:	4293      	cmp	r3, r2
 800881a:	d100      	bne.n	800881e <memset+0xa>
 800881c:	4770      	bx	lr
 800881e:	f803 1b01 	strb.w	r1, [r3], #1
 8008822:	e7f9      	b.n	8008818 <memset+0x4>

08008824 <siprintf>:
 8008824:	b40e      	push	{r1, r2, r3}
 8008826:	b500      	push	{lr}
 8008828:	b09c      	sub	sp, #112	; 0x70
 800882a:	ab1d      	add	r3, sp, #116	; 0x74
 800882c:	9002      	str	r0, [sp, #8]
 800882e:	9006      	str	r0, [sp, #24]
 8008830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008834:	4809      	ldr	r0, [pc, #36]	; (800885c <siprintf+0x38>)
 8008836:	9107      	str	r1, [sp, #28]
 8008838:	9104      	str	r1, [sp, #16]
 800883a:	4909      	ldr	r1, [pc, #36]	; (8008860 <siprintf+0x3c>)
 800883c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008840:	9105      	str	r1, [sp, #20]
 8008842:	6800      	ldr	r0, [r0, #0]
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	a902      	add	r1, sp, #8
 8008848:	f000 fe1c 	bl	8009484 <_svfiprintf_r>
 800884c:	9b02      	ldr	r3, [sp, #8]
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
 8008852:	b01c      	add	sp, #112	; 0x70
 8008854:	f85d eb04 	ldr.w	lr, [sp], #4
 8008858:	b003      	add	sp, #12
 800885a:	4770      	bx	lr
 800885c:	20000010 	.word	0x20000010
 8008860:	ffff0208 	.word	0xffff0208

08008864 <print_e>:
 8008864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008866:	b087      	sub	sp, #28
 8008868:	ec43 2b10 	vmov	d0, r2, r3
 800886c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800886e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8008872:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008874:	ab04      	add	r3, sp, #16
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	ab03      	add	r3, sp, #12
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	1c62      	adds	r2, r4, #1
 800887e:	ab05      	add	r3, sp, #20
 8008880:	460f      	mov	r7, r1
 8008882:	2102      	movs	r1, #2
 8008884:	f001 f954 	bl	8009b30 <_dtoa_r>
 8008888:	9a05      	ldr	r2, [sp, #20]
 800888a:	f242 730f 	movw	r3, #9999	; 0x270f
 800888e:	429a      	cmp	r2, r3
 8008890:	d105      	bne.n	800889e <print_e+0x3a>
 8008892:	4601      	mov	r1, r0
 8008894:	4638      	mov	r0, r7
 8008896:	f001 f899 	bl	80099cc <strcpy>
 800889a:	b007      	add	sp, #28
 800889c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889e:	463b      	mov	r3, r7
 80088a0:	7801      	ldrb	r1, [r0, #0]
 80088a2:	f803 1b01 	strb.w	r1, [r3], #1
 80088a6:	2c00      	cmp	r4, #0
 80088a8:	bfc8      	it	gt
 80088aa:	2501      	movgt	r5, #1
 80088ac:	212e      	movs	r1, #46	; 0x2e
 80088ae:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 80088b2:	b10f      	cbz	r7, 80088b8 <print_e+0x54>
 80088b4:	2c00      	cmp	r4, #0
 80088b6:	dc37      	bgt.n	8008928 <print_e+0xc4>
 80088b8:	2e67      	cmp	r6, #103	; 0x67
 80088ba:	d046      	beq.n	800894a <print_e+0xe6>
 80088bc:	2e47      	cmp	r6, #71	; 0x47
 80088be:	d046      	beq.n	800894e <print_e+0xea>
 80088c0:	212e      	movs	r1, #46	; 0x2e
 80088c2:	2030      	movs	r0, #48	; 0x30
 80088c4:	2c00      	cmp	r4, #0
 80088c6:	dc38      	bgt.n	800893a <print_e+0xd6>
 80088c8:	1e51      	subs	r1, r2, #1
 80088ca:	2900      	cmp	r1, #0
 80088cc:	bfb8      	it	lt
 80088ce:	f1c2 0201 	rsblt	r2, r2, #1
 80088d2:	4618      	mov	r0, r3
 80088d4:	9105      	str	r1, [sp, #20]
 80088d6:	bfac      	ite	ge
 80088d8:	222b      	movge	r2, #43	; 0x2b
 80088da:	9205      	strlt	r2, [sp, #20]
 80088dc:	f800 6b02 	strb.w	r6, [r0], #2
 80088e0:	bfa8      	it	ge
 80088e2:	705a      	strbge	r2, [r3, #1]
 80088e4:	9a05      	ldr	r2, [sp, #20]
 80088e6:	bfbc      	itt	lt
 80088e8:	212d      	movlt	r1, #45	; 0x2d
 80088ea:	7059      	strblt	r1, [r3, #1]
 80088ec:	2a63      	cmp	r2, #99	; 0x63
 80088ee:	dd0b      	ble.n	8008908 <print_e+0xa4>
 80088f0:	2164      	movs	r1, #100	; 0x64
 80088f2:	fb92 f1f1 	sdiv	r1, r2, r1
 80088f6:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80088fa:	1cd8      	adds	r0, r3, #3
 80088fc:	709c      	strb	r4, [r3, #2]
 80088fe:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008902:	fb03 2201 	mla	r2, r3, r1, r2
 8008906:	9205      	str	r2, [sp, #20]
 8008908:	9b05      	ldr	r3, [sp, #20]
 800890a:	220a      	movs	r2, #10
 800890c:	fb93 f2f2 	sdiv	r2, r3, r2
 8008910:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8008914:	7001      	strb	r1, [r0, #0]
 8008916:	f06f 0109 	mvn.w	r1, #9
 800891a:	fb01 3302 	mla	r3, r1, r2, r3
 800891e:	3330      	adds	r3, #48	; 0x30
 8008920:	7043      	strb	r3, [r0, #1]
 8008922:	2300      	movs	r3, #0
 8008924:	7083      	strb	r3, [r0, #2]
 8008926:	e7b8      	b.n	800889a <print_e+0x36>
 8008928:	b10d      	cbz	r5, 800892e <print_e+0xca>
 800892a:	f803 1b01 	strb.w	r1, [r3], #1
 800892e:	7805      	ldrb	r5, [r0, #0]
 8008930:	f803 5b01 	strb.w	r5, [r3], #1
 8008934:	3c01      	subs	r4, #1
 8008936:	2500      	movs	r5, #0
 8008938:	e7b9      	b.n	80088ae <print_e+0x4a>
 800893a:	b10d      	cbz	r5, 8008940 <print_e+0xdc>
 800893c:	f803 1b01 	strb.w	r1, [r3], #1
 8008940:	f803 0b01 	strb.w	r0, [r3], #1
 8008944:	3c01      	subs	r4, #1
 8008946:	2500      	movs	r5, #0
 8008948:	e7bc      	b.n	80088c4 <print_e+0x60>
 800894a:	2665      	movs	r6, #101	; 0x65
 800894c:	e7bc      	b.n	80088c8 <print_e+0x64>
 800894e:	2645      	movs	r6, #69	; 0x45
 8008950:	e7ba      	b.n	80088c8 <print_e+0x64>
 8008952:	0000      	movs	r0, r0
 8008954:	0000      	movs	r0, r0
	...

08008958 <_gcvt>:
 8008958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	ec55 4b10 	vmov	r4, r5, d0
 8008960:	b088      	sub	sp, #32
 8008962:	4681      	mov	r9, r0
 8008964:	4688      	mov	r8, r1
 8008966:	4616      	mov	r6, r2
 8008968:	469a      	mov	sl, r3
 800896a:	ee10 0a10 	vmov	r0, s0
 800896e:	2200      	movs	r2, #0
 8008970:	2300      	movs	r3, #0
 8008972:	4629      	mov	r1, r5
 8008974:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008976:	f7f8 f8b1 	bl	8000adc <__aeabi_dcmplt>
 800897a:	b110      	cbz	r0, 8008982 <_gcvt+0x2a>
 800897c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008980:	461d      	mov	r5, r3
 8008982:	2200      	movs	r2, #0
 8008984:	2300      	movs	r3, #0
 8008986:	4620      	mov	r0, r4
 8008988:	4629      	mov	r1, r5
 800898a:	f7f8 f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800898e:	b138      	cbz	r0, 80089a0 <_gcvt+0x48>
 8008990:	2330      	movs	r3, #48	; 0x30
 8008992:	7033      	strb	r3, [r6, #0]
 8008994:	2300      	movs	r3, #0
 8008996:	7073      	strb	r3, [r6, #1]
 8008998:	4630      	mov	r0, r6
 800899a:	b008      	add	sp, #32
 800899c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a0:	a34b      	add	r3, pc, #300	; (adr r3, 8008ad0 <_gcvt+0x178>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	4620      	mov	r0, r4
 80089a8:	4629      	mov	r1, r5
 80089aa:	f7f8 f8a1 	bl	8000af0 <__aeabi_dcmple>
 80089ae:	b158      	cbz	r0, 80089c8 <_gcvt+0x70>
 80089b0:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80089b4:	9100      	str	r1, [sp, #0]
 80089b6:	e9cd a701 	strd	sl, r7, [sp, #4]
 80089ba:	4622      	mov	r2, r4
 80089bc:	462b      	mov	r3, r5
 80089be:	4631      	mov	r1, r6
 80089c0:	4648      	mov	r0, r9
 80089c2:	f7ff ff4f 	bl	8008864 <print_e>
 80089c6:	e7e7      	b.n	8008998 <_gcvt+0x40>
 80089c8:	4640      	mov	r0, r8
 80089ca:	f000 fc09 	bl	80091e0 <_mprec_log10>
 80089ce:	4622      	mov	r2, r4
 80089d0:	ec51 0b10 	vmov	r0, r1, d0
 80089d4:	462b      	mov	r3, r5
 80089d6:	f7f8 f88b 	bl	8000af0 <__aeabi_dcmple>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d1e8      	bne.n	80089b0 <_gcvt+0x58>
 80089de:	ab07      	add	r3, sp, #28
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	ab06      	add	r3, sp, #24
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	4642      	mov	r2, r8
 80089e8:	ab05      	add	r3, sp, #20
 80089ea:	ec45 4b10 	vmov	d0, r4, r5
 80089ee:	2102      	movs	r1, #2
 80089f0:	4648      	mov	r0, r9
 80089f2:	f001 f89d 	bl	8009b30 <_dtoa_r>
 80089f6:	9a05      	ldr	r2, [sp, #20]
 80089f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d00e      	beq.n	8008a1e <_gcvt+0xc6>
 8008a00:	4633      	mov	r3, r6
 8008a02:	44b0      	add	r8, r6
 8008a04:	4605      	mov	r5, r0
 8008a06:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008a0a:	9c05      	ldr	r4, [sp, #20]
 8008a0c:	eba8 0203 	sub.w	r2, r8, r3
 8008a10:	b109      	cbz	r1, 8008a16 <_gcvt+0xbe>
 8008a12:	2c00      	cmp	r4, #0
 8008a14:	dc08      	bgt.n	8008a28 <_gcvt+0xd0>
 8008a16:	2100      	movs	r1, #0
 8008a18:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008a1c:	e00d      	b.n	8008a3a <_gcvt+0xe2>
 8008a1e:	4601      	mov	r1, r0
 8008a20:	4630      	mov	r0, r6
 8008a22:	f000 ffd3 	bl	80099cc <strcpy>
 8008a26:	e7b7      	b.n	8008998 <_gcvt+0x40>
 8008a28:	3c01      	subs	r4, #1
 8008a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a2e:	9405      	str	r4, [sp, #20]
 8008a30:	e7e8      	b.n	8008a04 <_gcvt+0xac>
 8008a32:	f803 cb01 	strb.w	ip, [r3], #1
 8008a36:	3a01      	subs	r2, #1
 8008a38:	2101      	movs	r1, #1
 8008a3a:	2c00      	cmp	r4, #0
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	dc2a      	bgt.n	8008a96 <_gcvt+0x13e>
 8008a40:	b101      	cbz	r1, 8008a44 <_gcvt+0xec>
 8008a42:	9405      	str	r4, [sp, #20]
 8008a44:	b90f      	cbnz	r7, 8008a4a <_gcvt+0xf2>
 8008a46:	7829      	ldrb	r1, [r5, #0]
 8008a48:	b311      	cbz	r1, 8008a90 <_gcvt+0x138>
 8008a4a:	42b3      	cmp	r3, r6
 8008a4c:	bf04      	itt	eq
 8008a4e:	2130      	moveq	r1, #48	; 0x30
 8008a50:	f803 1b01 	strbeq.w	r1, [r3], #1
 8008a54:	212e      	movs	r1, #46	; 0x2e
 8008a56:	7019      	strb	r1, [r3, #0]
 8008a58:	9905      	ldr	r1, [sp, #20]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	2400      	movs	r4, #0
 8008a5e:	eba1 0c03 	sub.w	ip, r1, r3
 8008a62:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008a66:	eb1c 0f00 	cmn.w	ip, r0
 8008a6a:	d41c      	bmi.n	8008aa6 <_gcvt+0x14e>
 8008a6c:	2900      	cmp	r1, #0
 8008a6e:	f1c1 0000 	rsb	r0, r1, #0
 8008a72:	bfc8      	it	gt
 8008a74:	2000      	movgt	r0, #0
 8008a76:	f100 0c01 	add.w	ip, r0, #1
 8008a7a:	4463      	add	r3, ip
 8008a7c:	4401      	add	r1, r0
 8008a7e:	b104      	cbz	r4, 8008a82 <_gcvt+0x12a>
 8008a80:	9105      	str	r1, [sp, #20]
 8008a82:	1e69      	subs	r1, r5, #1
 8008a84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a88:	b108      	cbz	r0, 8008a8e <_gcvt+0x136>
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	dc0f      	bgt.n	8008aae <_gcvt+0x156>
 8008a8e:	b9df      	cbnz	r7, 8008ac8 <_gcvt+0x170>
 8008a90:	2200      	movs	r2, #0
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	e780      	b.n	8008998 <_gcvt+0x40>
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008a9c:	dcc9      	bgt.n	8008a32 <_gcvt+0xda>
 8008a9e:	2900      	cmp	r1, #0
 8008aa0:	d0d0      	beq.n	8008a44 <_gcvt+0xec>
 8008aa2:	9005      	str	r0, [sp, #20]
 8008aa4:	e7ce      	b.n	8008a44 <_gcvt+0xec>
 8008aa6:	f800 ef01 	strb.w	lr, [r0, #1]!
 8008aaa:	2401      	movs	r4, #1
 8008aac:	e7db      	b.n	8008a66 <_gcvt+0x10e>
 8008aae:	f803 0b01 	strb.w	r0, [r3], #1
 8008ab2:	3a01      	subs	r2, #1
 8008ab4:	e7e6      	b.n	8008a84 <_gcvt+0x12c>
 8008ab6:	f801 5b01 	strb.w	r5, [r1], #1
 8008aba:	1a60      	subs	r0, r4, r1
 8008abc:	2800      	cmp	r0, #0
 8008abe:	dcfa      	bgt.n	8008ab6 <_gcvt+0x15e>
 8008ac0:	2a00      	cmp	r2, #0
 8008ac2:	bfa8      	it	ge
 8008ac4:	189b      	addge	r3, r3, r2
 8008ac6:	e7e3      	b.n	8008a90 <_gcvt+0x138>
 8008ac8:	4619      	mov	r1, r3
 8008aca:	189c      	adds	r4, r3, r2
 8008acc:	2530      	movs	r5, #48	; 0x30
 8008ace:	e7f4      	b.n	8008aba <_gcvt+0x162>
 8008ad0:	eb1c432d 	.word	0xeb1c432d
 8008ad4:	3f1a36e2 	.word	0x3f1a36e2

08008ad8 <_Balloc>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008adc:	4604      	mov	r4, r0
 8008ade:	460d      	mov	r5, r1
 8008ae0:	b976      	cbnz	r6, 8008b00 <_Balloc+0x28>
 8008ae2:	2010      	movs	r0, #16
 8008ae4:	f001 fe24 	bl	800a730 <malloc>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6260      	str	r0, [r4, #36]	; 0x24
 8008aec:	b920      	cbnz	r0, 8008af8 <_Balloc+0x20>
 8008aee:	4b18      	ldr	r3, [pc, #96]	; (8008b50 <_Balloc+0x78>)
 8008af0:	4818      	ldr	r0, [pc, #96]	; (8008b54 <_Balloc+0x7c>)
 8008af2:	2166      	movs	r1, #102	; 0x66
 8008af4:	f000 ff72 	bl	80099dc <__assert_func>
 8008af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008afc:	6006      	str	r6, [r0, #0]
 8008afe:	60c6      	str	r6, [r0, #12]
 8008b00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b02:	68f3      	ldr	r3, [r6, #12]
 8008b04:	b183      	cbz	r3, 8008b28 <_Balloc+0x50>
 8008b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b0e:	b9b8      	cbnz	r0, 8008b40 <_Balloc+0x68>
 8008b10:	2101      	movs	r1, #1
 8008b12:	fa01 f605 	lsl.w	r6, r1, r5
 8008b16:	1d72      	adds	r2, r6, #5
 8008b18:	0092      	lsls	r2, r2, #2
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fb7e 	bl	800921c <_calloc_r>
 8008b20:	b160      	cbz	r0, 8008b3c <_Balloc+0x64>
 8008b22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b26:	e00e      	b.n	8008b46 <_Balloc+0x6e>
 8008b28:	2221      	movs	r2, #33	; 0x21
 8008b2a:	2104      	movs	r1, #4
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 fb75 	bl	800921c <_calloc_r>
 8008b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b34:	60f0      	str	r0, [r6, #12]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e4      	bne.n	8008b06 <_Balloc+0x2e>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}
 8008b40:	6802      	ldr	r2, [r0, #0]
 8008b42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b46:	2300      	movs	r3, #0
 8008b48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b4c:	e7f7      	b.n	8008b3e <_Balloc+0x66>
 8008b4e:	bf00      	nop
 8008b50:	0800b478 	.word	0x0800b478
 8008b54:	0800b48f 	.word	0x0800b48f

08008b58 <_Bfree>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	b976      	cbnz	r6, 8008b80 <_Bfree+0x28>
 8008b62:	2010      	movs	r0, #16
 8008b64:	f001 fde4 	bl	800a730 <malloc>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6268      	str	r0, [r5, #36]	; 0x24
 8008b6c:	b920      	cbnz	r0, 8008b78 <_Bfree+0x20>
 8008b6e:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <_Bfree+0x3c>)
 8008b70:	4809      	ldr	r0, [pc, #36]	; (8008b98 <_Bfree+0x40>)
 8008b72:	218a      	movs	r1, #138	; 0x8a
 8008b74:	f000 ff32 	bl	80099dc <__assert_func>
 8008b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b7c:	6006      	str	r6, [r0, #0]
 8008b7e:	60c6      	str	r6, [r0, #12]
 8008b80:	b13c      	cbz	r4, 8008b92 <_Bfree+0x3a>
 8008b82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b84:	6862      	ldr	r2, [r4, #4]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b8c:	6021      	str	r1, [r4, #0]
 8008b8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	0800b478 	.word	0x0800b478
 8008b98:	0800b48f 	.word	0x0800b48f

08008b9c <__multadd>:
 8008b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba0:	690d      	ldr	r5, [r1, #16]
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	461e      	mov	r6, r3
 8008ba8:	f101 0c14 	add.w	ip, r1, #20
 8008bac:	2000      	movs	r0, #0
 8008bae:	f8dc 3000 	ldr.w	r3, [ip]
 8008bb2:	b299      	uxth	r1, r3
 8008bb4:	fb02 6101 	mla	r1, r2, r1, r6
 8008bb8:	0c1e      	lsrs	r6, r3, #16
 8008bba:	0c0b      	lsrs	r3, r1, #16
 8008bbc:	fb02 3306 	mla	r3, r2, r6, r3
 8008bc0:	b289      	uxth	r1, r1
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bc8:	4285      	cmp	r5, r0
 8008bca:	f84c 1b04 	str.w	r1, [ip], #4
 8008bce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bd2:	dcec      	bgt.n	8008bae <__multadd+0x12>
 8008bd4:	b30e      	cbz	r6, 8008c1a <__multadd+0x7e>
 8008bd6:	68a3      	ldr	r3, [r4, #8]
 8008bd8:	42ab      	cmp	r3, r5
 8008bda:	dc19      	bgt.n	8008c10 <__multadd+0x74>
 8008bdc:	6861      	ldr	r1, [r4, #4]
 8008bde:	4638      	mov	r0, r7
 8008be0:	3101      	adds	r1, #1
 8008be2:	f7ff ff79 	bl	8008ad8 <_Balloc>
 8008be6:	4680      	mov	r8, r0
 8008be8:	b928      	cbnz	r0, 8008bf6 <__multadd+0x5a>
 8008bea:	4602      	mov	r2, r0
 8008bec:	4b0c      	ldr	r3, [pc, #48]	; (8008c20 <__multadd+0x84>)
 8008bee:	480d      	ldr	r0, [pc, #52]	; (8008c24 <__multadd+0x88>)
 8008bf0:	21b5      	movs	r1, #181	; 0xb5
 8008bf2:	f000 fef3 	bl	80099dc <__assert_func>
 8008bf6:	6922      	ldr	r2, [r4, #16]
 8008bf8:	3202      	adds	r2, #2
 8008bfa:	f104 010c 	add.w	r1, r4, #12
 8008bfe:	0092      	lsls	r2, r2, #2
 8008c00:	300c      	adds	r0, #12
 8008c02:	f7ff fdf9 	bl	80087f8 <memcpy>
 8008c06:	4621      	mov	r1, r4
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f7ff ffa5 	bl	8008b58 <_Bfree>
 8008c0e:	4644      	mov	r4, r8
 8008c10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c14:	3501      	adds	r5, #1
 8008c16:	615e      	str	r6, [r3, #20]
 8008c18:	6125      	str	r5, [r4, #16]
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c20:	0800b4eb 	.word	0x0800b4eb
 8008c24:	0800b48f 	.word	0x0800b48f

08008c28 <__hi0bits>:
 8008c28:	0c03      	lsrs	r3, r0, #16
 8008c2a:	041b      	lsls	r3, r3, #16
 8008c2c:	b9d3      	cbnz	r3, 8008c64 <__hi0bits+0x3c>
 8008c2e:	0400      	lsls	r0, r0, #16
 8008c30:	2310      	movs	r3, #16
 8008c32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c36:	bf04      	itt	eq
 8008c38:	0200      	lsleq	r0, r0, #8
 8008c3a:	3308      	addeq	r3, #8
 8008c3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c40:	bf04      	itt	eq
 8008c42:	0100      	lsleq	r0, r0, #4
 8008c44:	3304      	addeq	r3, #4
 8008c46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c4a:	bf04      	itt	eq
 8008c4c:	0080      	lsleq	r0, r0, #2
 8008c4e:	3302      	addeq	r3, #2
 8008c50:	2800      	cmp	r0, #0
 8008c52:	db05      	blt.n	8008c60 <__hi0bits+0x38>
 8008c54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c58:	f103 0301 	add.w	r3, r3, #1
 8008c5c:	bf08      	it	eq
 8008c5e:	2320      	moveq	r3, #32
 8008c60:	4618      	mov	r0, r3
 8008c62:	4770      	bx	lr
 8008c64:	2300      	movs	r3, #0
 8008c66:	e7e4      	b.n	8008c32 <__hi0bits+0xa>

08008c68 <__lo0bits>:
 8008c68:	6803      	ldr	r3, [r0, #0]
 8008c6a:	f013 0207 	ands.w	r2, r3, #7
 8008c6e:	4601      	mov	r1, r0
 8008c70:	d00b      	beq.n	8008c8a <__lo0bits+0x22>
 8008c72:	07da      	lsls	r2, r3, #31
 8008c74:	d423      	bmi.n	8008cbe <__lo0bits+0x56>
 8008c76:	0798      	lsls	r0, r3, #30
 8008c78:	bf49      	itett	mi
 8008c7a:	085b      	lsrmi	r3, r3, #1
 8008c7c:	089b      	lsrpl	r3, r3, #2
 8008c7e:	2001      	movmi	r0, #1
 8008c80:	600b      	strmi	r3, [r1, #0]
 8008c82:	bf5c      	itt	pl
 8008c84:	600b      	strpl	r3, [r1, #0]
 8008c86:	2002      	movpl	r0, #2
 8008c88:	4770      	bx	lr
 8008c8a:	b298      	uxth	r0, r3
 8008c8c:	b9a8      	cbnz	r0, 8008cba <__lo0bits+0x52>
 8008c8e:	0c1b      	lsrs	r3, r3, #16
 8008c90:	2010      	movs	r0, #16
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	b90a      	cbnz	r2, 8008c9a <__lo0bits+0x32>
 8008c96:	3008      	adds	r0, #8
 8008c98:	0a1b      	lsrs	r3, r3, #8
 8008c9a:	071a      	lsls	r2, r3, #28
 8008c9c:	bf04      	itt	eq
 8008c9e:	091b      	lsreq	r3, r3, #4
 8008ca0:	3004      	addeq	r0, #4
 8008ca2:	079a      	lsls	r2, r3, #30
 8008ca4:	bf04      	itt	eq
 8008ca6:	089b      	lsreq	r3, r3, #2
 8008ca8:	3002      	addeq	r0, #2
 8008caa:	07da      	lsls	r2, r3, #31
 8008cac:	d403      	bmi.n	8008cb6 <__lo0bits+0x4e>
 8008cae:	085b      	lsrs	r3, r3, #1
 8008cb0:	f100 0001 	add.w	r0, r0, #1
 8008cb4:	d005      	beq.n	8008cc2 <__lo0bits+0x5a>
 8008cb6:	600b      	str	r3, [r1, #0]
 8008cb8:	4770      	bx	lr
 8008cba:	4610      	mov	r0, r2
 8008cbc:	e7e9      	b.n	8008c92 <__lo0bits+0x2a>
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	4770      	bx	lr
 8008cc2:	2020      	movs	r0, #32
 8008cc4:	4770      	bx	lr
	...

08008cc8 <__i2b>:
 8008cc8:	b510      	push	{r4, lr}
 8008cca:	460c      	mov	r4, r1
 8008ccc:	2101      	movs	r1, #1
 8008cce:	f7ff ff03 	bl	8008ad8 <_Balloc>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	b928      	cbnz	r0, 8008ce2 <__i2b+0x1a>
 8008cd6:	4b05      	ldr	r3, [pc, #20]	; (8008cec <__i2b+0x24>)
 8008cd8:	4805      	ldr	r0, [pc, #20]	; (8008cf0 <__i2b+0x28>)
 8008cda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008cde:	f000 fe7d 	bl	80099dc <__assert_func>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	6144      	str	r4, [r0, #20]
 8008ce6:	6103      	str	r3, [r0, #16]
 8008ce8:	bd10      	pop	{r4, pc}
 8008cea:	bf00      	nop
 8008cec:	0800b4eb 	.word	0x0800b4eb
 8008cf0:	0800b48f 	.word	0x0800b48f

08008cf4 <__multiply>:
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	4691      	mov	r9, r2
 8008cfa:	690a      	ldr	r2, [r1, #16]
 8008cfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	bfb8      	it	lt
 8008d04:	460b      	movlt	r3, r1
 8008d06:	460c      	mov	r4, r1
 8008d08:	bfbc      	itt	lt
 8008d0a:	464c      	movlt	r4, r9
 8008d0c:	4699      	movlt	r9, r3
 8008d0e:	6927      	ldr	r7, [r4, #16]
 8008d10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d14:	68a3      	ldr	r3, [r4, #8]
 8008d16:	6861      	ldr	r1, [r4, #4]
 8008d18:	eb07 060a 	add.w	r6, r7, sl
 8008d1c:	42b3      	cmp	r3, r6
 8008d1e:	b085      	sub	sp, #20
 8008d20:	bfb8      	it	lt
 8008d22:	3101      	addlt	r1, #1
 8008d24:	f7ff fed8 	bl	8008ad8 <_Balloc>
 8008d28:	b930      	cbnz	r0, 8008d38 <__multiply+0x44>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	4b44      	ldr	r3, [pc, #272]	; (8008e40 <__multiply+0x14c>)
 8008d2e:	4845      	ldr	r0, [pc, #276]	; (8008e44 <__multiply+0x150>)
 8008d30:	f240 115d 	movw	r1, #349	; 0x15d
 8008d34:	f000 fe52 	bl	80099dc <__assert_func>
 8008d38:	f100 0514 	add.w	r5, r0, #20
 8008d3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d40:	462b      	mov	r3, r5
 8008d42:	2200      	movs	r2, #0
 8008d44:	4543      	cmp	r3, r8
 8008d46:	d321      	bcc.n	8008d8c <__multiply+0x98>
 8008d48:	f104 0314 	add.w	r3, r4, #20
 8008d4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d50:	f109 0314 	add.w	r3, r9, #20
 8008d54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d58:	9202      	str	r2, [sp, #8]
 8008d5a:	1b3a      	subs	r2, r7, r4
 8008d5c:	3a15      	subs	r2, #21
 8008d5e:	f022 0203 	bic.w	r2, r2, #3
 8008d62:	3204      	adds	r2, #4
 8008d64:	f104 0115 	add.w	r1, r4, #21
 8008d68:	428f      	cmp	r7, r1
 8008d6a:	bf38      	it	cc
 8008d6c:	2204      	movcc	r2, #4
 8008d6e:	9201      	str	r2, [sp, #4]
 8008d70:	9a02      	ldr	r2, [sp, #8]
 8008d72:	9303      	str	r3, [sp, #12]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d80c      	bhi.n	8008d92 <__multiply+0x9e>
 8008d78:	2e00      	cmp	r6, #0
 8008d7a:	dd03      	ble.n	8008d84 <__multiply+0x90>
 8008d7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d05a      	beq.n	8008e3a <__multiply+0x146>
 8008d84:	6106      	str	r6, [r0, #16]
 8008d86:	b005      	add	sp, #20
 8008d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8c:	f843 2b04 	str.w	r2, [r3], #4
 8008d90:	e7d8      	b.n	8008d44 <__multiply+0x50>
 8008d92:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d96:	f1ba 0f00 	cmp.w	sl, #0
 8008d9a:	d024      	beq.n	8008de6 <__multiply+0xf2>
 8008d9c:	f104 0e14 	add.w	lr, r4, #20
 8008da0:	46a9      	mov	r9, r5
 8008da2:	f04f 0c00 	mov.w	ip, #0
 8008da6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008daa:	f8d9 1000 	ldr.w	r1, [r9]
 8008dae:	fa1f fb82 	uxth.w	fp, r2
 8008db2:	b289      	uxth	r1, r1
 8008db4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008db8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8008dc0:	4461      	add	r1, ip
 8008dc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008dca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008dce:	b289      	uxth	r1, r1
 8008dd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008dd4:	4577      	cmp	r7, lr
 8008dd6:	f849 1b04 	str.w	r1, [r9], #4
 8008dda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dde:	d8e2      	bhi.n	8008da6 <__multiply+0xb2>
 8008de0:	9a01      	ldr	r2, [sp, #4]
 8008de2:	f845 c002 	str.w	ip, [r5, r2]
 8008de6:	9a03      	ldr	r2, [sp, #12]
 8008de8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008dec:	3304      	adds	r3, #4
 8008dee:	f1b9 0f00 	cmp.w	r9, #0
 8008df2:	d020      	beq.n	8008e36 <__multiply+0x142>
 8008df4:	6829      	ldr	r1, [r5, #0]
 8008df6:	f104 0c14 	add.w	ip, r4, #20
 8008dfa:	46ae      	mov	lr, r5
 8008dfc:	f04f 0a00 	mov.w	sl, #0
 8008e00:	f8bc b000 	ldrh.w	fp, [ip]
 8008e04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e08:	fb09 220b 	mla	r2, r9, fp, r2
 8008e0c:	4492      	add	sl, r2
 8008e0e:	b289      	uxth	r1, r1
 8008e10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008e14:	f84e 1b04 	str.w	r1, [lr], #4
 8008e18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e1c:	f8be 1000 	ldrh.w	r1, [lr]
 8008e20:	0c12      	lsrs	r2, r2, #16
 8008e22:	fb09 1102 	mla	r1, r9, r2, r1
 8008e26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008e2a:	4567      	cmp	r7, ip
 8008e2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e30:	d8e6      	bhi.n	8008e00 <__multiply+0x10c>
 8008e32:	9a01      	ldr	r2, [sp, #4]
 8008e34:	50a9      	str	r1, [r5, r2]
 8008e36:	3504      	adds	r5, #4
 8008e38:	e79a      	b.n	8008d70 <__multiply+0x7c>
 8008e3a:	3e01      	subs	r6, #1
 8008e3c:	e79c      	b.n	8008d78 <__multiply+0x84>
 8008e3e:	bf00      	nop
 8008e40:	0800b4eb 	.word	0x0800b4eb
 8008e44:	0800b48f 	.word	0x0800b48f

08008e48 <__pow5mult>:
 8008e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e4c:	4615      	mov	r5, r2
 8008e4e:	f012 0203 	ands.w	r2, r2, #3
 8008e52:	4606      	mov	r6, r0
 8008e54:	460f      	mov	r7, r1
 8008e56:	d007      	beq.n	8008e68 <__pow5mult+0x20>
 8008e58:	4c25      	ldr	r4, [pc, #148]	; (8008ef0 <__pow5mult+0xa8>)
 8008e5a:	3a01      	subs	r2, #1
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e62:	f7ff fe9b 	bl	8008b9c <__multadd>
 8008e66:	4607      	mov	r7, r0
 8008e68:	10ad      	asrs	r5, r5, #2
 8008e6a:	d03d      	beq.n	8008ee8 <__pow5mult+0xa0>
 8008e6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e6e:	b97c      	cbnz	r4, 8008e90 <__pow5mult+0x48>
 8008e70:	2010      	movs	r0, #16
 8008e72:	f001 fc5d 	bl	800a730 <malloc>
 8008e76:	4602      	mov	r2, r0
 8008e78:	6270      	str	r0, [r6, #36]	; 0x24
 8008e7a:	b928      	cbnz	r0, 8008e88 <__pow5mult+0x40>
 8008e7c:	4b1d      	ldr	r3, [pc, #116]	; (8008ef4 <__pow5mult+0xac>)
 8008e7e:	481e      	ldr	r0, [pc, #120]	; (8008ef8 <__pow5mult+0xb0>)
 8008e80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e84:	f000 fdaa 	bl	80099dc <__assert_func>
 8008e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e8c:	6004      	str	r4, [r0, #0]
 8008e8e:	60c4      	str	r4, [r0, #12]
 8008e90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e98:	b94c      	cbnz	r4, 8008eae <__pow5mult+0x66>
 8008e9a:	f240 2171 	movw	r1, #625	; 0x271
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7ff ff12 	bl	8008cc8 <__i2b>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008eaa:	4604      	mov	r4, r0
 8008eac:	6003      	str	r3, [r0, #0]
 8008eae:	f04f 0900 	mov.w	r9, #0
 8008eb2:	07eb      	lsls	r3, r5, #31
 8008eb4:	d50a      	bpl.n	8008ecc <__pow5mult+0x84>
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f7ff ff1a 	bl	8008cf4 <__multiply>
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f7ff fe47 	bl	8008b58 <_Bfree>
 8008eca:	4647      	mov	r7, r8
 8008ecc:	106d      	asrs	r5, r5, #1
 8008ece:	d00b      	beq.n	8008ee8 <__pow5mult+0xa0>
 8008ed0:	6820      	ldr	r0, [r4, #0]
 8008ed2:	b938      	cbnz	r0, 8008ee4 <__pow5mult+0x9c>
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7ff ff0b 	bl	8008cf4 <__multiply>
 8008ede:	6020      	str	r0, [r4, #0]
 8008ee0:	f8c0 9000 	str.w	r9, [r0]
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	e7e4      	b.n	8008eb2 <__pow5mult+0x6a>
 8008ee8:	4638      	mov	r0, r7
 8008eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eee:	bf00      	nop
 8008ef0:	0800b5f0 	.word	0x0800b5f0
 8008ef4:	0800b478 	.word	0x0800b478
 8008ef8:	0800b48f 	.word	0x0800b48f

08008efc <__lshift>:
 8008efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f00:	460c      	mov	r4, r1
 8008f02:	6849      	ldr	r1, [r1, #4]
 8008f04:	6923      	ldr	r3, [r4, #16]
 8008f06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	4691      	mov	r9, r2
 8008f10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f14:	f108 0601 	add.w	r6, r8, #1
 8008f18:	42b3      	cmp	r3, r6
 8008f1a:	db0b      	blt.n	8008f34 <__lshift+0x38>
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f7ff fddb 	bl	8008ad8 <_Balloc>
 8008f22:	4605      	mov	r5, r0
 8008f24:	b948      	cbnz	r0, 8008f3a <__lshift+0x3e>
 8008f26:	4602      	mov	r2, r0
 8008f28:	4b2a      	ldr	r3, [pc, #168]	; (8008fd4 <__lshift+0xd8>)
 8008f2a:	482b      	ldr	r0, [pc, #172]	; (8008fd8 <__lshift+0xdc>)
 8008f2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f30:	f000 fd54 	bl	80099dc <__assert_func>
 8008f34:	3101      	adds	r1, #1
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	e7ee      	b.n	8008f18 <__lshift+0x1c>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f100 0114 	add.w	r1, r0, #20
 8008f40:	f100 0210 	add.w	r2, r0, #16
 8008f44:	4618      	mov	r0, r3
 8008f46:	4553      	cmp	r3, sl
 8008f48:	db37      	blt.n	8008fba <__lshift+0xbe>
 8008f4a:	6920      	ldr	r0, [r4, #16]
 8008f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f50:	f104 0314 	add.w	r3, r4, #20
 8008f54:	f019 091f 	ands.w	r9, r9, #31
 8008f58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008f60:	d02f      	beq.n	8008fc2 <__lshift+0xc6>
 8008f62:	f1c9 0e20 	rsb	lr, r9, #32
 8008f66:	468a      	mov	sl, r1
 8008f68:	f04f 0c00 	mov.w	ip, #0
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	fa02 f209 	lsl.w	r2, r2, r9
 8008f72:	ea42 020c 	orr.w	r2, r2, ip
 8008f76:	f84a 2b04 	str.w	r2, [sl], #4
 8008f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7e:	4298      	cmp	r0, r3
 8008f80:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008f84:	d8f2      	bhi.n	8008f6c <__lshift+0x70>
 8008f86:	1b03      	subs	r3, r0, r4
 8008f88:	3b15      	subs	r3, #21
 8008f8a:	f023 0303 	bic.w	r3, r3, #3
 8008f8e:	3304      	adds	r3, #4
 8008f90:	f104 0215 	add.w	r2, r4, #21
 8008f94:	4290      	cmp	r0, r2
 8008f96:	bf38      	it	cc
 8008f98:	2304      	movcc	r3, #4
 8008f9a:	f841 c003 	str.w	ip, [r1, r3]
 8008f9e:	f1bc 0f00 	cmp.w	ip, #0
 8008fa2:	d001      	beq.n	8008fa8 <__lshift+0xac>
 8008fa4:	f108 0602 	add.w	r6, r8, #2
 8008fa8:	3e01      	subs	r6, #1
 8008faa:	4638      	mov	r0, r7
 8008fac:	612e      	str	r6, [r5, #16]
 8008fae:	4621      	mov	r1, r4
 8008fb0:	f7ff fdd2 	bl	8008b58 <_Bfree>
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fba:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	e7c1      	b.n	8008f46 <__lshift+0x4a>
 8008fc2:	3904      	subs	r1, #4
 8008fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fcc:	4298      	cmp	r0, r3
 8008fce:	d8f9      	bhi.n	8008fc4 <__lshift+0xc8>
 8008fd0:	e7ea      	b.n	8008fa8 <__lshift+0xac>
 8008fd2:	bf00      	nop
 8008fd4:	0800b4eb 	.word	0x0800b4eb
 8008fd8:	0800b48f 	.word	0x0800b48f

08008fdc <__mcmp>:
 8008fdc:	b530      	push	{r4, r5, lr}
 8008fde:	6902      	ldr	r2, [r0, #16]
 8008fe0:	690c      	ldr	r4, [r1, #16]
 8008fe2:	1b12      	subs	r2, r2, r4
 8008fe4:	d10e      	bne.n	8009004 <__mcmp+0x28>
 8008fe6:	f100 0314 	add.w	r3, r0, #20
 8008fea:	3114      	adds	r1, #20
 8008fec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ff0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ff4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ff8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ffc:	42a5      	cmp	r5, r4
 8008ffe:	d003      	beq.n	8009008 <__mcmp+0x2c>
 8009000:	d305      	bcc.n	800900e <__mcmp+0x32>
 8009002:	2201      	movs	r2, #1
 8009004:	4610      	mov	r0, r2
 8009006:	bd30      	pop	{r4, r5, pc}
 8009008:	4283      	cmp	r3, r0
 800900a:	d3f3      	bcc.n	8008ff4 <__mcmp+0x18>
 800900c:	e7fa      	b.n	8009004 <__mcmp+0x28>
 800900e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009012:	e7f7      	b.n	8009004 <__mcmp+0x28>

08009014 <__mdiff>:
 8009014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009018:	460c      	mov	r4, r1
 800901a:	4606      	mov	r6, r0
 800901c:	4611      	mov	r1, r2
 800901e:	4620      	mov	r0, r4
 8009020:	4690      	mov	r8, r2
 8009022:	f7ff ffdb 	bl	8008fdc <__mcmp>
 8009026:	1e05      	subs	r5, r0, #0
 8009028:	d110      	bne.n	800904c <__mdiff+0x38>
 800902a:	4629      	mov	r1, r5
 800902c:	4630      	mov	r0, r6
 800902e:	f7ff fd53 	bl	8008ad8 <_Balloc>
 8009032:	b930      	cbnz	r0, 8009042 <__mdiff+0x2e>
 8009034:	4b3a      	ldr	r3, [pc, #232]	; (8009120 <__mdiff+0x10c>)
 8009036:	4602      	mov	r2, r0
 8009038:	f240 2132 	movw	r1, #562	; 0x232
 800903c:	4839      	ldr	r0, [pc, #228]	; (8009124 <__mdiff+0x110>)
 800903e:	f000 fccd 	bl	80099dc <__assert_func>
 8009042:	2301      	movs	r3, #1
 8009044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904c:	bfa4      	itt	ge
 800904e:	4643      	movge	r3, r8
 8009050:	46a0      	movge	r8, r4
 8009052:	4630      	mov	r0, r6
 8009054:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009058:	bfa6      	itte	ge
 800905a:	461c      	movge	r4, r3
 800905c:	2500      	movge	r5, #0
 800905e:	2501      	movlt	r5, #1
 8009060:	f7ff fd3a 	bl	8008ad8 <_Balloc>
 8009064:	b920      	cbnz	r0, 8009070 <__mdiff+0x5c>
 8009066:	4b2e      	ldr	r3, [pc, #184]	; (8009120 <__mdiff+0x10c>)
 8009068:	4602      	mov	r2, r0
 800906a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800906e:	e7e5      	b.n	800903c <__mdiff+0x28>
 8009070:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009074:	6926      	ldr	r6, [r4, #16]
 8009076:	60c5      	str	r5, [r0, #12]
 8009078:	f104 0914 	add.w	r9, r4, #20
 800907c:	f108 0514 	add.w	r5, r8, #20
 8009080:	f100 0e14 	add.w	lr, r0, #20
 8009084:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009088:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800908c:	f108 0210 	add.w	r2, r8, #16
 8009090:	46f2      	mov	sl, lr
 8009092:	2100      	movs	r1, #0
 8009094:	f859 3b04 	ldr.w	r3, [r9], #4
 8009098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800909c:	fa1f f883 	uxth.w	r8, r3
 80090a0:	fa11 f18b 	uxtah	r1, r1, fp
 80090a4:	0c1b      	lsrs	r3, r3, #16
 80090a6:	eba1 0808 	sub.w	r8, r1, r8
 80090aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80090b2:	fa1f f888 	uxth.w	r8, r8
 80090b6:	1419      	asrs	r1, r3, #16
 80090b8:	454e      	cmp	r6, r9
 80090ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80090be:	f84a 3b04 	str.w	r3, [sl], #4
 80090c2:	d8e7      	bhi.n	8009094 <__mdiff+0x80>
 80090c4:	1b33      	subs	r3, r6, r4
 80090c6:	3b15      	subs	r3, #21
 80090c8:	f023 0303 	bic.w	r3, r3, #3
 80090cc:	3304      	adds	r3, #4
 80090ce:	3415      	adds	r4, #21
 80090d0:	42a6      	cmp	r6, r4
 80090d2:	bf38      	it	cc
 80090d4:	2304      	movcc	r3, #4
 80090d6:	441d      	add	r5, r3
 80090d8:	4473      	add	r3, lr
 80090da:	469e      	mov	lr, r3
 80090dc:	462e      	mov	r6, r5
 80090de:	4566      	cmp	r6, ip
 80090e0:	d30e      	bcc.n	8009100 <__mdiff+0xec>
 80090e2:	f10c 0203 	add.w	r2, ip, #3
 80090e6:	1b52      	subs	r2, r2, r5
 80090e8:	f022 0203 	bic.w	r2, r2, #3
 80090ec:	3d03      	subs	r5, #3
 80090ee:	45ac      	cmp	ip, r5
 80090f0:	bf38      	it	cc
 80090f2:	2200      	movcc	r2, #0
 80090f4:	441a      	add	r2, r3
 80090f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80090fa:	b17b      	cbz	r3, 800911c <__mdiff+0x108>
 80090fc:	6107      	str	r7, [r0, #16]
 80090fe:	e7a3      	b.n	8009048 <__mdiff+0x34>
 8009100:	f856 8b04 	ldr.w	r8, [r6], #4
 8009104:	fa11 f288 	uxtah	r2, r1, r8
 8009108:	1414      	asrs	r4, r2, #16
 800910a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800910e:	b292      	uxth	r2, r2
 8009110:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009114:	f84e 2b04 	str.w	r2, [lr], #4
 8009118:	1421      	asrs	r1, r4, #16
 800911a:	e7e0      	b.n	80090de <__mdiff+0xca>
 800911c:	3f01      	subs	r7, #1
 800911e:	e7ea      	b.n	80090f6 <__mdiff+0xe2>
 8009120:	0800b4eb 	.word	0x0800b4eb
 8009124:	0800b48f 	.word	0x0800b48f

08009128 <__d2b>:
 8009128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800912c:	4689      	mov	r9, r1
 800912e:	2101      	movs	r1, #1
 8009130:	ec57 6b10 	vmov	r6, r7, d0
 8009134:	4690      	mov	r8, r2
 8009136:	f7ff fccf 	bl	8008ad8 <_Balloc>
 800913a:	4604      	mov	r4, r0
 800913c:	b930      	cbnz	r0, 800914c <__d2b+0x24>
 800913e:	4602      	mov	r2, r0
 8009140:	4b25      	ldr	r3, [pc, #148]	; (80091d8 <__d2b+0xb0>)
 8009142:	4826      	ldr	r0, [pc, #152]	; (80091dc <__d2b+0xb4>)
 8009144:	f240 310a 	movw	r1, #778	; 0x30a
 8009148:	f000 fc48 	bl	80099dc <__assert_func>
 800914c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009154:	bb35      	cbnz	r5, 80091a4 <__d2b+0x7c>
 8009156:	2e00      	cmp	r6, #0
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	d028      	beq.n	80091ae <__d2b+0x86>
 800915c:	4668      	mov	r0, sp
 800915e:	9600      	str	r6, [sp, #0]
 8009160:	f7ff fd82 	bl	8008c68 <__lo0bits>
 8009164:	9900      	ldr	r1, [sp, #0]
 8009166:	b300      	cbz	r0, 80091aa <__d2b+0x82>
 8009168:	9a01      	ldr	r2, [sp, #4]
 800916a:	f1c0 0320 	rsb	r3, r0, #32
 800916e:	fa02 f303 	lsl.w	r3, r2, r3
 8009172:	430b      	orrs	r3, r1
 8009174:	40c2      	lsrs	r2, r0
 8009176:	6163      	str	r3, [r4, #20]
 8009178:	9201      	str	r2, [sp, #4]
 800917a:	9b01      	ldr	r3, [sp, #4]
 800917c:	61a3      	str	r3, [r4, #24]
 800917e:	2b00      	cmp	r3, #0
 8009180:	bf14      	ite	ne
 8009182:	2202      	movne	r2, #2
 8009184:	2201      	moveq	r2, #1
 8009186:	6122      	str	r2, [r4, #16]
 8009188:	b1d5      	cbz	r5, 80091c0 <__d2b+0x98>
 800918a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800918e:	4405      	add	r5, r0
 8009190:	f8c9 5000 	str.w	r5, [r9]
 8009194:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009198:	f8c8 0000 	str.w	r0, [r8]
 800919c:	4620      	mov	r0, r4
 800919e:	b003      	add	sp, #12
 80091a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091a8:	e7d5      	b.n	8009156 <__d2b+0x2e>
 80091aa:	6161      	str	r1, [r4, #20]
 80091ac:	e7e5      	b.n	800917a <__d2b+0x52>
 80091ae:	a801      	add	r0, sp, #4
 80091b0:	f7ff fd5a 	bl	8008c68 <__lo0bits>
 80091b4:	9b01      	ldr	r3, [sp, #4]
 80091b6:	6163      	str	r3, [r4, #20]
 80091b8:	2201      	movs	r2, #1
 80091ba:	6122      	str	r2, [r4, #16]
 80091bc:	3020      	adds	r0, #32
 80091be:	e7e3      	b.n	8009188 <__d2b+0x60>
 80091c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091c8:	f8c9 0000 	str.w	r0, [r9]
 80091cc:	6918      	ldr	r0, [r3, #16]
 80091ce:	f7ff fd2b 	bl	8008c28 <__hi0bits>
 80091d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091d6:	e7df      	b.n	8009198 <__d2b+0x70>
 80091d8:	0800b4eb 	.word	0x0800b4eb
 80091dc:	0800b48f 	.word	0x0800b48f

080091e0 <_mprec_log10>:
 80091e0:	2817      	cmp	r0, #23
 80091e2:	b5d0      	push	{r4, r6, r7, lr}
 80091e4:	4604      	mov	r4, r0
 80091e6:	dc07      	bgt.n	80091f8 <_mprec_log10+0x18>
 80091e8:	4809      	ldr	r0, [pc, #36]	; (8009210 <_mprec_log10+0x30>)
 80091ea:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80091ee:	e9d4 0100 	ldrd	r0, r1, [r4]
 80091f2:	ec41 0b10 	vmov	d0, r0, r1
 80091f6:	bdd0      	pop	{r4, r6, r7, pc}
 80091f8:	4906      	ldr	r1, [pc, #24]	; (8009214 <_mprec_log10+0x34>)
 80091fa:	4f07      	ldr	r7, [pc, #28]	; (8009218 <_mprec_log10+0x38>)
 80091fc:	2000      	movs	r0, #0
 80091fe:	2600      	movs	r6, #0
 8009200:	4632      	mov	r2, r6
 8009202:	463b      	mov	r3, r7
 8009204:	f7f7 f9f8 	bl	80005f8 <__aeabi_dmul>
 8009208:	3c01      	subs	r4, #1
 800920a:	d1f9      	bne.n	8009200 <_mprec_log10+0x20>
 800920c:	e7f1      	b.n	80091f2 <_mprec_log10+0x12>
 800920e:	bf00      	nop
 8009210:	0800b528 	.word	0x0800b528
 8009214:	3ff00000 	.word	0x3ff00000
 8009218:	40240000 	.word	0x40240000

0800921c <_calloc_r>:
 800921c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800921e:	fba1 2402 	umull	r2, r4, r1, r2
 8009222:	b94c      	cbnz	r4, 8009238 <_calloc_r+0x1c>
 8009224:	4611      	mov	r1, r2
 8009226:	9201      	str	r2, [sp, #4]
 8009228:	f000 f82e 	bl	8009288 <_malloc_r>
 800922c:	9a01      	ldr	r2, [sp, #4]
 800922e:	4605      	mov	r5, r0
 8009230:	b930      	cbnz	r0, 8009240 <_calloc_r+0x24>
 8009232:	4628      	mov	r0, r5
 8009234:	b003      	add	sp, #12
 8009236:	bd30      	pop	{r4, r5, pc}
 8009238:	220c      	movs	r2, #12
 800923a:	6002      	str	r2, [r0, #0]
 800923c:	2500      	movs	r5, #0
 800923e:	e7f8      	b.n	8009232 <_calloc_r+0x16>
 8009240:	4621      	mov	r1, r4
 8009242:	f7ff fae7 	bl	8008814 <memset>
 8009246:	e7f4      	b.n	8009232 <_calloc_r+0x16>

08009248 <sbrk_aligned>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	4e0e      	ldr	r6, [pc, #56]	; (8009284 <sbrk_aligned+0x3c>)
 800924c:	460c      	mov	r4, r1
 800924e:	6831      	ldr	r1, [r6, #0]
 8009250:	4605      	mov	r5, r0
 8009252:	b911      	cbnz	r1, 800925a <sbrk_aligned+0x12>
 8009254:	f000 fbaa 	bl	80099ac <_sbrk_r>
 8009258:	6030      	str	r0, [r6, #0]
 800925a:	4621      	mov	r1, r4
 800925c:	4628      	mov	r0, r5
 800925e:	f000 fba5 	bl	80099ac <_sbrk_r>
 8009262:	1c43      	adds	r3, r0, #1
 8009264:	d00a      	beq.n	800927c <sbrk_aligned+0x34>
 8009266:	1cc4      	adds	r4, r0, #3
 8009268:	f024 0403 	bic.w	r4, r4, #3
 800926c:	42a0      	cmp	r0, r4
 800926e:	d007      	beq.n	8009280 <sbrk_aligned+0x38>
 8009270:	1a21      	subs	r1, r4, r0
 8009272:	4628      	mov	r0, r5
 8009274:	f000 fb9a 	bl	80099ac <_sbrk_r>
 8009278:	3001      	adds	r0, #1
 800927a:	d101      	bne.n	8009280 <sbrk_aligned+0x38>
 800927c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009280:	4620      	mov	r0, r4
 8009282:	bd70      	pop	{r4, r5, r6, pc}
 8009284:	20001284 	.word	0x20001284

08009288 <_malloc_r>:
 8009288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800928c:	1ccd      	adds	r5, r1, #3
 800928e:	f025 0503 	bic.w	r5, r5, #3
 8009292:	3508      	adds	r5, #8
 8009294:	2d0c      	cmp	r5, #12
 8009296:	bf38      	it	cc
 8009298:	250c      	movcc	r5, #12
 800929a:	2d00      	cmp	r5, #0
 800929c:	4607      	mov	r7, r0
 800929e:	db01      	blt.n	80092a4 <_malloc_r+0x1c>
 80092a0:	42a9      	cmp	r1, r5
 80092a2:	d905      	bls.n	80092b0 <_malloc_r+0x28>
 80092a4:	230c      	movs	r3, #12
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	2600      	movs	r6, #0
 80092aa:	4630      	mov	r0, r6
 80092ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b0:	4e2e      	ldr	r6, [pc, #184]	; (800936c <_malloc_r+0xe4>)
 80092b2:	f001 fa5f 	bl	800a774 <__malloc_lock>
 80092b6:	6833      	ldr	r3, [r6, #0]
 80092b8:	461c      	mov	r4, r3
 80092ba:	bb34      	cbnz	r4, 800930a <_malloc_r+0x82>
 80092bc:	4629      	mov	r1, r5
 80092be:	4638      	mov	r0, r7
 80092c0:	f7ff ffc2 	bl	8009248 <sbrk_aligned>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	4604      	mov	r4, r0
 80092c8:	d14d      	bne.n	8009366 <_malloc_r+0xde>
 80092ca:	6834      	ldr	r4, [r6, #0]
 80092cc:	4626      	mov	r6, r4
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	d140      	bne.n	8009354 <_malloc_r+0xcc>
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	4631      	mov	r1, r6
 80092d6:	4638      	mov	r0, r7
 80092d8:	eb04 0803 	add.w	r8, r4, r3
 80092dc:	f000 fb66 	bl	80099ac <_sbrk_r>
 80092e0:	4580      	cmp	r8, r0
 80092e2:	d13a      	bne.n	800935a <_malloc_r+0xd2>
 80092e4:	6821      	ldr	r1, [r4, #0]
 80092e6:	3503      	adds	r5, #3
 80092e8:	1a6d      	subs	r5, r5, r1
 80092ea:	f025 0503 	bic.w	r5, r5, #3
 80092ee:	3508      	adds	r5, #8
 80092f0:	2d0c      	cmp	r5, #12
 80092f2:	bf38      	it	cc
 80092f4:	250c      	movcc	r5, #12
 80092f6:	4629      	mov	r1, r5
 80092f8:	4638      	mov	r0, r7
 80092fa:	f7ff ffa5 	bl	8009248 <sbrk_aligned>
 80092fe:	3001      	adds	r0, #1
 8009300:	d02b      	beq.n	800935a <_malloc_r+0xd2>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	442b      	add	r3, r5
 8009306:	6023      	str	r3, [r4, #0]
 8009308:	e00e      	b.n	8009328 <_malloc_r+0xa0>
 800930a:	6822      	ldr	r2, [r4, #0]
 800930c:	1b52      	subs	r2, r2, r5
 800930e:	d41e      	bmi.n	800934e <_malloc_r+0xc6>
 8009310:	2a0b      	cmp	r2, #11
 8009312:	d916      	bls.n	8009342 <_malloc_r+0xba>
 8009314:	1961      	adds	r1, r4, r5
 8009316:	42a3      	cmp	r3, r4
 8009318:	6025      	str	r5, [r4, #0]
 800931a:	bf18      	it	ne
 800931c:	6059      	strne	r1, [r3, #4]
 800931e:	6863      	ldr	r3, [r4, #4]
 8009320:	bf08      	it	eq
 8009322:	6031      	streq	r1, [r6, #0]
 8009324:	5162      	str	r2, [r4, r5]
 8009326:	604b      	str	r3, [r1, #4]
 8009328:	4638      	mov	r0, r7
 800932a:	f104 060b 	add.w	r6, r4, #11
 800932e:	f001 fa27 	bl	800a780 <__malloc_unlock>
 8009332:	f026 0607 	bic.w	r6, r6, #7
 8009336:	1d23      	adds	r3, r4, #4
 8009338:	1af2      	subs	r2, r6, r3
 800933a:	d0b6      	beq.n	80092aa <_malloc_r+0x22>
 800933c:	1b9b      	subs	r3, r3, r6
 800933e:	50a3      	str	r3, [r4, r2]
 8009340:	e7b3      	b.n	80092aa <_malloc_r+0x22>
 8009342:	6862      	ldr	r2, [r4, #4]
 8009344:	42a3      	cmp	r3, r4
 8009346:	bf0c      	ite	eq
 8009348:	6032      	streq	r2, [r6, #0]
 800934a:	605a      	strne	r2, [r3, #4]
 800934c:	e7ec      	b.n	8009328 <_malloc_r+0xa0>
 800934e:	4623      	mov	r3, r4
 8009350:	6864      	ldr	r4, [r4, #4]
 8009352:	e7b2      	b.n	80092ba <_malloc_r+0x32>
 8009354:	4634      	mov	r4, r6
 8009356:	6876      	ldr	r6, [r6, #4]
 8009358:	e7b9      	b.n	80092ce <_malloc_r+0x46>
 800935a:	230c      	movs	r3, #12
 800935c:	603b      	str	r3, [r7, #0]
 800935e:	4638      	mov	r0, r7
 8009360:	f001 fa0e 	bl	800a780 <__malloc_unlock>
 8009364:	e7a1      	b.n	80092aa <_malloc_r+0x22>
 8009366:	6025      	str	r5, [r4, #0]
 8009368:	e7de      	b.n	8009328 <_malloc_r+0xa0>
 800936a:	bf00      	nop
 800936c:	20001280 	.word	0x20001280

08009370 <_realloc_r>:
 8009370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009374:	4680      	mov	r8, r0
 8009376:	4614      	mov	r4, r2
 8009378:	460e      	mov	r6, r1
 800937a:	b921      	cbnz	r1, 8009386 <_realloc_r+0x16>
 800937c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009380:	4611      	mov	r1, r2
 8009382:	f7ff bf81 	b.w	8009288 <_malloc_r>
 8009386:	b92a      	cbnz	r2, 8009394 <_realloc_r+0x24>
 8009388:	f001 fa00 	bl	800a78c <_free_r>
 800938c:	4625      	mov	r5, r4
 800938e:	4628      	mov	r0, r5
 8009390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009394:	f001 fa46 	bl	800a824 <_malloc_usable_size_r>
 8009398:	4284      	cmp	r4, r0
 800939a:	4607      	mov	r7, r0
 800939c:	d802      	bhi.n	80093a4 <_realloc_r+0x34>
 800939e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093a2:	d812      	bhi.n	80093ca <_realloc_r+0x5a>
 80093a4:	4621      	mov	r1, r4
 80093a6:	4640      	mov	r0, r8
 80093a8:	f7ff ff6e 	bl	8009288 <_malloc_r>
 80093ac:	4605      	mov	r5, r0
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d0ed      	beq.n	800938e <_realloc_r+0x1e>
 80093b2:	42bc      	cmp	r4, r7
 80093b4:	4622      	mov	r2, r4
 80093b6:	4631      	mov	r1, r6
 80093b8:	bf28      	it	cs
 80093ba:	463a      	movcs	r2, r7
 80093bc:	f7ff fa1c 	bl	80087f8 <memcpy>
 80093c0:	4631      	mov	r1, r6
 80093c2:	4640      	mov	r0, r8
 80093c4:	f001 f9e2 	bl	800a78c <_free_r>
 80093c8:	e7e1      	b.n	800938e <_realloc_r+0x1e>
 80093ca:	4635      	mov	r5, r6
 80093cc:	e7df      	b.n	800938e <_realloc_r+0x1e>

080093ce <__ssputs_r>:
 80093ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d2:	688e      	ldr	r6, [r1, #8]
 80093d4:	429e      	cmp	r6, r3
 80093d6:	4682      	mov	sl, r0
 80093d8:	460c      	mov	r4, r1
 80093da:	4690      	mov	r8, r2
 80093dc:	461f      	mov	r7, r3
 80093de:	d838      	bhi.n	8009452 <__ssputs_r+0x84>
 80093e0:	898a      	ldrh	r2, [r1, #12]
 80093e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093e6:	d032      	beq.n	800944e <__ssputs_r+0x80>
 80093e8:	6825      	ldr	r5, [r4, #0]
 80093ea:	6909      	ldr	r1, [r1, #16]
 80093ec:	eba5 0901 	sub.w	r9, r5, r1
 80093f0:	6965      	ldr	r5, [r4, #20]
 80093f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093fa:	3301      	adds	r3, #1
 80093fc:	444b      	add	r3, r9
 80093fe:	106d      	asrs	r5, r5, #1
 8009400:	429d      	cmp	r5, r3
 8009402:	bf38      	it	cc
 8009404:	461d      	movcc	r5, r3
 8009406:	0553      	lsls	r3, r2, #21
 8009408:	d531      	bpl.n	800946e <__ssputs_r+0xa0>
 800940a:	4629      	mov	r1, r5
 800940c:	f7ff ff3c 	bl	8009288 <_malloc_r>
 8009410:	4606      	mov	r6, r0
 8009412:	b950      	cbnz	r0, 800942a <__ssputs_r+0x5c>
 8009414:	230c      	movs	r3, #12
 8009416:	f8ca 3000 	str.w	r3, [sl]
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009420:	81a3      	strh	r3, [r4, #12]
 8009422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942a:	6921      	ldr	r1, [r4, #16]
 800942c:	464a      	mov	r2, r9
 800942e:	f7ff f9e3 	bl	80087f8 <memcpy>
 8009432:	89a3      	ldrh	r3, [r4, #12]
 8009434:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800943c:	81a3      	strh	r3, [r4, #12]
 800943e:	6126      	str	r6, [r4, #16]
 8009440:	6165      	str	r5, [r4, #20]
 8009442:	444e      	add	r6, r9
 8009444:	eba5 0509 	sub.w	r5, r5, r9
 8009448:	6026      	str	r6, [r4, #0]
 800944a:	60a5      	str	r5, [r4, #8]
 800944c:	463e      	mov	r6, r7
 800944e:	42be      	cmp	r6, r7
 8009450:	d900      	bls.n	8009454 <__ssputs_r+0x86>
 8009452:	463e      	mov	r6, r7
 8009454:	6820      	ldr	r0, [r4, #0]
 8009456:	4632      	mov	r2, r6
 8009458:	4641      	mov	r1, r8
 800945a:	f001 f971 	bl	800a740 <memmove>
 800945e:	68a3      	ldr	r3, [r4, #8]
 8009460:	1b9b      	subs	r3, r3, r6
 8009462:	60a3      	str	r3, [r4, #8]
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	4433      	add	r3, r6
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	2000      	movs	r0, #0
 800946c:	e7db      	b.n	8009426 <__ssputs_r+0x58>
 800946e:	462a      	mov	r2, r5
 8009470:	f7ff ff7e 	bl	8009370 <_realloc_r>
 8009474:	4606      	mov	r6, r0
 8009476:	2800      	cmp	r0, #0
 8009478:	d1e1      	bne.n	800943e <__ssputs_r+0x70>
 800947a:	6921      	ldr	r1, [r4, #16]
 800947c:	4650      	mov	r0, sl
 800947e:	f001 f985 	bl	800a78c <_free_r>
 8009482:	e7c7      	b.n	8009414 <__ssputs_r+0x46>

08009484 <_svfiprintf_r>:
 8009484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	4698      	mov	r8, r3
 800948a:	898b      	ldrh	r3, [r1, #12]
 800948c:	061b      	lsls	r3, r3, #24
 800948e:	b09d      	sub	sp, #116	; 0x74
 8009490:	4607      	mov	r7, r0
 8009492:	460d      	mov	r5, r1
 8009494:	4614      	mov	r4, r2
 8009496:	d50e      	bpl.n	80094b6 <_svfiprintf_r+0x32>
 8009498:	690b      	ldr	r3, [r1, #16]
 800949a:	b963      	cbnz	r3, 80094b6 <_svfiprintf_r+0x32>
 800949c:	2140      	movs	r1, #64	; 0x40
 800949e:	f7ff fef3 	bl	8009288 <_malloc_r>
 80094a2:	6028      	str	r0, [r5, #0]
 80094a4:	6128      	str	r0, [r5, #16]
 80094a6:	b920      	cbnz	r0, 80094b2 <_svfiprintf_r+0x2e>
 80094a8:	230c      	movs	r3, #12
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094b0:	e0d1      	b.n	8009656 <_svfiprintf_r+0x1d2>
 80094b2:	2340      	movs	r3, #64	; 0x40
 80094b4:	616b      	str	r3, [r5, #20]
 80094b6:	2300      	movs	r3, #0
 80094b8:	9309      	str	r3, [sp, #36]	; 0x24
 80094ba:	2320      	movs	r3, #32
 80094bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80094c4:	2330      	movs	r3, #48	; 0x30
 80094c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009670 <_svfiprintf_r+0x1ec>
 80094ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094ce:	f04f 0901 	mov.w	r9, #1
 80094d2:	4623      	mov	r3, r4
 80094d4:	469a      	mov	sl, r3
 80094d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094da:	b10a      	cbz	r2, 80094e0 <_svfiprintf_r+0x5c>
 80094dc:	2a25      	cmp	r2, #37	; 0x25
 80094de:	d1f9      	bne.n	80094d4 <_svfiprintf_r+0x50>
 80094e0:	ebba 0b04 	subs.w	fp, sl, r4
 80094e4:	d00b      	beq.n	80094fe <_svfiprintf_r+0x7a>
 80094e6:	465b      	mov	r3, fp
 80094e8:	4622      	mov	r2, r4
 80094ea:	4629      	mov	r1, r5
 80094ec:	4638      	mov	r0, r7
 80094ee:	f7ff ff6e 	bl	80093ce <__ssputs_r>
 80094f2:	3001      	adds	r0, #1
 80094f4:	f000 80aa 	beq.w	800964c <_svfiprintf_r+0x1c8>
 80094f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094fa:	445a      	add	r2, fp
 80094fc:	9209      	str	r2, [sp, #36]	; 0x24
 80094fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 80a2 	beq.w	800964c <_svfiprintf_r+0x1c8>
 8009508:	2300      	movs	r3, #0
 800950a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800950e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009512:	f10a 0a01 	add.w	sl, sl, #1
 8009516:	9304      	str	r3, [sp, #16]
 8009518:	9307      	str	r3, [sp, #28]
 800951a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800951e:	931a      	str	r3, [sp, #104]	; 0x68
 8009520:	4654      	mov	r4, sl
 8009522:	2205      	movs	r2, #5
 8009524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009528:	4851      	ldr	r0, [pc, #324]	; (8009670 <_svfiprintf_r+0x1ec>)
 800952a:	f7f6 fe59 	bl	80001e0 <memchr>
 800952e:	9a04      	ldr	r2, [sp, #16]
 8009530:	b9d8      	cbnz	r0, 800956a <_svfiprintf_r+0xe6>
 8009532:	06d0      	lsls	r0, r2, #27
 8009534:	bf44      	itt	mi
 8009536:	2320      	movmi	r3, #32
 8009538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800953c:	0711      	lsls	r1, r2, #28
 800953e:	bf44      	itt	mi
 8009540:	232b      	movmi	r3, #43	; 0x2b
 8009542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009546:	f89a 3000 	ldrb.w	r3, [sl]
 800954a:	2b2a      	cmp	r3, #42	; 0x2a
 800954c:	d015      	beq.n	800957a <_svfiprintf_r+0xf6>
 800954e:	9a07      	ldr	r2, [sp, #28]
 8009550:	4654      	mov	r4, sl
 8009552:	2000      	movs	r0, #0
 8009554:	f04f 0c0a 	mov.w	ip, #10
 8009558:	4621      	mov	r1, r4
 800955a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800955e:	3b30      	subs	r3, #48	; 0x30
 8009560:	2b09      	cmp	r3, #9
 8009562:	d94e      	bls.n	8009602 <_svfiprintf_r+0x17e>
 8009564:	b1b0      	cbz	r0, 8009594 <_svfiprintf_r+0x110>
 8009566:	9207      	str	r2, [sp, #28]
 8009568:	e014      	b.n	8009594 <_svfiprintf_r+0x110>
 800956a:	eba0 0308 	sub.w	r3, r0, r8
 800956e:	fa09 f303 	lsl.w	r3, r9, r3
 8009572:	4313      	orrs	r3, r2
 8009574:	9304      	str	r3, [sp, #16]
 8009576:	46a2      	mov	sl, r4
 8009578:	e7d2      	b.n	8009520 <_svfiprintf_r+0x9c>
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	1d19      	adds	r1, r3, #4
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	9103      	str	r1, [sp, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	bfbb      	ittet	lt
 8009586:	425b      	neglt	r3, r3
 8009588:	f042 0202 	orrlt.w	r2, r2, #2
 800958c:	9307      	strge	r3, [sp, #28]
 800958e:	9307      	strlt	r3, [sp, #28]
 8009590:	bfb8      	it	lt
 8009592:	9204      	strlt	r2, [sp, #16]
 8009594:	7823      	ldrb	r3, [r4, #0]
 8009596:	2b2e      	cmp	r3, #46	; 0x2e
 8009598:	d10c      	bne.n	80095b4 <_svfiprintf_r+0x130>
 800959a:	7863      	ldrb	r3, [r4, #1]
 800959c:	2b2a      	cmp	r3, #42	; 0x2a
 800959e:	d135      	bne.n	800960c <_svfiprintf_r+0x188>
 80095a0:	9b03      	ldr	r3, [sp, #12]
 80095a2:	1d1a      	adds	r2, r3, #4
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	9203      	str	r2, [sp, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	bfb8      	it	lt
 80095ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80095b0:	3402      	adds	r4, #2
 80095b2:	9305      	str	r3, [sp, #20]
 80095b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009680 <_svfiprintf_r+0x1fc>
 80095b8:	7821      	ldrb	r1, [r4, #0]
 80095ba:	2203      	movs	r2, #3
 80095bc:	4650      	mov	r0, sl
 80095be:	f7f6 fe0f 	bl	80001e0 <memchr>
 80095c2:	b140      	cbz	r0, 80095d6 <_svfiprintf_r+0x152>
 80095c4:	2340      	movs	r3, #64	; 0x40
 80095c6:	eba0 000a 	sub.w	r0, r0, sl
 80095ca:	fa03 f000 	lsl.w	r0, r3, r0
 80095ce:	9b04      	ldr	r3, [sp, #16]
 80095d0:	4303      	orrs	r3, r0
 80095d2:	3401      	adds	r4, #1
 80095d4:	9304      	str	r3, [sp, #16]
 80095d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095da:	4826      	ldr	r0, [pc, #152]	; (8009674 <_svfiprintf_r+0x1f0>)
 80095dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095e0:	2206      	movs	r2, #6
 80095e2:	f7f6 fdfd 	bl	80001e0 <memchr>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d038      	beq.n	800965c <_svfiprintf_r+0x1d8>
 80095ea:	4b23      	ldr	r3, [pc, #140]	; (8009678 <_svfiprintf_r+0x1f4>)
 80095ec:	bb1b      	cbnz	r3, 8009636 <_svfiprintf_r+0x1b2>
 80095ee:	9b03      	ldr	r3, [sp, #12]
 80095f0:	3307      	adds	r3, #7
 80095f2:	f023 0307 	bic.w	r3, r3, #7
 80095f6:	3308      	adds	r3, #8
 80095f8:	9303      	str	r3, [sp, #12]
 80095fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095fc:	4433      	add	r3, r6
 80095fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009600:	e767      	b.n	80094d2 <_svfiprintf_r+0x4e>
 8009602:	fb0c 3202 	mla	r2, ip, r2, r3
 8009606:	460c      	mov	r4, r1
 8009608:	2001      	movs	r0, #1
 800960a:	e7a5      	b.n	8009558 <_svfiprintf_r+0xd4>
 800960c:	2300      	movs	r3, #0
 800960e:	3401      	adds	r4, #1
 8009610:	9305      	str	r3, [sp, #20]
 8009612:	4619      	mov	r1, r3
 8009614:	f04f 0c0a 	mov.w	ip, #10
 8009618:	4620      	mov	r0, r4
 800961a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800961e:	3a30      	subs	r2, #48	; 0x30
 8009620:	2a09      	cmp	r2, #9
 8009622:	d903      	bls.n	800962c <_svfiprintf_r+0x1a8>
 8009624:	2b00      	cmp	r3, #0
 8009626:	d0c5      	beq.n	80095b4 <_svfiprintf_r+0x130>
 8009628:	9105      	str	r1, [sp, #20]
 800962a:	e7c3      	b.n	80095b4 <_svfiprintf_r+0x130>
 800962c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009630:	4604      	mov	r4, r0
 8009632:	2301      	movs	r3, #1
 8009634:	e7f0      	b.n	8009618 <_svfiprintf_r+0x194>
 8009636:	ab03      	add	r3, sp, #12
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	462a      	mov	r2, r5
 800963c:	4b0f      	ldr	r3, [pc, #60]	; (800967c <_svfiprintf_r+0x1f8>)
 800963e:	a904      	add	r1, sp, #16
 8009640:	4638      	mov	r0, r7
 8009642:	f3af 8000 	nop.w
 8009646:	1c42      	adds	r2, r0, #1
 8009648:	4606      	mov	r6, r0
 800964a:	d1d6      	bne.n	80095fa <_svfiprintf_r+0x176>
 800964c:	89ab      	ldrh	r3, [r5, #12]
 800964e:	065b      	lsls	r3, r3, #25
 8009650:	f53f af2c 	bmi.w	80094ac <_svfiprintf_r+0x28>
 8009654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009656:	b01d      	add	sp, #116	; 0x74
 8009658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965c:	ab03      	add	r3, sp, #12
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	462a      	mov	r2, r5
 8009662:	4b06      	ldr	r3, [pc, #24]	; (800967c <_svfiprintf_r+0x1f8>)
 8009664:	a904      	add	r1, sp, #16
 8009666:	4638      	mov	r0, r7
 8009668:	f000 f87a 	bl	8009760 <_printf_i>
 800966c:	e7eb      	b.n	8009646 <_svfiprintf_r+0x1c2>
 800966e:	bf00      	nop
 8009670:	0800b5fc 	.word	0x0800b5fc
 8009674:	0800b606 	.word	0x0800b606
 8009678:	00000000 	.word	0x00000000
 800967c:	080093cf 	.word	0x080093cf
 8009680:	0800b602 	.word	0x0800b602

08009684 <_printf_common>:
 8009684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009688:	4616      	mov	r6, r2
 800968a:	4699      	mov	r9, r3
 800968c:	688a      	ldr	r2, [r1, #8]
 800968e:	690b      	ldr	r3, [r1, #16]
 8009690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009694:	4293      	cmp	r3, r2
 8009696:	bfb8      	it	lt
 8009698:	4613      	movlt	r3, r2
 800969a:	6033      	str	r3, [r6, #0]
 800969c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096a0:	4607      	mov	r7, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	b10a      	cbz	r2, 80096aa <_printf_common+0x26>
 80096a6:	3301      	adds	r3, #1
 80096a8:	6033      	str	r3, [r6, #0]
 80096aa:	6823      	ldr	r3, [r4, #0]
 80096ac:	0699      	lsls	r1, r3, #26
 80096ae:	bf42      	ittt	mi
 80096b0:	6833      	ldrmi	r3, [r6, #0]
 80096b2:	3302      	addmi	r3, #2
 80096b4:	6033      	strmi	r3, [r6, #0]
 80096b6:	6825      	ldr	r5, [r4, #0]
 80096b8:	f015 0506 	ands.w	r5, r5, #6
 80096bc:	d106      	bne.n	80096cc <_printf_common+0x48>
 80096be:	f104 0a19 	add.w	sl, r4, #25
 80096c2:	68e3      	ldr	r3, [r4, #12]
 80096c4:	6832      	ldr	r2, [r6, #0]
 80096c6:	1a9b      	subs	r3, r3, r2
 80096c8:	42ab      	cmp	r3, r5
 80096ca:	dc26      	bgt.n	800971a <_printf_common+0x96>
 80096cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096d0:	1e13      	subs	r3, r2, #0
 80096d2:	6822      	ldr	r2, [r4, #0]
 80096d4:	bf18      	it	ne
 80096d6:	2301      	movne	r3, #1
 80096d8:	0692      	lsls	r2, r2, #26
 80096da:	d42b      	bmi.n	8009734 <_printf_common+0xb0>
 80096dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096e0:	4649      	mov	r1, r9
 80096e2:	4638      	mov	r0, r7
 80096e4:	47c0      	blx	r8
 80096e6:	3001      	adds	r0, #1
 80096e8:	d01e      	beq.n	8009728 <_printf_common+0xa4>
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	68e5      	ldr	r5, [r4, #12]
 80096ee:	6832      	ldr	r2, [r6, #0]
 80096f0:	f003 0306 	and.w	r3, r3, #6
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	bf08      	it	eq
 80096f8:	1aad      	subeq	r5, r5, r2
 80096fa:	68a3      	ldr	r3, [r4, #8]
 80096fc:	6922      	ldr	r2, [r4, #16]
 80096fe:	bf0c      	ite	eq
 8009700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009704:	2500      	movne	r5, #0
 8009706:	4293      	cmp	r3, r2
 8009708:	bfc4      	itt	gt
 800970a:	1a9b      	subgt	r3, r3, r2
 800970c:	18ed      	addgt	r5, r5, r3
 800970e:	2600      	movs	r6, #0
 8009710:	341a      	adds	r4, #26
 8009712:	42b5      	cmp	r5, r6
 8009714:	d11a      	bne.n	800974c <_printf_common+0xc8>
 8009716:	2000      	movs	r0, #0
 8009718:	e008      	b.n	800972c <_printf_common+0xa8>
 800971a:	2301      	movs	r3, #1
 800971c:	4652      	mov	r2, sl
 800971e:	4649      	mov	r1, r9
 8009720:	4638      	mov	r0, r7
 8009722:	47c0      	blx	r8
 8009724:	3001      	adds	r0, #1
 8009726:	d103      	bne.n	8009730 <_printf_common+0xac>
 8009728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800972c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009730:	3501      	adds	r5, #1
 8009732:	e7c6      	b.n	80096c2 <_printf_common+0x3e>
 8009734:	18e1      	adds	r1, r4, r3
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	2030      	movs	r0, #48	; 0x30
 800973a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800973e:	4422      	add	r2, r4
 8009740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009748:	3302      	adds	r3, #2
 800974a:	e7c7      	b.n	80096dc <_printf_common+0x58>
 800974c:	2301      	movs	r3, #1
 800974e:	4622      	mov	r2, r4
 8009750:	4649      	mov	r1, r9
 8009752:	4638      	mov	r0, r7
 8009754:	47c0      	blx	r8
 8009756:	3001      	adds	r0, #1
 8009758:	d0e6      	beq.n	8009728 <_printf_common+0xa4>
 800975a:	3601      	adds	r6, #1
 800975c:	e7d9      	b.n	8009712 <_printf_common+0x8e>
	...

08009760 <_printf_i>:
 8009760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009764:	7e0f      	ldrb	r7, [r1, #24]
 8009766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009768:	2f78      	cmp	r7, #120	; 0x78
 800976a:	4691      	mov	r9, r2
 800976c:	4680      	mov	r8, r0
 800976e:	460c      	mov	r4, r1
 8009770:	469a      	mov	sl, r3
 8009772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009776:	d807      	bhi.n	8009788 <_printf_i+0x28>
 8009778:	2f62      	cmp	r7, #98	; 0x62
 800977a:	d80a      	bhi.n	8009792 <_printf_i+0x32>
 800977c:	2f00      	cmp	r7, #0
 800977e:	f000 80d8 	beq.w	8009932 <_printf_i+0x1d2>
 8009782:	2f58      	cmp	r7, #88	; 0x58
 8009784:	f000 80a3 	beq.w	80098ce <_printf_i+0x16e>
 8009788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800978c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009790:	e03a      	b.n	8009808 <_printf_i+0xa8>
 8009792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009796:	2b15      	cmp	r3, #21
 8009798:	d8f6      	bhi.n	8009788 <_printf_i+0x28>
 800979a:	a101      	add	r1, pc, #4	; (adr r1, 80097a0 <_printf_i+0x40>)
 800979c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097a0:	080097f9 	.word	0x080097f9
 80097a4:	0800980d 	.word	0x0800980d
 80097a8:	08009789 	.word	0x08009789
 80097ac:	08009789 	.word	0x08009789
 80097b0:	08009789 	.word	0x08009789
 80097b4:	08009789 	.word	0x08009789
 80097b8:	0800980d 	.word	0x0800980d
 80097bc:	08009789 	.word	0x08009789
 80097c0:	08009789 	.word	0x08009789
 80097c4:	08009789 	.word	0x08009789
 80097c8:	08009789 	.word	0x08009789
 80097cc:	08009919 	.word	0x08009919
 80097d0:	0800983d 	.word	0x0800983d
 80097d4:	080098fb 	.word	0x080098fb
 80097d8:	08009789 	.word	0x08009789
 80097dc:	08009789 	.word	0x08009789
 80097e0:	0800993b 	.word	0x0800993b
 80097e4:	08009789 	.word	0x08009789
 80097e8:	0800983d 	.word	0x0800983d
 80097ec:	08009789 	.word	0x08009789
 80097f0:	08009789 	.word	0x08009789
 80097f4:	08009903 	.word	0x08009903
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	1d1a      	adds	r2, r3, #4
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	602a      	str	r2, [r5, #0]
 8009800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009808:	2301      	movs	r3, #1
 800980a:	e0a3      	b.n	8009954 <_printf_i+0x1f4>
 800980c:	6820      	ldr	r0, [r4, #0]
 800980e:	6829      	ldr	r1, [r5, #0]
 8009810:	0606      	lsls	r6, r0, #24
 8009812:	f101 0304 	add.w	r3, r1, #4
 8009816:	d50a      	bpl.n	800982e <_printf_i+0xce>
 8009818:	680e      	ldr	r6, [r1, #0]
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	2e00      	cmp	r6, #0
 800981e:	da03      	bge.n	8009828 <_printf_i+0xc8>
 8009820:	232d      	movs	r3, #45	; 0x2d
 8009822:	4276      	negs	r6, r6
 8009824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009828:	485e      	ldr	r0, [pc, #376]	; (80099a4 <_printf_i+0x244>)
 800982a:	230a      	movs	r3, #10
 800982c:	e019      	b.n	8009862 <_printf_i+0x102>
 800982e:	680e      	ldr	r6, [r1, #0]
 8009830:	602b      	str	r3, [r5, #0]
 8009832:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009836:	bf18      	it	ne
 8009838:	b236      	sxthne	r6, r6
 800983a:	e7ef      	b.n	800981c <_printf_i+0xbc>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	6820      	ldr	r0, [r4, #0]
 8009840:	1d19      	adds	r1, r3, #4
 8009842:	6029      	str	r1, [r5, #0]
 8009844:	0601      	lsls	r1, r0, #24
 8009846:	d501      	bpl.n	800984c <_printf_i+0xec>
 8009848:	681e      	ldr	r6, [r3, #0]
 800984a:	e002      	b.n	8009852 <_printf_i+0xf2>
 800984c:	0646      	lsls	r6, r0, #25
 800984e:	d5fb      	bpl.n	8009848 <_printf_i+0xe8>
 8009850:	881e      	ldrh	r6, [r3, #0]
 8009852:	4854      	ldr	r0, [pc, #336]	; (80099a4 <_printf_i+0x244>)
 8009854:	2f6f      	cmp	r7, #111	; 0x6f
 8009856:	bf0c      	ite	eq
 8009858:	2308      	moveq	r3, #8
 800985a:	230a      	movne	r3, #10
 800985c:	2100      	movs	r1, #0
 800985e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009862:	6865      	ldr	r5, [r4, #4]
 8009864:	60a5      	str	r5, [r4, #8]
 8009866:	2d00      	cmp	r5, #0
 8009868:	bfa2      	ittt	ge
 800986a:	6821      	ldrge	r1, [r4, #0]
 800986c:	f021 0104 	bicge.w	r1, r1, #4
 8009870:	6021      	strge	r1, [r4, #0]
 8009872:	b90e      	cbnz	r6, 8009878 <_printf_i+0x118>
 8009874:	2d00      	cmp	r5, #0
 8009876:	d04d      	beq.n	8009914 <_printf_i+0x1b4>
 8009878:	4615      	mov	r5, r2
 800987a:	fbb6 f1f3 	udiv	r1, r6, r3
 800987e:	fb03 6711 	mls	r7, r3, r1, r6
 8009882:	5dc7      	ldrb	r7, [r0, r7]
 8009884:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009888:	4637      	mov	r7, r6
 800988a:	42bb      	cmp	r3, r7
 800988c:	460e      	mov	r6, r1
 800988e:	d9f4      	bls.n	800987a <_printf_i+0x11a>
 8009890:	2b08      	cmp	r3, #8
 8009892:	d10b      	bne.n	80098ac <_printf_i+0x14c>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	07de      	lsls	r6, r3, #31
 8009898:	d508      	bpl.n	80098ac <_printf_i+0x14c>
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	6861      	ldr	r1, [r4, #4]
 800989e:	4299      	cmp	r1, r3
 80098a0:	bfde      	ittt	le
 80098a2:	2330      	movle	r3, #48	; 0x30
 80098a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80098ac:	1b52      	subs	r2, r2, r5
 80098ae:	6122      	str	r2, [r4, #16]
 80098b0:	f8cd a000 	str.w	sl, [sp]
 80098b4:	464b      	mov	r3, r9
 80098b6:	aa03      	add	r2, sp, #12
 80098b8:	4621      	mov	r1, r4
 80098ba:	4640      	mov	r0, r8
 80098bc:	f7ff fee2 	bl	8009684 <_printf_common>
 80098c0:	3001      	adds	r0, #1
 80098c2:	d14c      	bne.n	800995e <_printf_i+0x1fe>
 80098c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098c8:	b004      	add	sp, #16
 80098ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ce:	4835      	ldr	r0, [pc, #212]	; (80099a4 <_printf_i+0x244>)
 80098d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098d4:	6829      	ldr	r1, [r5, #0]
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80098dc:	6029      	str	r1, [r5, #0]
 80098de:	061d      	lsls	r5, r3, #24
 80098e0:	d514      	bpl.n	800990c <_printf_i+0x1ac>
 80098e2:	07df      	lsls	r7, r3, #31
 80098e4:	bf44      	itt	mi
 80098e6:	f043 0320 	orrmi.w	r3, r3, #32
 80098ea:	6023      	strmi	r3, [r4, #0]
 80098ec:	b91e      	cbnz	r6, 80098f6 <_printf_i+0x196>
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	f023 0320 	bic.w	r3, r3, #32
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	2310      	movs	r3, #16
 80098f8:	e7b0      	b.n	800985c <_printf_i+0xfc>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	f043 0320 	orr.w	r3, r3, #32
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	2378      	movs	r3, #120	; 0x78
 8009904:	4828      	ldr	r0, [pc, #160]	; (80099a8 <_printf_i+0x248>)
 8009906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800990a:	e7e3      	b.n	80098d4 <_printf_i+0x174>
 800990c:	0659      	lsls	r1, r3, #25
 800990e:	bf48      	it	mi
 8009910:	b2b6      	uxthmi	r6, r6
 8009912:	e7e6      	b.n	80098e2 <_printf_i+0x182>
 8009914:	4615      	mov	r5, r2
 8009916:	e7bb      	b.n	8009890 <_printf_i+0x130>
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	6826      	ldr	r6, [r4, #0]
 800991c:	6961      	ldr	r1, [r4, #20]
 800991e:	1d18      	adds	r0, r3, #4
 8009920:	6028      	str	r0, [r5, #0]
 8009922:	0635      	lsls	r5, r6, #24
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	d501      	bpl.n	800992c <_printf_i+0x1cc>
 8009928:	6019      	str	r1, [r3, #0]
 800992a:	e002      	b.n	8009932 <_printf_i+0x1d2>
 800992c:	0670      	lsls	r0, r6, #25
 800992e:	d5fb      	bpl.n	8009928 <_printf_i+0x1c8>
 8009930:	8019      	strh	r1, [r3, #0]
 8009932:	2300      	movs	r3, #0
 8009934:	6123      	str	r3, [r4, #16]
 8009936:	4615      	mov	r5, r2
 8009938:	e7ba      	b.n	80098b0 <_printf_i+0x150>
 800993a:	682b      	ldr	r3, [r5, #0]
 800993c:	1d1a      	adds	r2, r3, #4
 800993e:	602a      	str	r2, [r5, #0]
 8009940:	681d      	ldr	r5, [r3, #0]
 8009942:	6862      	ldr	r2, [r4, #4]
 8009944:	2100      	movs	r1, #0
 8009946:	4628      	mov	r0, r5
 8009948:	f7f6 fc4a 	bl	80001e0 <memchr>
 800994c:	b108      	cbz	r0, 8009952 <_printf_i+0x1f2>
 800994e:	1b40      	subs	r0, r0, r5
 8009950:	6060      	str	r0, [r4, #4]
 8009952:	6863      	ldr	r3, [r4, #4]
 8009954:	6123      	str	r3, [r4, #16]
 8009956:	2300      	movs	r3, #0
 8009958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800995c:	e7a8      	b.n	80098b0 <_printf_i+0x150>
 800995e:	6923      	ldr	r3, [r4, #16]
 8009960:	462a      	mov	r2, r5
 8009962:	4649      	mov	r1, r9
 8009964:	4640      	mov	r0, r8
 8009966:	47d0      	blx	sl
 8009968:	3001      	adds	r0, #1
 800996a:	d0ab      	beq.n	80098c4 <_printf_i+0x164>
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	079b      	lsls	r3, r3, #30
 8009970:	d413      	bmi.n	800999a <_printf_i+0x23a>
 8009972:	68e0      	ldr	r0, [r4, #12]
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	4298      	cmp	r0, r3
 8009978:	bfb8      	it	lt
 800997a:	4618      	movlt	r0, r3
 800997c:	e7a4      	b.n	80098c8 <_printf_i+0x168>
 800997e:	2301      	movs	r3, #1
 8009980:	4632      	mov	r2, r6
 8009982:	4649      	mov	r1, r9
 8009984:	4640      	mov	r0, r8
 8009986:	47d0      	blx	sl
 8009988:	3001      	adds	r0, #1
 800998a:	d09b      	beq.n	80098c4 <_printf_i+0x164>
 800998c:	3501      	adds	r5, #1
 800998e:	68e3      	ldr	r3, [r4, #12]
 8009990:	9903      	ldr	r1, [sp, #12]
 8009992:	1a5b      	subs	r3, r3, r1
 8009994:	42ab      	cmp	r3, r5
 8009996:	dcf2      	bgt.n	800997e <_printf_i+0x21e>
 8009998:	e7eb      	b.n	8009972 <_printf_i+0x212>
 800999a:	2500      	movs	r5, #0
 800999c:	f104 0619 	add.w	r6, r4, #25
 80099a0:	e7f5      	b.n	800998e <_printf_i+0x22e>
 80099a2:	bf00      	nop
 80099a4:	0800b60d 	.word	0x0800b60d
 80099a8:	0800b61e 	.word	0x0800b61e

080099ac <_sbrk_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4d06      	ldr	r5, [pc, #24]	; (80099c8 <_sbrk_r+0x1c>)
 80099b0:	2300      	movs	r3, #0
 80099b2:	4604      	mov	r4, r0
 80099b4:	4608      	mov	r0, r1
 80099b6:	602b      	str	r3, [r5, #0]
 80099b8:	f7f8 fabc 	bl	8001f34 <_sbrk>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_sbrk_r+0x1a>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_sbrk_r+0x1a>
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	20001288 	.word	0x20001288

080099cc <strcpy>:
 80099cc:	4603      	mov	r3, r0
 80099ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099d2:	f803 2b01 	strb.w	r2, [r3], #1
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	d1f9      	bne.n	80099ce <strcpy+0x2>
 80099da:	4770      	bx	lr

080099dc <__assert_func>:
 80099dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099de:	4614      	mov	r4, r2
 80099e0:	461a      	mov	r2, r3
 80099e2:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <__assert_func+0x2c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4605      	mov	r5, r0
 80099e8:	68d8      	ldr	r0, [r3, #12]
 80099ea:	b14c      	cbz	r4, 8009a00 <__assert_func+0x24>
 80099ec:	4b07      	ldr	r3, [pc, #28]	; (8009a0c <__assert_func+0x30>)
 80099ee:	9100      	str	r1, [sp, #0]
 80099f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099f4:	4906      	ldr	r1, [pc, #24]	; (8009a10 <__assert_func+0x34>)
 80099f6:	462b      	mov	r3, r5
 80099f8:	f000 fe88 	bl	800a70c <fiprintf>
 80099fc:	f001 f934 	bl	800ac68 <abort>
 8009a00:	4b04      	ldr	r3, [pc, #16]	; (8009a14 <__assert_func+0x38>)
 8009a02:	461c      	mov	r4, r3
 8009a04:	e7f3      	b.n	80099ee <__assert_func+0x12>
 8009a06:	bf00      	nop
 8009a08:	20000010 	.word	0x20000010
 8009a0c:	0800b62f 	.word	0x0800b62f
 8009a10:	0800b63c 	.word	0x0800b63c
 8009a14:	0800b66a 	.word	0x0800b66a

08009a18 <quorem>:
 8009a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	6903      	ldr	r3, [r0, #16]
 8009a1e:	690c      	ldr	r4, [r1, #16]
 8009a20:	42a3      	cmp	r3, r4
 8009a22:	4607      	mov	r7, r0
 8009a24:	f2c0 8081 	blt.w	8009b2a <quorem+0x112>
 8009a28:	3c01      	subs	r4, #1
 8009a2a:	f101 0814 	add.w	r8, r1, #20
 8009a2e:	f100 0514 	add.w	r5, r0, #20
 8009a32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a40:	3301      	adds	r3, #1
 8009a42:	429a      	cmp	r2, r3
 8009a44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a50:	d331      	bcc.n	8009ab6 <quorem+0x9e>
 8009a52:	f04f 0e00 	mov.w	lr, #0
 8009a56:	4640      	mov	r0, r8
 8009a58:	46ac      	mov	ip, r5
 8009a5a:	46f2      	mov	sl, lr
 8009a5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a60:	b293      	uxth	r3, r2
 8009a62:	fb06 e303 	mla	r3, r6, r3, lr
 8009a66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	ebaa 0303 	sub.w	r3, sl, r3
 8009a70:	f8dc a000 	ldr.w	sl, [ip]
 8009a74:	0c12      	lsrs	r2, r2, #16
 8009a76:	fa13 f38a 	uxtah	r3, r3, sl
 8009a7a:	fb06 e202 	mla	r2, r6, r2, lr
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	9b00      	ldr	r3, [sp, #0]
 8009a82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a86:	b292      	uxth	r2, r2
 8009a88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a90:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a94:	4581      	cmp	r9, r0
 8009a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a9a:	f84c 3b04 	str.w	r3, [ip], #4
 8009a9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009aa2:	d2db      	bcs.n	8009a5c <quorem+0x44>
 8009aa4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009aa8:	b92b      	cbnz	r3, 8009ab6 <quorem+0x9e>
 8009aaa:	9b01      	ldr	r3, [sp, #4]
 8009aac:	3b04      	subs	r3, #4
 8009aae:	429d      	cmp	r5, r3
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	d32e      	bcc.n	8009b12 <quorem+0xfa>
 8009ab4:	613c      	str	r4, [r7, #16]
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	f7ff fa90 	bl	8008fdc <__mcmp>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	db24      	blt.n	8009b0a <quorem+0xf2>
 8009ac0:	3601      	adds	r6, #1
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	f04f 0c00 	mov.w	ip, #0
 8009ac8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009acc:	f8d0 e000 	ldr.w	lr, [r0]
 8009ad0:	b293      	uxth	r3, r2
 8009ad2:	ebac 0303 	sub.w	r3, ip, r3
 8009ad6:	0c12      	lsrs	r2, r2, #16
 8009ad8:	fa13 f38e 	uxtah	r3, r3, lr
 8009adc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ae0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009aea:	45c1      	cmp	r9, r8
 8009aec:	f840 3b04 	str.w	r3, [r0], #4
 8009af0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009af4:	d2e8      	bcs.n	8009ac8 <quorem+0xb0>
 8009af6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009afe:	b922      	cbnz	r2, 8009b0a <quorem+0xf2>
 8009b00:	3b04      	subs	r3, #4
 8009b02:	429d      	cmp	r5, r3
 8009b04:	461a      	mov	r2, r3
 8009b06:	d30a      	bcc.n	8009b1e <quorem+0x106>
 8009b08:	613c      	str	r4, [r7, #16]
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	b003      	add	sp, #12
 8009b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b12:	6812      	ldr	r2, [r2, #0]
 8009b14:	3b04      	subs	r3, #4
 8009b16:	2a00      	cmp	r2, #0
 8009b18:	d1cc      	bne.n	8009ab4 <quorem+0x9c>
 8009b1a:	3c01      	subs	r4, #1
 8009b1c:	e7c7      	b.n	8009aae <quorem+0x96>
 8009b1e:	6812      	ldr	r2, [r2, #0]
 8009b20:	3b04      	subs	r3, #4
 8009b22:	2a00      	cmp	r2, #0
 8009b24:	d1f0      	bne.n	8009b08 <quorem+0xf0>
 8009b26:	3c01      	subs	r4, #1
 8009b28:	e7eb      	b.n	8009b02 <quorem+0xea>
 8009b2a:	2000      	movs	r0, #0
 8009b2c:	e7ee      	b.n	8009b0c <quorem+0xf4>
	...

08009b30 <_dtoa_r>:
 8009b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b34:	ed2d 8b04 	vpush	{d8-d9}
 8009b38:	ec57 6b10 	vmov	r6, r7, d0
 8009b3c:	b093      	sub	sp, #76	; 0x4c
 8009b3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b44:	9106      	str	r1, [sp, #24]
 8009b46:	ee10 aa10 	vmov	sl, s0
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b50:	46bb      	mov	fp, r7
 8009b52:	b975      	cbnz	r5, 8009b72 <_dtoa_r+0x42>
 8009b54:	2010      	movs	r0, #16
 8009b56:	f000 fdeb 	bl	800a730 <malloc>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	6260      	str	r0, [r4, #36]	; 0x24
 8009b5e:	b920      	cbnz	r0, 8009b6a <_dtoa_r+0x3a>
 8009b60:	4ba7      	ldr	r3, [pc, #668]	; (8009e00 <_dtoa_r+0x2d0>)
 8009b62:	21ea      	movs	r1, #234	; 0xea
 8009b64:	48a7      	ldr	r0, [pc, #668]	; (8009e04 <_dtoa_r+0x2d4>)
 8009b66:	f7ff ff39 	bl	80099dc <__assert_func>
 8009b6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b6e:	6005      	str	r5, [r0, #0]
 8009b70:	60c5      	str	r5, [r0, #12]
 8009b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b74:	6819      	ldr	r1, [r3, #0]
 8009b76:	b151      	cbz	r1, 8009b8e <_dtoa_r+0x5e>
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	604a      	str	r2, [r1, #4]
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	4093      	lsls	r3, r2
 8009b80:	608b      	str	r3, [r1, #8]
 8009b82:	4620      	mov	r0, r4
 8009b84:	f7fe ffe8 	bl	8008b58 <_Bfree>
 8009b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	1e3b      	subs	r3, r7, #0
 8009b90:	bfaa      	itet	ge
 8009b92:	2300      	movge	r3, #0
 8009b94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009b98:	f8c8 3000 	strge.w	r3, [r8]
 8009b9c:	4b9a      	ldr	r3, [pc, #616]	; (8009e08 <_dtoa_r+0x2d8>)
 8009b9e:	bfbc      	itt	lt
 8009ba0:	2201      	movlt	r2, #1
 8009ba2:	f8c8 2000 	strlt.w	r2, [r8]
 8009ba6:	ea33 030b 	bics.w	r3, r3, fp
 8009baa:	d11b      	bne.n	8009be4 <_dtoa_r+0xb4>
 8009bac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bae:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bb8:	4333      	orrs	r3, r6
 8009bba:	f000 8592 	beq.w	800a6e2 <_dtoa_r+0xbb2>
 8009bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bc0:	b963      	cbnz	r3, 8009bdc <_dtoa_r+0xac>
 8009bc2:	4b92      	ldr	r3, [pc, #584]	; (8009e0c <_dtoa_r+0x2dc>)
 8009bc4:	e022      	b.n	8009c0c <_dtoa_r+0xdc>
 8009bc6:	4b92      	ldr	r3, [pc, #584]	; (8009e10 <_dtoa_r+0x2e0>)
 8009bc8:	9301      	str	r3, [sp, #4]
 8009bca:	3308      	adds	r3, #8
 8009bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bce:	6013      	str	r3, [r2, #0]
 8009bd0:	9801      	ldr	r0, [sp, #4]
 8009bd2:	b013      	add	sp, #76	; 0x4c
 8009bd4:	ecbd 8b04 	vpop	{d8-d9}
 8009bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bdc:	4b8b      	ldr	r3, [pc, #556]	; (8009e0c <_dtoa_r+0x2dc>)
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	3303      	adds	r3, #3
 8009be2:	e7f3      	b.n	8009bcc <_dtoa_r+0x9c>
 8009be4:	2200      	movs	r2, #0
 8009be6:	2300      	movs	r3, #0
 8009be8:	4650      	mov	r0, sl
 8009bea:	4659      	mov	r1, fp
 8009bec:	f7f6 ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bf0:	ec4b ab19 	vmov	d9, sl, fp
 8009bf4:	4680      	mov	r8, r0
 8009bf6:	b158      	cbz	r0, 8009c10 <_dtoa_r+0xe0>
 8009bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 856b 	beq.w	800a6dc <_dtoa_r+0xbac>
 8009c06:	4883      	ldr	r0, [pc, #524]	; (8009e14 <_dtoa_r+0x2e4>)
 8009c08:	6018      	str	r0, [r3, #0]
 8009c0a:	1e43      	subs	r3, r0, #1
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	e7df      	b.n	8009bd0 <_dtoa_r+0xa0>
 8009c10:	ec4b ab10 	vmov	d0, sl, fp
 8009c14:	aa10      	add	r2, sp, #64	; 0x40
 8009c16:	a911      	add	r1, sp, #68	; 0x44
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f7ff fa85 	bl	8009128 <__d2b>
 8009c1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009c22:	ee08 0a10 	vmov	s16, r0
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	f000 8084 	beq.w	8009d34 <_dtoa_r+0x204>
 8009c2c:	ee19 3a90 	vmov	r3, s19
 8009c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009c38:	4656      	mov	r6, sl
 8009c3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009c3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009c46:	4b74      	ldr	r3, [pc, #464]	; (8009e18 <_dtoa_r+0x2e8>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	f7f6 fb1b 	bl	8000288 <__aeabi_dsub>
 8009c52:	a365      	add	r3, pc, #404	; (adr r3, 8009de8 <_dtoa_r+0x2b8>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	f7f6 fcce 	bl	80005f8 <__aeabi_dmul>
 8009c5c:	a364      	add	r3, pc, #400	; (adr r3, 8009df0 <_dtoa_r+0x2c0>)
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	f7f6 fb13 	bl	800028c <__adddf3>
 8009c66:	4606      	mov	r6, r0
 8009c68:	4628      	mov	r0, r5
 8009c6a:	460f      	mov	r7, r1
 8009c6c:	f7f6 fc5a 	bl	8000524 <__aeabi_i2d>
 8009c70:	a361      	add	r3, pc, #388	; (adr r3, 8009df8 <_dtoa_r+0x2c8>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 fcbf 	bl	80005f8 <__aeabi_dmul>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4630      	mov	r0, r6
 8009c80:	4639      	mov	r1, r7
 8009c82:	f7f6 fb03 	bl	800028c <__adddf3>
 8009c86:	4606      	mov	r6, r0
 8009c88:	460f      	mov	r7, r1
 8009c8a:	f7f6 ff4f 	bl	8000b2c <__aeabi_d2iz>
 8009c8e:	2200      	movs	r2, #0
 8009c90:	9000      	str	r0, [sp, #0]
 8009c92:	2300      	movs	r3, #0
 8009c94:	4630      	mov	r0, r6
 8009c96:	4639      	mov	r1, r7
 8009c98:	f7f6 ff20 	bl	8000adc <__aeabi_dcmplt>
 8009c9c:	b150      	cbz	r0, 8009cb4 <_dtoa_r+0x184>
 8009c9e:	9800      	ldr	r0, [sp, #0]
 8009ca0:	f7f6 fc40 	bl	8000524 <__aeabi_i2d>
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	463b      	mov	r3, r7
 8009ca8:	f7f6 ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cac:	b910      	cbnz	r0, 8009cb4 <_dtoa_r+0x184>
 8009cae:	9b00      	ldr	r3, [sp, #0]
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	9b00      	ldr	r3, [sp, #0]
 8009cb6:	2b16      	cmp	r3, #22
 8009cb8:	d85a      	bhi.n	8009d70 <_dtoa_r+0x240>
 8009cba:	9a00      	ldr	r2, [sp, #0]
 8009cbc:	4b57      	ldr	r3, [pc, #348]	; (8009e1c <_dtoa_r+0x2ec>)
 8009cbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	ec51 0b19 	vmov	r0, r1, d9
 8009cca:	f7f6 ff07 	bl	8000adc <__aeabi_dcmplt>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d050      	beq.n	8009d74 <_dtoa_r+0x244>
 8009cd2:	9b00      	ldr	r3, [sp, #0]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cde:	1b5d      	subs	r5, r3, r5
 8009ce0:	1e6b      	subs	r3, r5, #1
 8009ce2:	9305      	str	r3, [sp, #20]
 8009ce4:	bf45      	ittet	mi
 8009ce6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009cea:	9304      	strmi	r3, [sp, #16]
 8009cec:	2300      	movpl	r3, #0
 8009cee:	2300      	movmi	r3, #0
 8009cf0:	bf4c      	ite	mi
 8009cf2:	9305      	strmi	r3, [sp, #20]
 8009cf4:	9304      	strpl	r3, [sp, #16]
 8009cf6:	9b00      	ldr	r3, [sp, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	db3d      	blt.n	8009d78 <_dtoa_r+0x248>
 8009cfc:	9b05      	ldr	r3, [sp, #20]
 8009cfe:	9a00      	ldr	r2, [sp, #0]
 8009d00:	920a      	str	r2, [sp, #40]	; 0x28
 8009d02:	4413      	add	r3, r2
 8009d04:	9305      	str	r3, [sp, #20]
 8009d06:	2300      	movs	r3, #0
 8009d08:	9307      	str	r3, [sp, #28]
 8009d0a:	9b06      	ldr	r3, [sp, #24]
 8009d0c:	2b09      	cmp	r3, #9
 8009d0e:	f200 8089 	bhi.w	8009e24 <_dtoa_r+0x2f4>
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	bfc4      	itt	gt
 8009d16:	3b04      	subgt	r3, #4
 8009d18:	9306      	strgt	r3, [sp, #24]
 8009d1a:	9b06      	ldr	r3, [sp, #24]
 8009d1c:	f1a3 0302 	sub.w	r3, r3, #2
 8009d20:	bfcc      	ite	gt
 8009d22:	2500      	movgt	r5, #0
 8009d24:	2501      	movle	r5, #1
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	f200 8087 	bhi.w	8009e3a <_dtoa_r+0x30a>
 8009d2c:	e8df f003 	tbb	[pc, r3]
 8009d30:	59383a2d 	.word	0x59383a2d
 8009d34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009d38:	441d      	add	r5, r3
 8009d3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d3e:	2b20      	cmp	r3, #32
 8009d40:	bfc1      	itttt	gt
 8009d42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009d4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009d4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d52:	bfda      	itte	le
 8009d54:	f1c3 0320 	rsble	r3, r3, #32
 8009d58:	fa06 f003 	lslle.w	r0, r6, r3
 8009d5c:	4318      	orrgt	r0, r3
 8009d5e:	f7f6 fbd1 	bl	8000504 <__aeabi_ui2d>
 8009d62:	2301      	movs	r3, #1
 8009d64:	4606      	mov	r6, r0
 8009d66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009d6a:	3d01      	subs	r5, #1
 8009d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d6e:	e76a      	b.n	8009c46 <_dtoa_r+0x116>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e7b2      	b.n	8009cda <_dtoa_r+0x1aa>
 8009d74:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d76:	e7b1      	b.n	8009cdc <_dtoa_r+0x1ac>
 8009d78:	9b04      	ldr	r3, [sp, #16]
 8009d7a:	9a00      	ldr	r2, [sp, #0]
 8009d7c:	1a9b      	subs	r3, r3, r2
 8009d7e:	9304      	str	r3, [sp, #16]
 8009d80:	4253      	negs	r3, r2
 8009d82:	9307      	str	r3, [sp, #28]
 8009d84:	2300      	movs	r3, #0
 8009d86:	930a      	str	r3, [sp, #40]	; 0x28
 8009d88:	e7bf      	b.n	8009d0a <_dtoa_r+0x1da>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	9308      	str	r3, [sp, #32]
 8009d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	dc55      	bgt.n	8009e40 <_dtoa_r+0x310>
 8009d94:	2301      	movs	r3, #1
 8009d96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d9e:	e00c      	b.n	8009dba <_dtoa_r+0x28a>
 8009da0:	2301      	movs	r3, #1
 8009da2:	e7f3      	b.n	8009d8c <_dtoa_r+0x25c>
 8009da4:	2300      	movs	r3, #0
 8009da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009da8:	9308      	str	r3, [sp, #32]
 8009daa:	9b00      	ldr	r3, [sp, #0]
 8009dac:	4413      	add	r3, r2
 8009dae:	9302      	str	r3, [sp, #8]
 8009db0:	3301      	adds	r3, #1
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	bfb8      	it	lt
 8009db8:	2301      	movlt	r3, #1
 8009dba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	6042      	str	r2, [r0, #4]
 8009dc0:	2204      	movs	r2, #4
 8009dc2:	f102 0614 	add.w	r6, r2, #20
 8009dc6:	429e      	cmp	r6, r3
 8009dc8:	6841      	ldr	r1, [r0, #4]
 8009dca:	d93d      	bls.n	8009e48 <_dtoa_r+0x318>
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f7fe fe83 	bl	8008ad8 <_Balloc>
 8009dd2:	9001      	str	r0, [sp, #4]
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d13b      	bne.n	8009e50 <_dtoa_r+0x320>
 8009dd8:	4b11      	ldr	r3, [pc, #68]	; (8009e20 <_dtoa_r+0x2f0>)
 8009dda:	4602      	mov	r2, r0
 8009ddc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009de0:	e6c0      	b.n	8009b64 <_dtoa_r+0x34>
 8009de2:	2301      	movs	r3, #1
 8009de4:	e7df      	b.n	8009da6 <_dtoa_r+0x276>
 8009de6:	bf00      	nop
 8009de8:	636f4361 	.word	0x636f4361
 8009dec:	3fd287a7 	.word	0x3fd287a7
 8009df0:	8b60c8b3 	.word	0x8b60c8b3
 8009df4:	3fc68a28 	.word	0x3fc68a28
 8009df8:	509f79fb 	.word	0x509f79fb
 8009dfc:	3fd34413 	.word	0x3fd34413
 8009e00:	0800b478 	.word	0x0800b478
 8009e04:	0800b67a 	.word	0x0800b67a
 8009e08:	7ff00000 	.word	0x7ff00000
 8009e0c:	0800b674 	.word	0x0800b674
 8009e10:	0800b66b 	.word	0x0800b66b
 8009e14:	0800b679 	.word	0x0800b679
 8009e18:	3ff80000 	.word	0x3ff80000
 8009e1c:	0800b528 	.word	0x0800b528
 8009e20:	0800b4eb 	.word	0x0800b4eb
 8009e24:	2501      	movs	r5, #1
 8009e26:	2300      	movs	r3, #0
 8009e28:	9306      	str	r3, [sp, #24]
 8009e2a:	9508      	str	r5, [sp, #32]
 8009e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e34:	2200      	movs	r2, #0
 8009e36:	2312      	movs	r3, #18
 8009e38:	e7b0      	b.n	8009d9c <_dtoa_r+0x26c>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	9308      	str	r3, [sp, #32]
 8009e3e:	e7f5      	b.n	8009e2c <_dtoa_r+0x2fc>
 8009e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e46:	e7b8      	b.n	8009dba <_dtoa_r+0x28a>
 8009e48:	3101      	adds	r1, #1
 8009e4a:	6041      	str	r1, [r0, #4]
 8009e4c:	0052      	lsls	r2, r2, #1
 8009e4e:	e7b8      	b.n	8009dc2 <_dtoa_r+0x292>
 8009e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e52:	9a01      	ldr	r2, [sp, #4]
 8009e54:	601a      	str	r2, [r3, #0]
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	2b0e      	cmp	r3, #14
 8009e5a:	f200 809d 	bhi.w	8009f98 <_dtoa_r+0x468>
 8009e5e:	2d00      	cmp	r5, #0
 8009e60:	f000 809a 	beq.w	8009f98 <_dtoa_r+0x468>
 8009e64:	9b00      	ldr	r3, [sp, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	dd32      	ble.n	8009ed0 <_dtoa_r+0x3a0>
 8009e6a:	4ab7      	ldr	r2, [pc, #732]	; (800a148 <_dtoa_r+0x618>)
 8009e6c:	f003 030f 	and.w	r3, r3, #15
 8009e70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e78:	9b00      	ldr	r3, [sp, #0]
 8009e7a:	05d8      	lsls	r0, r3, #23
 8009e7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009e80:	d516      	bpl.n	8009eb0 <_dtoa_r+0x380>
 8009e82:	4bb2      	ldr	r3, [pc, #712]	; (800a14c <_dtoa_r+0x61c>)
 8009e84:	ec51 0b19 	vmov	r0, r1, d9
 8009e88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e8c:	f7f6 fcde 	bl	800084c <__aeabi_ddiv>
 8009e90:	f007 070f 	and.w	r7, r7, #15
 8009e94:	4682      	mov	sl, r0
 8009e96:	468b      	mov	fp, r1
 8009e98:	2503      	movs	r5, #3
 8009e9a:	4eac      	ldr	r6, [pc, #688]	; (800a14c <_dtoa_r+0x61c>)
 8009e9c:	b957      	cbnz	r7, 8009eb4 <_dtoa_r+0x384>
 8009e9e:	4642      	mov	r2, r8
 8009ea0:	464b      	mov	r3, r9
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	4659      	mov	r1, fp
 8009ea6:	f7f6 fcd1 	bl	800084c <__aeabi_ddiv>
 8009eaa:	4682      	mov	sl, r0
 8009eac:	468b      	mov	fp, r1
 8009eae:	e028      	b.n	8009f02 <_dtoa_r+0x3d2>
 8009eb0:	2502      	movs	r5, #2
 8009eb2:	e7f2      	b.n	8009e9a <_dtoa_r+0x36a>
 8009eb4:	07f9      	lsls	r1, r7, #31
 8009eb6:	d508      	bpl.n	8009eca <_dtoa_r+0x39a>
 8009eb8:	4640      	mov	r0, r8
 8009eba:	4649      	mov	r1, r9
 8009ebc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ec0:	f7f6 fb9a 	bl	80005f8 <__aeabi_dmul>
 8009ec4:	3501      	adds	r5, #1
 8009ec6:	4680      	mov	r8, r0
 8009ec8:	4689      	mov	r9, r1
 8009eca:	107f      	asrs	r7, r7, #1
 8009ecc:	3608      	adds	r6, #8
 8009ece:	e7e5      	b.n	8009e9c <_dtoa_r+0x36c>
 8009ed0:	f000 809b 	beq.w	800a00a <_dtoa_r+0x4da>
 8009ed4:	9b00      	ldr	r3, [sp, #0]
 8009ed6:	4f9d      	ldr	r7, [pc, #628]	; (800a14c <_dtoa_r+0x61c>)
 8009ed8:	425e      	negs	r6, r3
 8009eda:	4b9b      	ldr	r3, [pc, #620]	; (800a148 <_dtoa_r+0x618>)
 8009edc:	f006 020f 	and.w	r2, r6, #15
 8009ee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	ec51 0b19 	vmov	r0, r1, d9
 8009eec:	f7f6 fb84 	bl	80005f8 <__aeabi_dmul>
 8009ef0:	1136      	asrs	r6, r6, #4
 8009ef2:	4682      	mov	sl, r0
 8009ef4:	468b      	mov	fp, r1
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	2502      	movs	r5, #2
 8009efa:	2e00      	cmp	r6, #0
 8009efc:	d17a      	bne.n	8009ff4 <_dtoa_r+0x4c4>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1d3      	bne.n	8009eaa <_dtoa_r+0x37a>
 8009f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 8082 	beq.w	800a00e <_dtoa_r+0x4de>
 8009f0a:	4b91      	ldr	r3, [pc, #580]	; (800a150 <_dtoa_r+0x620>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	4650      	mov	r0, sl
 8009f10:	4659      	mov	r1, fp
 8009f12:	f7f6 fde3 	bl	8000adc <__aeabi_dcmplt>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d079      	beq.n	800a00e <_dtoa_r+0x4de>
 8009f1a:	9b03      	ldr	r3, [sp, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d076      	beq.n	800a00e <_dtoa_r+0x4de>
 8009f20:	9b02      	ldr	r3, [sp, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	dd36      	ble.n	8009f94 <_dtoa_r+0x464>
 8009f26:	9b00      	ldr	r3, [sp, #0]
 8009f28:	4650      	mov	r0, sl
 8009f2a:	4659      	mov	r1, fp
 8009f2c:	1e5f      	subs	r7, r3, #1
 8009f2e:	2200      	movs	r2, #0
 8009f30:	4b88      	ldr	r3, [pc, #544]	; (800a154 <_dtoa_r+0x624>)
 8009f32:	f7f6 fb61 	bl	80005f8 <__aeabi_dmul>
 8009f36:	9e02      	ldr	r6, [sp, #8]
 8009f38:	4682      	mov	sl, r0
 8009f3a:	468b      	mov	fp, r1
 8009f3c:	3501      	adds	r5, #1
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f7f6 faf0 	bl	8000524 <__aeabi_i2d>
 8009f44:	4652      	mov	r2, sl
 8009f46:	465b      	mov	r3, fp
 8009f48:	f7f6 fb56 	bl	80005f8 <__aeabi_dmul>
 8009f4c:	4b82      	ldr	r3, [pc, #520]	; (800a158 <_dtoa_r+0x628>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f7f6 f99c 	bl	800028c <__adddf3>
 8009f54:	46d0      	mov	r8, sl
 8009f56:	46d9      	mov	r9, fp
 8009f58:	4682      	mov	sl, r0
 8009f5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	d158      	bne.n	800a014 <_dtoa_r+0x4e4>
 8009f62:	4b7e      	ldr	r3, [pc, #504]	; (800a15c <_dtoa_r+0x62c>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f7f6 f98d 	bl	8000288 <__aeabi_dsub>
 8009f6e:	4652      	mov	r2, sl
 8009f70:	465b      	mov	r3, fp
 8009f72:	4680      	mov	r8, r0
 8009f74:	4689      	mov	r9, r1
 8009f76:	f7f6 fdcf 	bl	8000b18 <__aeabi_dcmpgt>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	f040 8295 	bne.w	800a4aa <_dtoa_r+0x97a>
 8009f80:	4652      	mov	r2, sl
 8009f82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009f86:	4640      	mov	r0, r8
 8009f88:	4649      	mov	r1, r9
 8009f8a:	f7f6 fda7 	bl	8000adc <__aeabi_dcmplt>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	f040 8289 	bne.w	800a4a6 <_dtoa_r+0x976>
 8009f94:	ec5b ab19 	vmov	sl, fp, d9
 8009f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f2c0 8148 	blt.w	800a230 <_dtoa_r+0x700>
 8009fa0:	9a00      	ldr	r2, [sp, #0]
 8009fa2:	2a0e      	cmp	r2, #14
 8009fa4:	f300 8144 	bgt.w	800a230 <_dtoa_r+0x700>
 8009fa8:	4b67      	ldr	r3, [pc, #412]	; (800a148 <_dtoa_r+0x618>)
 8009faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f280 80d5 	bge.w	800a164 <_dtoa_r+0x634>
 8009fba:	9b03      	ldr	r3, [sp, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f300 80d1 	bgt.w	800a164 <_dtoa_r+0x634>
 8009fc2:	f040 826f 	bne.w	800a4a4 <_dtoa_r+0x974>
 8009fc6:	4b65      	ldr	r3, [pc, #404]	; (800a15c <_dtoa_r+0x62c>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	4640      	mov	r0, r8
 8009fcc:	4649      	mov	r1, r9
 8009fce:	f7f6 fb13 	bl	80005f8 <__aeabi_dmul>
 8009fd2:	4652      	mov	r2, sl
 8009fd4:	465b      	mov	r3, fp
 8009fd6:	f7f6 fd95 	bl	8000b04 <__aeabi_dcmpge>
 8009fda:	9e03      	ldr	r6, [sp, #12]
 8009fdc:	4637      	mov	r7, r6
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f040 8245 	bne.w	800a46e <_dtoa_r+0x93e>
 8009fe4:	9d01      	ldr	r5, [sp, #4]
 8009fe6:	2331      	movs	r3, #49	; 0x31
 8009fe8:	f805 3b01 	strb.w	r3, [r5], #1
 8009fec:	9b00      	ldr	r3, [sp, #0]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	e240      	b.n	800a476 <_dtoa_r+0x946>
 8009ff4:	07f2      	lsls	r2, r6, #31
 8009ff6:	d505      	bpl.n	800a004 <_dtoa_r+0x4d4>
 8009ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ffc:	f7f6 fafc 	bl	80005f8 <__aeabi_dmul>
 800a000:	3501      	adds	r5, #1
 800a002:	2301      	movs	r3, #1
 800a004:	1076      	asrs	r6, r6, #1
 800a006:	3708      	adds	r7, #8
 800a008:	e777      	b.n	8009efa <_dtoa_r+0x3ca>
 800a00a:	2502      	movs	r5, #2
 800a00c:	e779      	b.n	8009f02 <_dtoa_r+0x3d2>
 800a00e:	9f00      	ldr	r7, [sp, #0]
 800a010:	9e03      	ldr	r6, [sp, #12]
 800a012:	e794      	b.n	8009f3e <_dtoa_r+0x40e>
 800a014:	9901      	ldr	r1, [sp, #4]
 800a016:	4b4c      	ldr	r3, [pc, #304]	; (800a148 <_dtoa_r+0x618>)
 800a018:	4431      	add	r1, r6
 800a01a:	910d      	str	r1, [sp, #52]	; 0x34
 800a01c:	9908      	ldr	r1, [sp, #32]
 800a01e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a022:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a026:	2900      	cmp	r1, #0
 800a028:	d043      	beq.n	800a0b2 <_dtoa_r+0x582>
 800a02a:	494d      	ldr	r1, [pc, #308]	; (800a160 <_dtoa_r+0x630>)
 800a02c:	2000      	movs	r0, #0
 800a02e:	f7f6 fc0d 	bl	800084c <__aeabi_ddiv>
 800a032:	4652      	mov	r2, sl
 800a034:	465b      	mov	r3, fp
 800a036:	f7f6 f927 	bl	8000288 <__aeabi_dsub>
 800a03a:	9d01      	ldr	r5, [sp, #4]
 800a03c:	4682      	mov	sl, r0
 800a03e:	468b      	mov	fp, r1
 800a040:	4649      	mov	r1, r9
 800a042:	4640      	mov	r0, r8
 800a044:	f7f6 fd72 	bl	8000b2c <__aeabi_d2iz>
 800a048:	4606      	mov	r6, r0
 800a04a:	f7f6 fa6b 	bl	8000524 <__aeabi_i2d>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4640      	mov	r0, r8
 800a054:	4649      	mov	r1, r9
 800a056:	f7f6 f917 	bl	8000288 <__aeabi_dsub>
 800a05a:	3630      	adds	r6, #48	; 0x30
 800a05c:	f805 6b01 	strb.w	r6, [r5], #1
 800a060:	4652      	mov	r2, sl
 800a062:	465b      	mov	r3, fp
 800a064:	4680      	mov	r8, r0
 800a066:	4689      	mov	r9, r1
 800a068:	f7f6 fd38 	bl	8000adc <__aeabi_dcmplt>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d163      	bne.n	800a138 <_dtoa_r+0x608>
 800a070:	4642      	mov	r2, r8
 800a072:	464b      	mov	r3, r9
 800a074:	4936      	ldr	r1, [pc, #216]	; (800a150 <_dtoa_r+0x620>)
 800a076:	2000      	movs	r0, #0
 800a078:	f7f6 f906 	bl	8000288 <__aeabi_dsub>
 800a07c:	4652      	mov	r2, sl
 800a07e:	465b      	mov	r3, fp
 800a080:	f7f6 fd2c 	bl	8000adc <__aeabi_dcmplt>
 800a084:	2800      	cmp	r0, #0
 800a086:	f040 80b5 	bne.w	800a1f4 <_dtoa_r+0x6c4>
 800a08a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a08c:	429d      	cmp	r5, r3
 800a08e:	d081      	beq.n	8009f94 <_dtoa_r+0x464>
 800a090:	4b30      	ldr	r3, [pc, #192]	; (800a154 <_dtoa_r+0x624>)
 800a092:	2200      	movs	r2, #0
 800a094:	4650      	mov	r0, sl
 800a096:	4659      	mov	r1, fp
 800a098:	f7f6 faae 	bl	80005f8 <__aeabi_dmul>
 800a09c:	4b2d      	ldr	r3, [pc, #180]	; (800a154 <_dtoa_r+0x624>)
 800a09e:	4682      	mov	sl, r0
 800a0a0:	468b      	mov	fp, r1
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f7f6 faa6 	bl	80005f8 <__aeabi_dmul>
 800a0ac:	4680      	mov	r8, r0
 800a0ae:	4689      	mov	r9, r1
 800a0b0:	e7c6      	b.n	800a040 <_dtoa_r+0x510>
 800a0b2:	4650      	mov	r0, sl
 800a0b4:	4659      	mov	r1, fp
 800a0b6:	f7f6 fa9f 	bl	80005f8 <__aeabi_dmul>
 800a0ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0bc:	9d01      	ldr	r5, [sp, #4]
 800a0be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0c0:	4682      	mov	sl, r0
 800a0c2:	468b      	mov	fp, r1
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	f7f6 fd30 	bl	8000b2c <__aeabi_d2iz>
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	f7f6 fa29 	bl	8000524 <__aeabi_i2d>
 800a0d2:	3630      	adds	r6, #48	; 0x30
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4640      	mov	r0, r8
 800a0da:	4649      	mov	r1, r9
 800a0dc:	f7f6 f8d4 	bl	8000288 <__aeabi_dsub>
 800a0e0:	f805 6b01 	strb.w	r6, [r5], #1
 800a0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	4689      	mov	r9, r1
 800a0ec:	f04f 0200 	mov.w	r2, #0
 800a0f0:	d124      	bne.n	800a13c <_dtoa_r+0x60c>
 800a0f2:	4b1b      	ldr	r3, [pc, #108]	; (800a160 <_dtoa_r+0x630>)
 800a0f4:	4650      	mov	r0, sl
 800a0f6:	4659      	mov	r1, fp
 800a0f8:	f7f6 f8c8 	bl	800028c <__adddf3>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	4640      	mov	r0, r8
 800a102:	4649      	mov	r1, r9
 800a104:	f7f6 fd08 	bl	8000b18 <__aeabi_dcmpgt>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d173      	bne.n	800a1f4 <_dtoa_r+0x6c4>
 800a10c:	4652      	mov	r2, sl
 800a10e:	465b      	mov	r3, fp
 800a110:	4913      	ldr	r1, [pc, #76]	; (800a160 <_dtoa_r+0x630>)
 800a112:	2000      	movs	r0, #0
 800a114:	f7f6 f8b8 	bl	8000288 <__aeabi_dsub>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4640      	mov	r0, r8
 800a11e:	4649      	mov	r1, r9
 800a120:	f7f6 fcdc 	bl	8000adc <__aeabi_dcmplt>
 800a124:	2800      	cmp	r0, #0
 800a126:	f43f af35 	beq.w	8009f94 <_dtoa_r+0x464>
 800a12a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a12c:	1e6b      	subs	r3, r5, #1
 800a12e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a130:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a134:	2b30      	cmp	r3, #48	; 0x30
 800a136:	d0f8      	beq.n	800a12a <_dtoa_r+0x5fa>
 800a138:	9700      	str	r7, [sp, #0]
 800a13a:	e049      	b.n	800a1d0 <_dtoa_r+0x6a0>
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <_dtoa_r+0x624>)
 800a13e:	f7f6 fa5b 	bl	80005f8 <__aeabi_dmul>
 800a142:	4680      	mov	r8, r0
 800a144:	4689      	mov	r9, r1
 800a146:	e7bd      	b.n	800a0c4 <_dtoa_r+0x594>
 800a148:	0800b528 	.word	0x0800b528
 800a14c:	0800b500 	.word	0x0800b500
 800a150:	3ff00000 	.word	0x3ff00000
 800a154:	40240000 	.word	0x40240000
 800a158:	401c0000 	.word	0x401c0000
 800a15c:	40140000 	.word	0x40140000
 800a160:	3fe00000 	.word	0x3fe00000
 800a164:	9d01      	ldr	r5, [sp, #4]
 800a166:	4656      	mov	r6, sl
 800a168:	465f      	mov	r7, fp
 800a16a:	4642      	mov	r2, r8
 800a16c:	464b      	mov	r3, r9
 800a16e:	4630      	mov	r0, r6
 800a170:	4639      	mov	r1, r7
 800a172:	f7f6 fb6b 	bl	800084c <__aeabi_ddiv>
 800a176:	f7f6 fcd9 	bl	8000b2c <__aeabi_d2iz>
 800a17a:	4682      	mov	sl, r0
 800a17c:	f7f6 f9d2 	bl	8000524 <__aeabi_i2d>
 800a180:	4642      	mov	r2, r8
 800a182:	464b      	mov	r3, r9
 800a184:	f7f6 fa38 	bl	80005f8 <__aeabi_dmul>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4630      	mov	r0, r6
 800a18e:	4639      	mov	r1, r7
 800a190:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a194:	f7f6 f878 	bl	8000288 <__aeabi_dsub>
 800a198:	f805 6b01 	strb.w	r6, [r5], #1
 800a19c:	9e01      	ldr	r6, [sp, #4]
 800a19e:	9f03      	ldr	r7, [sp, #12]
 800a1a0:	1bae      	subs	r6, r5, r6
 800a1a2:	42b7      	cmp	r7, r6
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	d135      	bne.n	800a216 <_dtoa_r+0x6e6>
 800a1aa:	f7f6 f86f 	bl	800028c <__adddf3>
 800a1ae:	4642      	mov	r2, r8
 800a1b0:	464b      	mov	r3, r9
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	460f      	mov	r7, r1
 800a1b6:	f7f6 fcaf 	bl	8000b18 <__aeabi_dcmpgt>
 800a1ba:	b9d0      	cbnz	r0, 800a1f2 <_dtoa_r+0x6c2>
 800a1bc:	4642      	mov	r2, r8
 800a1be:	464b      	mov	r3, r9
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f7f6 fc80 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1c8:	b110      	cbz	r0, 800a1d0 <_dtoa_r+0x6a0>
 800a1ca:	f01a 0f01 	tst.w	sl, #1
 800a1ce:	d110      	bne.n	800a1f2 <_dtoa_r+0x6c2>
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	ee18 1a10 	vmov	r1, s16
 800a1d6:	f7fe fcbf 	bl	8008b58 <_Bfree>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	9800      	ldr	r0, [sp, #0]
 800a1de:	702b      	strb	r3, [r5, #0]
 800a1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	6018      	str	r0, [r3, #0]
 800a1e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f43f acf1 	beq.w	8009bd0 <_dtoa_r+0xa0>
 800a1ee:	601d      	str	r5, [r3, #0]
 800a1f0:	e4ee      	b.n	8009bd0 <_dtoa_r+0xa0>
 800a1f2:	9f00      	ldr	r7, [sp, #0]
 800a1f4:	462b      	mov	r3, r5
 800a1f6:	461d      	mov	r5, r3
 800a1f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1fc:	2a39      	cmp	r2, #57	; 0x39
 800a1fe:	d106      	bne.n	800a20e <_dtoa_r+0x6de>
 800a200:	9a01      	ldr	r2, [sp, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d1f7      	bne.n	800a1f6 <_dtoa_r+0x6c6>
 800a206:	9901      	ldr	r1, [sp, #4]
 800a208:	2230      	movs	r2, #48	; 0x30
 800a20a:	3701      	adds	r7, #1
 800a20c:	700a      	strb	r2, [r1, #0]
 800a20e:	781a      	ldrb	r2, [r3, #0]
 800a210:	3201      	adds	r2, #1
 800a212:	701a      	strb	r2, [r3, #0]
 800a214:	e790      	b.n	800a138 <_dtoa_r+0x608>
 800a216:	4ba6      	ldr	r3, [pc, #664]	; (800a4b0 <_dtoa_r+0x980>)
 800a218:	2200      	movs	r2, #0
 800a21a:	f7f6 f9ed 	bl	80005f8 <__aeabi_dmul>
 800a21e:	2200      	movs	r2, #0
 800a220:	2300      	movs	r3, #0
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	f7f6 fc4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d09d      	beq.n	800a16a <_dtoa_r+0x63a>
 800a22e:	e7cf      	b.n	800a1d0 <_dtoa_r+0x6a0>
 800a230:	9a08      	ldr	r2, [sp, #32]
 800a232:	2a00      	cmp	r2, #0
 800a234:	f000 80d7 	beq.w	800a3e6 <_dtoa_r+0x8b6>
 800a238:	9a06      	ldr	r2, [sp, #24]
 800a23a:	2a01      	cmp	r2, #1
 800a23c:	f300 80ba 	bgt.w	800a3b4 <_dtoa_r+0x884>
 800a240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a242:	2a00      	cmp	r2, #0
 800a244:	f000 80b2 	beq.w	800a3ac <_dtoa_r+0x87c>
 800a248:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a24c:	9e07      	ldr	r6, [sp, #28]
 800a24e:	9d04      	ldr	r5, [sp, #16]
 800a250:	9a04      	ldr	r2, [sp, #16]
 800a252:	441a      	add	r2, r3
 800a254:	9204      	str	r2, [sp, #16]
 800a256:	9a05      	ldr	r2, [sp, #20]
 800a258:	2101      	movs	r1, #1
 800a25a:	441a      	add	r2, r3
 800a25c:	4620      	mov	r0, r4
 800a25e:	9205      	str	r2, [sp, #20]
 800a260:	f7fe fd32 	bl	8008cc8 <__i2b>
 800a264:	4607      	mov	r7, r0
 800a266:	2d00      	cmp	r5, #0
 800a268:	dd0c      	ble.n	800a284 <_dtoa_r+0x754>
 800a26a:	9b05      	ldr	r3, [sp, #20]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	dd09      	ble.n	800a284 <_dtoa_r+0x754>
 800a270:	42ab      	cmp	r3, r5
 800a272:	9a04      	ldr	r2, [sp, #16]
 800a274:	bfa8      	it	ge
 800a276:	462b      	movge	r3, r5
 800a278:	1ad2      	subs	r2, r2, r3
 800a27a:	9204      	str	r2, [sp, #16]
 800a27c:	9a05      	ldr	r2, [sp, #20]
 800a27e:	1aed      	subs	r5, r5, r3
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	9305      	str	r3, [sp, #20]
 800a284:	9b07      	ldr	r3, [sp, #28]
 800a286:	b31b      	cbz	r3, 800a2d0 <_dtoa_r+0x7a0>
 800a288:	9b08      	ldr	r3, [sp, #32]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 80af 	beq.w	800a3ee <_dtoa_r+0x8be>
 800a290:	2e00      	cmp	r6, #0
 800a292:	dd13      	ble.n	800a2bc <_dtoa_r+0x78c>
 800a294:	4639      	mov	r1, r7
 800a296:	4632      	mov	r2, r6
 800a298:	4620      	mov	r0, r4
 800a29a:	f7fe fdd5 	bl	8008e48 <__pow5mult>
 800a29e:	ee18 2a10 	vmov	r2, s16
 800a2a2:	4601      	mov	r1, r0
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f7fe fd24 	bl	8008cf4 <__multiply>
 800a2ac:	ee18 1a10 	vmov	r1, s16
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f7fe fc50 	bl	8008b58 <_Bfree>
 800a2b8:	ee08 8a10 	vmov	s16, r8
 800a2bc:	9b07      	ldr	r3, [sp, #28]
 800a2be:	1b9a      	subs	r2, r3, r6
 800a2c0:	d006      	beq.n	800a2d0 <_dtoa_r+0x7a0>
 800a2c2:	ee18 1a10 	vmov	r1, s16
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f7fe fdbe 	bl	8008e48 <__pow5mult>
 800a2cc:	ee08 0a10 	vmov	s16, r0
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f7fe fcf8 	bl	8008cc8 <__i2b>
 800a2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	4606      	mov	r6, r0
 800a2de:	f340 8088 	ble.w	800a3f2 <_dtoa_r+0x8c2>
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f7fe fdae 	bl	8008e48 <__pow5mult>
 800a2ec:	9b06      	ldr	r3, [sp, #24]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	f340 8081 	ble.w	800a3f8 <_dtoa_r+0x8c8>
 800a2f6:	f04f 0800 	mov.w	r8, #0
 800a2fa:	6933      	ldr	r3, [r6, #16]
 800a2fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a300:	6918      	ldr	r0, [r3, #16]
 800a302:	f7fe fc91 	bl	8008c28 <__hi0bits>
 800a306:	f1c0 0020 	rsb	r0, r0, #32
 800a30a:	9b05      	ldr	r3, [sp, #20]
 800a30c:	4418      	add	r0, r3
 800a30e:	f010 001f 	ands.w	r0, r0, #31
 800a312:	f000 8092 	beq.w	800a43a <_dtoa_r+0x90a>
 800a316:	f1c0 0320 	rsb	r3, r0, #32
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	f340 808a 	ble.w	800a434 <_dtoa_r+0x904>
 800a320:	f1c0 001c 	rsb	r0, r0, #28
 800a324:	9b04      	ldr	r3, [sp, #16]
 800a326:	4403      	add	r3, r0
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	9b05      	ldr	r3, [sp, #20]
 800a32c:	4403      	add	r3, r0
 800a32e:	4405      	add	r5, r0
 800a330:	9305      	str	r3, [sp, #20]
 800a332:	9b04      	ldr	r3, [sp, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	dd07      	ble.n	800a348 <_dtoa_r+0x818>
 800a338:	ee18 1a10 	vmov	r1, s16
 800a33c:	461a      	mov	r2, r3
 800a33e:	4620      	mov	r0, r4
 800a340:	f7fe fddc 	bl	8008efc <__lshift>
 800a344:	ee08 0a10 	vmov	s16, r0
 800a348:	9b05      	ldr	r3, [sp, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	dd05      	ble.n	800a35a <_dtoa_r+0x82a>
 800a34e:	4631      	mov	r1, r6
 800a350:	461a      	mov	r2, r3
 800a352:	4620      	mov	r0, r4
 800a354:	f7fe fdd2 	bl	8008efc <__lshift>
 800a358:	4606      	mov	r6, r0
 800a35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d06e      	beq.n	800a43e <_dtoa_r+0x90e>
 800a360:	ee18 0a10 	vmov	r0, s16
 800a364:	4631      	mov	r1, r6
 800a366:	f7fe fe39 	bl	8008fdc <__mcmp>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	da67      	bge.n	800a43e <_dtoa_r+0x90e>
 800a36e:	9b00      	ldr	r3, [sp, #0]
 800a370:	3b01      	subs	r3, #1
 800a372:	ee18 1a10 	vmov	r1, s16
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	220a      	movs	r2, #10
 800a37a:	2300      	movs	r3, #0
 800a37c:	4620      	mov	r0, r4
 800a37e:	f7fe fc0d 	bl	8008b9c <__multadd>
 800a382:	9b08      	ldr	r3, [sp, #32]
 800a384:	ee08 0a10 	vmov	s16, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 81b1 	beq.w	800a6f0 <_dtoa_r+0xbc0>
 800a38e:	2300      	movs	r3, #0
 800a390:	4639      	mov	r1, r7
 800a392:	220a      	movs	r2, #10
 800a394:	4620      	mov	r0, r4
 800a396:	f7fe fc01 	bl	8008b9c <__multadd>
 800a39a:	9b02      	ldr	r3, [sp, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	4607      	mov	r7, r0
 800a3a0:	f300 808e 	bgt.w	800a4c0 <_dtoa_r+0x990>
 800a3a4:	9b06      	ldr	r3, [sp, #24]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	dc51      	bgt.n	800a44e <_dtoa_r+0x91e>
 800a3aa:	e089      	b.n	800a4c0 <_dtoa_r+0x990>
 800a3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a3b2:	e74b      	b.n	800a24c <_dtoa_r+0x71c>
 800a3b4:	9b03      	ldr	r3, [sp, #12]
 800a3b6:	1e5e      	subs	r6, r3, #1
 800a3b8:	9b07      	ldr	r3, [sp, #28]
 800a3ba:	42b3      	cmp	r3, r6
 800a3bc:	bfbf      	itttt	lt
 800a3be:	9b07      	ldrlt	r3, [sp, #28]
 800a3c0:	9607      	strlt	r6, [sp, #28]
 800a3c2:	1af2      	sublt	r2, r6, r3
 800a3c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a3c6:	bfb6      	itet	lt
 800a3c8:	189b      	addlt	r3, r3, r2
 800a3ca:	1b9e      	subge	r6, r3, r6
 800a3cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	bfb8      	it	lt
 800a3d2:	2600      	movlt	r6, #0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bfb7      	itett	lt
 800a3d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a3dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a3e0:	1a9d      	sublt	r5, r3, r2
 800a3e2:	2300      	movlt	r3, #0
 800a3e4:	e734      	b.n	800a250 <_dtoa_r+0x720>
 800a3e6:	9e07      	ldr	r6, [sp, #28]
 800a3e8:	9d04      	ldr	r5, [sp, #16]
 800a3ea:	9f08      	ldr	r7, [sp, #32]
 800a3ec:	e73b      	b.n	800a266 <_dtoa_r+0x736>
 800a3ee:	9a07      	ldr	r2, [sp, #28]
 800a3f0:	e767      	b.n	800a2c2 <_dtoa_r+0x792>
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	dc18      	bgt.n	800a42a <_dtoa_r+0x8fa>
 800a3f8:	f1ba 0f00 	cmp.w	sl, #0
 800a3fc:	d115      	bne.n	800a42a <_dtoa_r+0x8fa>
 800a3fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a402:	b993      	cbnz	r3, 800a42a <_dtoa_r+0x8fa>
 800a404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a408:	0d1b      	lsrs	r3, r3, #20
 800a40a:	051b      	lsls	r3, r3, #20
 800a40c:	b183      	cbz	r3, 800a430 <_dtoa_r+0x900>
 800a40e:	9b04      	ldr	r3, [sp, #16]
 800a410:	3301      	adds	r3, #1
 800a412:	9304      	str	r3, [sp, #16]
 800a414:	9b05      	ldr	r3, [sp, #20]
 800a416:	3301      	adds	r3, #1
 800a418:	9305      	str	r3, [sp, #20]
 800a41a:	f04f 0801 	mov.w	r8, #1
 800a41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a420:	2b00      	cmp	r3, #0
 800a422:	f47f af6a 	bne.w	800a2fa <_dtoa_r+0x7ca>
 800a426:	2001      	movs	r0, #1
 800a428:	e76f      	b.n	800a30a <_dtoa_r+0x7da>
 800a42a:	f04f 0800 	mov.w	r8, #0
 800a42e:	e7f6      	b.n	800a41e <_dtoa_r+0x8ee>
 800a430:	4698      	mov	r8, r3
 800a432:	e7f4      	b.n	800a41e <_dtoa_r+0x8ee>
 800a434:	f43f af7d 	beq.w	800a332 <_dtoa_r+0x802>
 800a438:	4618      	mov	r0, r3
 800a43a:	301c      	adds	r0, #28
 800a43c:	e772      	b.n	800a324 <_dtoa_r+0x7f4>
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	dc37      	bgt.n	800a4b4 <_dtoa_r+0x984>
 800a444:	9b06      	ldr	r3, [sp, #24]
 800a446:	2b02      	cmp	r3, #2
 800a448:	dd34      	ble.n	800a4b4 <_dtoa_r+0x984>
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	9302      	str	r3, [sp, #8]
 800a44e:	9b02      	ldr	r3, [sp, #8]
 800a450:	b96b      	cbnz	r3, 800a46e <_dtoa_r+0x93e>
 800a452:	4631      	mov	r1, r6
 800a454:	2205      	movs	r2, #5
 800a456:	4620      	mov	r0, r4
 800a458:	f7fe fba0 	bl	8008b9c <__multadd>
 800a45c:	4601      	mov	r1, r0
 800a45e:	4606      	mov	r6, r0
 800a460:	ee18 0a10 	vmov	r0, s16
 800a464:	f7fe fdba 	bl	8008fdc <__mcmp>
 800a468:	2800      	cmp	r0, #0
 800a46a:	f73f adbb 	bgt.w	8009fe4 <_dtoa_r+0x4b4>
 800a46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a470:	9d01      	ldr	r5, [sp, #4]
 800a472:	43db      	mvns	r3, r3
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	f04f 0800 	mov.w	r8, #0
 800a47a:	4631      	mov	r1, r6
 800a47c:	4620      	mov	r0, r4
 800a47e:	f7fe fb6b 	bl	8008b58 <_Bfree>
 800a482:	2f00      	cmp	r7, #0
 800a484:	f43f aea4 	beq.w	800a1d0 <_dtoa_r+0x6a0>
 800a488:	f1b8 0f00 	cmp.w	r8, #0
 800a48c:	d005      	beq.n	800a49a <_dtoa_r+0x96a>
 800a48e:	45b8      	cmp	r8, r7
 800a490:	d003      	beq.n	800a49a <_dtoa_r+0x96a>
 800a492:	4641      	mov	r1, r8
 800a494:	4620      	mov	r0, r4
 800a496:	f7fe fb5f 	bl	8008b58 <_Bfree>
 800a49a:	4639      	mov	r1, r7
 800a49c:	4620      	mov	r0, r4
 800a49e:	f7fe fb5b 	bl	8008b58 <_Bfree>
 800a4a2:	e695      	b.n	800a1d0 <_dtoa_r+0x6a0>
 800a4a4:	2600      	movs	r6, #0
 800a4a6:	4637      	mov	r7, r6
 800a4a8:	e7e1      	b.n	800a46e <_dtoa_r+0x93e>
 800a4aa:	9700      	str	r7, [sp, #0]
 800a4ac:	4637      	mov	r7, r6
 800a4ae:	e599      	b.n	8009fe4 <_dtoa_r+0x4b4>
 800a4b0:	40240000 	.word	0x40240000
 800a4b4:	9b08      	ldr	r3, [sp, #32]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 80ca 	beq.w	800a650 <_dtoa_r+0xb20>
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	9302      	str	r3, [sp, #8]
 800a4c0:	2d00      	cmp	r5, #0
 800a4c2:	dd05      	ble.n	800a4d0 <_dtoa_r+0x9a0>
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	462a      	mov	r2, r5
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f7fe fd17 	bl	8008efc <__lshift>
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	f1b8 0f00 	cmp.w	r8, #0
 800a4d4:	d05b      	beq.n	800a58e <_dtoa_r+0xa5e>
 800a4d6:	6879      	ldr	r1, [r7, #4]
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f7fe fafd 	bl	8008ad8 <_Balloc>
 800a4de:	4605      	mov	r5, r0
 800a4e0:	b928      	cbnz	r0, 800a4ee <_dtoa_r+0x9be>
 800a4e2:	4b87      	ldr	r3, [pc, #540]	; (800a700 <_dtoa_r+0xbd0>)
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a4ea:	f7ff bb3b 	b.w	8009b64 <_dtoa_r+0x34>
 800a4ee:	693a      	ldr	r2, [r7, #16]
 800a4f0:	3202      	adds	r2, #2
 800a4f2:	0092      	lsls	r2, r2, #2
 800a4f4:	f107 010c 	add.w	r1, r7, #12
 800a4f8:	300c      	adds	r0, #12
 800a4fa:	f7fe f97d 	bl	80087f8 <memcpy>
 800a4fe:	2201      	movs	r2, #1
 800a500:	4629      	mov	r1, r5
 800a502:	4620      	mov	r0, r4
 800a504:	f7fe fcfa 	bl	8008efc <__lshift>
 800a508:	9b01      	ldr	r3, [sp, #4]
 800a50a:	f103 0901 	add.w	r9, r3, #1
 800a50e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a512:	4413      	add	r3, r2
 800a514:	9305      	str	r3, [sp, #20]
 800a516:	f00a 0301 	and.w	r3, sl, #1
 800a51a:	46b8      	mov	r8, r7
 800a51c:	9304      	str	r3, [sp, #16]
 800a51e:	4607      	mov	r7, r0
 800a520:	4631      	mov	r1, r6
 800a522:	ee18 0a10 	vmov	r0, s16
 800a526:	f7ff fa77 	bl	8009a18 <quorem>
 800a52a:	4641      	mov	r1, r8
 800a52c:	9002      	str	r0, [sp, #8]
 800a52e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a532:	ee18 0a10 	vmov	r0, s16
 800a536:	f7fe fd51 	bl	8008fdc <__mcmp>
 800a53a:	463a      	mov	r2, r7
 800a53c:	9003      	str	r0, [sp, #12]
 800a53e:	4631      	mov	r1, r6
 800a540:	4620      	mov	r0, r4
 800a542:	f7fe fd67 	bl	8009014 <__mdiff>
 800a546:	68c2      	ldr	r2, [r0, #12]
 800a548:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a54c:	4605      	mov	r5, r0
 800a54e:	bb02      	cbnz	r2, 800a592 <_dtoa_r+0xa62>
 800a550:	4601      	mov	r1, r0
 800a552:	ee18 0a10 	vmov	r0, s16
 800a556:	f7fe fd41 	bl	8008fdc <__mcmp>
 800a55a:	4602      	mov	r2, r0
 800a55c:	4629      	mov	r1, r5
 800a55e:	4620      	mov	r0, r4
 800a560:	9207      	str	r2, [sp, #28]
 800a562:	f7fe faf9 	bl	8008b58 <_Bfree>
 800a566:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a56a:	ea43 0102 	orr.w	r1, r3, r2
 800a56e:	9b04      	ldr	r3, [sp, #16]
 800a570:	430b      	orrs	r3, r1
 800a572:	464d      	mov	r5, r9
 800a574:	d10f      	bne.n	800a596 <_dtoa_r+0xa66>
 800a576:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a57a:	d02a      	beq.n	800a5d2 <_dtoa_r+0xaa2>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	dd02      	ble.n	800a588 <_dtoa_r+0xa58>
 800a582:	9b02      	ldr	r3, [sp, #8]
 800a584:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a588:	f88b a000 	strb.w	sl, [fp]
 800a58c:	e775      	b.n	800a47a <_dtoa_r+0x94a>
 800a58e:	4638      	mov	r0, r7
 800a590:	e7ba      	b.n	800a508 <_dtoa_r+0x9d8>
 800a592:	2201      	movs	r2, #1
 800a594:	e7e2      	b.n	800a55c <_dtoa_r+0xa2c>
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	db04      	blt.n	800a5a6 <_dtoa_r+0xa76>
 800a59c:	9906      	ldr	r1, [sp, #24]
 800a59e:	430b      	orrs	r3, r1
 800a5a0:	9904      	ldr	r1, [sp, #16]
 800a5a2:	430b      	orrs	r3, r1
 800a5a4:	d122      	bne.n	800a5ec <_dtoa_r+0xabc>
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	ddee      	ble.n	800a588 <_dtoa_r+0xa58>
 800a5aa:	ee18 1a10 	vmov	r1, s16
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f7fe fca3 	bl	8008efc <__lshift>
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	ee08 0a10 	vmov	s16, r0
 800a5bc:	f7fe fd0e 	bl	8008fdc <__mcmp>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	dc03      	bgt.n	800a5cc <_dtoa_r+0xa9c>
 800a5c4:	d1e0      	bne.n	800a588 <_dtoa_r+0xa58>
 800a5c6:	f01a 0f01 	tst.w	sl, #1
 800a5ca:	d0dd      	beq.n	800a588 <_dtoa_r+0xa58>
 800a5cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a5d0:	d1d7      	bne.n	800a582 <_dtoa_r+0xa52>
 800a5d2:	2339      	movs	r3, #57	; 0x39
 800a5d4:	f88b 3000 	strb.w	r3, [fp]
 800a5d8:	462b      	mov	r3, r5
 800a5da:	461d      	mov	r5, r3
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5e2:	2a39      	cmp	r2, #57	; 0x39
 800a5e4:	d071      	beq.n	800a6ca <_dtoa_r+0xb9a>
 800a5e6:	3201      	adds	r2, #1
 800a5e8:	701a      	strb	r2, [r3, #0]
 800a5ea:	e746      	b.n	800a47a <_dtoa_r+0x94a>
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	dd07      	ble.n	800a600 <_dtoa_r+0xad0>
 800a5f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a5f4:	d0ed      	beq.n	800a5d2 <_dtoa_r+0xaa2>
 800a5f6:	f10a 0301 	add.w	r3, sl, #1
 800a5fa:	f88b 3000 	strb.w	r3, [fp]
 800a5fe:	e73c      	b.n	800a47a <_dtoa_r+0x94a>
 800a600:	9b05      	ldr	r3, [sp, #20]
 800a602:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a606:	4599      	cmp	r9, r3
 800a608:	d047      	beq.n	800a69a <_dtoa_r+0xb6a>
 800a60a:	ee18 1a10 	vmov	r1, s16
 800a60e:	2300      	movs	r3, #0
 800a610:	220a      	movs	r2, #10
 800a612:	4620      	mov	r0, r4
 800a614:	f7fe fac2 	bl	8008b9c <__multadd>
 800a618:	45b8      	cmp	r8, r7
 800a61a:	ee08 0a10 	vmov	s16, r0
 800a61e:	f04f 0300 	mov.w	r3, #0
 800a622:	f04f 020a 	mov.w	r2, #10
 800a626:	4641      	mov	r1, r8
 800a628:	4620      	mov	r0, r4
 800a62a:	d106      	bne.n	800a63a <_dtoa_r+0xb0a>
 800a62c:	f7fe fab6 	bl	8008b9c <__multadd>
 800a630:	4680      	mov	r8, r0
 800a632:	4607      	mov	r7, r0
 800a634:	f109 0901 	add.w	r9, r9, #1
 800a638:	e772      	b.n	800a520 <_dtoa_r+0x9f0>
 800a63a:	f7fe faaf 	bl	8008b9c <__multadd>
 800a63e:	4639      	mov	r1, r7
 800a640:	4680      	mov	r8, r0
 800a642:	2300      	movs	r3, #0
 800a644:	220a      	movs	r2, #10
 800a646:	4620      	mov	r0, r4
 800a648:	f7fe faa8 	bl	8008b9c <__multadd>
 800a64c:	4607      	mov	r7, r0
 800a64e:	e7f1      	b.n	800a634 <_dtoa_r+0xb04>
 800a650:	9b03      	ldr	r3, [sp, #12]
 800a652:	9302      	str	r3, [sp, #8]
 800a654:	9d01      	ldr	r5, [sp, #4]
 800a656:	ee18 0a10 	vmov	r0, s16
 800a65a:	4631      	mov	r1, r6
 800a65c:	f7ff f9dc 	bl	8009a18 <quorem>
 800a660:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a664:	9b01      	ldr	r3, [sp, #4]
 800a666:	f805 ab01 	strb.w	sl, [r5], #1
 800a66a:	1aea      	subs	r2, r5, r3
 800a66c:	9b02      	ldr	r3, [sp, #8]
 800a66e:	4293      	cmp	r3, r2
 800a670:	dd09      	ble.n	800a686 <_dtoa_r+0xb56>
 800a672:	ee18 1a10 	vmov	r1, s16
 800a676:	2300      	movs	r3, #0
 800a678:	220a      	movs	r2, #10
 800a67a:	4620      	mov	r0, r4
 800a67c:	f7fe fa8e 	bl	8008b9c <__multadd>
 800a680:	ee08 0a10 	vmov	s16, r0
 800a684:	e7e7      	b.n	800a656 <_dtoa_r+0xb26>
 800a686:	9b02      	ldr	r3, [sp, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	bfc8      	it	gt
 800a68c:	461d      	movgt	r5, r3
 800a68e:	9b01      	ldr	r3, [sp, #4]
 800a690:	bfd8      	it	le
 800a692:	2501      	movle	r5, #1
 800a694:	441d      	add	r5, r3
 800a696:	f04f 0800 	mov.w	r8, #0
 800a69a:	ee18 1a10 	vmov	r1, s16
 800a69e:	2201      	movs	r2, #1
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f7fe fc2b 	bl	8008efc <__lshift>
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	ee08 0a10 	vmov	s16, r0
 800a6ac:	f7fe fc96 	bl	8008fdc <__mcmp>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	dc91      	bgt.n	800a5d8 <_dtoa_r+0xaa8>
 800a6b4:	d102      	bne.n	800a6bc <_dtoa_r+0xb8c>
 800a6b6:	f01a 0f01 	tst.w	sl, #1
 800a6ba:	d18d      	bne.n	800a5d8 <_dtoa_r+0xaa8>
 800a6bc:	462b      	mov	r3, r5
 800a6be:	461d      	mov	r5, r3
 800a6c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6c4:	2a30      	cmp	r2, #48	; 0x30
 800a6c6:	d0fa      	beq.n	800a6be <_dtoa_r+0xb8e>
 800a6c8:	e6d7      	b.n	800a47a <_dtoa_r+0x94a>
 800a6ca:	9a01      	ldr	r2, [sp, #4]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d184      	bne.n	800a5da <_dtoa_r+0xaaa>
 800a6d0:	9b00      	ldr	r3, [sp, #0]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	2331      	movs	r3, #49	; 0x31
 800a6d8:	7013      	strb	r3, [r2, #0]
 800a6da:	e6ce      	b.n	800a47a <_dtoa_r+0x94a>
 800a6dc:	4b09      	ldr	r3, [pc, #36]	; (800a704 <_dtoa_r+0xbd4>)
 800a6de:	f7ff ba95 	b.w	8009c0c <_dtoa_r+0xdc>
 800a6e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f47f aa6e 	bne.w	8009bc6 <_dtoa_r+0x96>
 800a6ea:	4b07      	ldr	r3, [pc, #28]	; (800a708 <_dtoa_r+0xbd8>)
 800a6ec:	f7ff ba8e 	b.w	8009c0c <_dtoa_r+0xdc>
 800a6f0:	9b02      	ldr	r3, [sp, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	dcae      	bgt.n	800a654 <_dtoa_r+0xb24>
 800a6f6:	9b06      	ldr	r3, [sp, #24]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	f73f aea8 	bgt.w	800a44e <_dtoa_r+0x91e>
 800a6fe:	e7a9      	b.n	800a654 <_dtoa_r+0xb24>
 800a700:	0800b4eb 	.word	0x0800b4eb
 800a704:	0800b678 	.word	0x0800b678
 800a708:	0800b66b 	.word	0x0800b66b

0800a70c <fiprintf>:
 800a70c:	b40e      	push	{r1, r2, r3}
 800a70e:	b503      	push	{r0, r1, lr}
 800a710:	4601      	mov	r1, r0
 800a712:	ab03      	add	r3, sp, #12
 800a714:	4805      	ldr	r0, [pc, #20]	; (800a72c <fiprintf+0x20>)
 800a716:	f853 2b04 	ldr.w	r2, [r3], #4
 800a71a:	6800      	ldr	r0, [r0, #0]
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	f000 f8b3 	bl	800a888 <_vfiprintf_r>
 800a722:	b002      	add	sp, #8
 800a724:	f85d eb04 	ldr.w	lr, [sp], #4
 800a728:	b003      	add	sp, #12
 800a72a:	4770      	bx	lr
 800a72c:	20000010 	.word	0x20000010

0800a730 <malloc>:
 800a730:	4b02      	ldr	r3, [pc, #8]	; (800a73c <malloc+0xc>)
 800a732:	4601      	mov	r1, r0
 800a734:	6818      	ldr	r0, [r3, #0]
 800a736:	f7fe bda7 	b.w	8009288 <_malloc_r>
 800a73a:	bf00      	nop
 800a73c:	20000010 	.word	0x20000010

0800a740 <memmove>:
 800a740:	4288      	cmp	r0, r1
 800a742:	b510      	push	{r4, lr}
 800a744:	eb01 0402 	add.w	r4, r1, r2
 800a748:	d902      	bls.n	800a750 <memmove+0x10>
 800a74a:	4284      	cmp	r4, r0
 800a74c:	4623      	mov	r3, r4
 800a74e:	d807      	bhi.n	800a760 <memmove+0x20>
 800a750:	1e43      	subs	r3, r0, #1
 800a752:	42a1      	cmp	r1, r4
 800a754:	d008      	beq.n	800a768 <memmove+0x28>
 800a756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a75a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a75e:	e7f8      	b.n	800a752 <memmove+0x12>
 800a760:	4402      	add	r2, r0
 800a762:	4601      	mov	r1, r0
 800a764:	428a      	cmp	r2, r1
 800a766:	d100      	bne.n	800a76a <memmove+0x2a>
 800a768:	bd10      	pop	{r4, pc}
 800a76a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a76e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a772:	e7f7      	b.n	800a764 <memmove+0x24>

0800a774 <__malloc_lock>:
 800a774:	4801      	ldr	r0, [pc, #4]	; (800a77c <__malloc_lock+0x8>)
 800a776:	f000 bc37 	b.w	800afe8 <__retarget_lock_acquire_recursive>
 800a77a:	bf00      	nop
 800a77c:	2000128c 	.word	0x2000128c

0800a780 <__malloc_unlock>:
 800a780:	4801      	ldr	r0, [pc, #4]	; (800a788 <__malloc_unlock+0x8>)
 800a782:	f000 bc32 	b.w	800afea <__retarget_lock_release_recursive>
 800a786:	bf00      	nop
 800a788:	2000128c 	.word	0x2000128c

0800a78c <_free_r>:
 800a78c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a78e:	2900      	cmp	r1, #0
 800a790:	d044      	beq.n	800a81c <_free_r+0x90>
 800a792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a796:	9001      	str	r0, [sp, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f1a1 0404 	sub.w	r4, r1, #4
 800a79e:	bfb8      	it	lt
 800a7a0:	18e4      	addlt	r4, r4, r3
 800a7a2:	f7ff ffe7 	bl	800a774 <__malloc_lock>
 800a7a6:	4a1e      	ldr	r2, [pc, #120]	; (800a820 <_free_r+0x94>)
 800a7a8:	9801      	ldr	r0, [sp, #4]
 800a7aa:	6813      	ldr	r3, [r2, #0]
 800a7ac:	b933      	cbnz	r3, 800a7bc <_free_r+0x30>
 800a7ae:	6063      	str	r3, [r4, #4]
 800a7b0:	6014      	str	r4, [r2, #0]
 800a7b2:	b003      	add	sp, #12
 800a7b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7b8:	f7ff bfe2 	b.w	800a780 <__malloc_unlock>
 800a7bc:	42a3      	cmp	r3, r4
 800a7be:	d908      	bls.n	800a7d2 <_free_r+0x46>
 800a7c0:	6825      	ldr	r5, [r4, #0]
 800a7c2:	1961      	adds	r1, r4, r5
 800a7c4:	428b      	cmp	r3, r1
 800a7c6:	bf01      	itttt	eq
 800a7c8:	6819      	ldreq	r1, [r3, #0]
 800a7ca:	685b      	ldreq	r3, [r3, #4]
 800a7cc:	1949      	addeq	r1, r1, r5
 800a7ce:	6021      	streq	r1, [r4, #0]
 800a7d0:	e7ed      	b.n	800a7ae <_free_r+0x22>
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	b10b      	cbz	r3, 800a7dc <_free_r+0x50>
 800a7d8:	42a3      	cmp	r3, r4
 800a7da:	d9fa      	bls.n	800a7d2 <_free_r+0x46>
 800a7dc:	6811      	ldr	r1, [r2, #0]
 800a7de:	1855      	adds	r5, r2, r1
 800a7e0:	42a5      	cmp	r5, r4
 800a7e2:	d10b      	bne.n	800a7fc <_free_r+0x70>
 800a7e4:	6824      	ldr	r4, [r4, #0]
 800a7e6:	4421      	add	r1, r4
 800a7e8:	1854      	adds	r4, r2, r1
 800a7ea:	42a3      	cmp	r3, r4
 800a7ec:	6011      	str	r1, [r2, #0]
 800a7ee:	d1e0      	bne.n	800a7b2 <_free_r+0x26>
 800a7f0:	681c      	ldr	r4, [r3, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	6053      	str	r3, [r2, #4]
 800a7f6:	4421      	add	r1, r4
 800a7f8:	6011      	str	r1, [r2, #0]
 800a7fa:	e7da      	b.n	800a7b2 <_free_r+0x26>
 800a7fc:	d902      	bls.n	800a804 <_free_r+0x78>
 800a7fe:	230c      	movs	r3, #12
 800a800:	6003      	str	r3, [r0, #0]
 800a802:	e7d6      	b.n	800a7b2 <_free_r+0x26>
 800a804:	6825      	ldr	r5, [r4, #0]
 800a806:	1961      	adds	r1, r4, r5
 800a808:	428b      	cmp	r3, r1
 800a80a:	bf04      	itt	eq
 800a80c:	6819      	ldreq	r1, [r3, #0]
 800a80e:	685b      	ldreq	r3, [r3, #4]
 800a810:	6063      	str	r3, [r4, #4]
 800a812:	bf04      	itt	eq
 800a814:	1949      	addeq	r1, r1, r5
 800a816:	6021      	streq	r1, [r4, #0]
 800a818:	6054      	str	r4, [r2, #4]
 800a81a:	e7ca      	b.n	800a7b2 <_free_r+0x26>
 800a81c:	b003      	add	sp, #12
 800a81e:	bd30      	pop	{r4, r5, pc}
 800a820:	20001280 	.word	0x20001280

0800a824 <_malloc_usable_size_r>:
 800a824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a828:	1f18      	subs	r0, r3, #4
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	bfbc      	itt	lt
 800a82e:	580b      	ldrlt	r3, [r1, r0]
 800a830:	18c0      	addlt	r0, r0, r3
 800a832:	4770      	bx	lr

0800a834 <__sfputc_r>:
 800a834:	6893      	ldr	r3, [r2, #8]
 800a836:	3b01      	subs	r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	b410      	push	{r4}
 800a83c:	6093      	str	r3, [r2, #8]
 800a83e:	da08      	bge.n	800a852 <__sfputc_r+0x1e>
 800a840:	6994      	ldr	r4, [r2, #24]
 800a842:	42a3      	cmp	r3, r4
 800a844:	db01      	blt.n	800a84a <__sfputc_r+0x16>
 800a846:	290a      	cmp	r1, #10
 800a848:	d103      	bne.n	800a852 <__sfputc_r+0x1e>
 800a84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a84e:	f000 b94b 	b.w	800aae8 <__swbuf_r>
 800a852:	6813      	ldr	r3, [r2, #0]
 800a854:	1c58      	adds	r0, r3, #1
 800a856:	6010      	str	r0, [r2, #0]
 800a858:	7019      	strb	r1, [r3, #0]
 800a85a:	4608      	mov	r0, r1
 800a85c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <__sfputs_r>:
 800a862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a864:	4606      	mov	r6, r0
 800a866:	460f      	mov	r7, r1
 800a868:	4614      	mov	r4, r2
 800a86a:	18d5      	adds	r5, r2, r3
 800a86c:	42ac      	cmp	r4, r5
 800a86e:	d101      	bne.n	800a874 <__sfputs_r+0x12>
 800a870:	2000      	movs	r0, #0
 800a872:	e007      	b.n	800a884 <__sfputs_r+0x22>
 800a874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a878:	463a      	mov	r2, r7
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7ff ffda 	bl	800a834 <__sfputc_r>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d1f3      	bne.n	800a86c <__sfputs_r+0xa>
 800a884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a888 <_vfiprintf_r>:
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	460d      	mov	r5, r1
 800a88e:	b09d      	sub	sp, #116	; 0x74
 800a890:	4614      	mov	r4, r2
 800a892:	4698      	mov	r8, r3
 800a894:	4606      	mov	r6, r0
 800a896:	b118      	cbz	r0, 800a8a0 <_vfiprintf_r+0x18>
 800a898:	6983      	ldr	r3, [r0, #24]
 800a89a:	b90b      	cbnz	r3, 800a8a0 <_vfiprintf_r+0x18>
 800a89c:	f000 fb06 	bl	800aeac <__sinit>
 800a8a0:	4b89      	ldr	r3, [pc, #548]	; (800aac8 <_vfiprintf_r+0x240>)
 800a8a2:	429d      	cmp	r5, r3
 800a8a4:	d11b      	bne.n	800a8de <_vfiprintf_r+0x56>
 800a8a6:	6875      	ldr	r5, [r6, #4]
 800a8a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8aa:	07d9      	lsls	r1, r3, #31
 800a8ac:	d405      	bmi.n	800a8ba <_vfiprintf_r+0x32>
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	059a      	lsls	r2, r3, #22
 800a8b2:	d402      	bmi.n	800a8ba <_vfiprintf_r+0x32>
 800a8b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b6:	f000 fb97 	bl	800afe8 <__retarget_lock_acquire_recursive>
 800a8ba:	89ab      	ldrh	r3, [r5, #12]
 800a8bc:	071b      	lsls	r3, r3, #28
 800a8be:	d501      	bpl.n	800a8c4 <_vfiprintf_r+0x3c>
 800a8c0:	692b      	ldr	r3, [r5, #16]
 800a8c2:	b9eb      	cbnz	r3, 800a900 <_vfiprintf_r+0x78>
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f000 f960 	bl	800ab8c <__swsetup_r>
 800a8cc:	b1c0      	cbz	r0, 800a900 <_vfiprintf_r+0x78>
 800a8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8d0:	07dc      	lsls	r4, r3, #31
 800a8d2:	d50e      	bpl.n	800a8f2 <_vfiprintf_r+0x6a>
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8d8:	b01d      	add	sp, #116	; 0x74
 800a8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8de:	4b7b      	ldr	r3, [pc, #492]	; (800aacc <_vfiprintf_r+0x244>)
 800a8e0:	429d      	cmp	r5, r3
 800a8e2:	d101      	bne.n	800a8e8 <_vfiprintf_r+0x60>
 800a8e4:	68b5      	ldr	r5, [r6, #8]
 800a8e6:	e7df      	b.n	800a8a8 <_vfiprintf_r+0x20>
 800a8e8:	4b79      	ldr	r3, [pc, #484]	; (800aad0 <_vfiprintf_r+0x248>)
 800a8ea:	429d      	cmp	r5, r3
 800a8ec:	bf08      	it	eq
 800a8ee:	68f5      	ldreq	r5, [r6, #12]
 800a8f0:	e7da      	b.n	800a8a8 <_vfiprintf_r+0x20>
 800a8f2:	89ab      	ldrh	r3, [r5, #12]
 800a8f4:	0598      	lsls	r0, r3, #22
 800a8f6:	d4ed      	bmi.n	800a8d4 <_vfiprintf_r+0x4c>
 800a8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8fa:	f000 fb76 	bl	800afea <__retarget_lock_release_recursive>
 800a8fe:	e7e9      	b.n	800a8d4 <_vfiprintf_r+0x4c>
 800a900:	2300      	movs	r3, #0
 800a902:	9309      	str	r3, [sp, #36]	; 0x24
 800a904:	2320      	movs	r3, #32
 800a906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a90a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a90e:	2330      	movs	r3, #48	; 0x30
 800a910:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aad4 <_vfiprintf_r+0x24c>
 800a914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a918:	f04f 0901 	mov.w	r9, #1
 800a91c:	4623      	mov	r3, r4
 800a91e:	469a      	mov	sl, r3
 800a920:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a924:	b10a      	cbz	r2, 800a92a <_vfiprintf_r+0xa2>
 800a926:	2a25      	cmp	r2, #37	; 0x25
 800a928:	d1f9      	bne.n	800a91e <_vfiprintf_r+0x96>
 800a92a:	ebba 0b04 	subs.w	fp, sl, r4
 800a92e:	d00b      	beq.n	800a948 <_vfiprintf_r+0xc0>
 800a930:	465b      	mov	r3, fp
 800a932:	4622      	mov	r2, r4
 800a934:	4629      	mov	r1, r5
 800a936:	4630      	mov	r0, r6
 800a938:	f7ff ff93 	bl	800a862 <__sfputs_r>
 800a93c:	3001      	adds	r0, #1
 800a93e:	f000 80aa 	beq.w	800aa96 <_vfiprintf_r+0x20e>
 800a942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a944:	445a      	add	r2, fp
 800a946:	9209      	str	r2, [sp, #36]	; 0x24
 800a948:	f89a 3000 	ldrb.w	r3, [sl]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f000 80a2 	beq.w	800aa96 <_vfiprintf_r+0x20e>
 800a952:	2300      	movs	r3, #0
 800a954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a95c:	f10a 0a01 	add.w	sl, sl, #1
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	9307      	str	r3, [sp, #28]
 800a964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a968:	931a      	str	r3, [sp, #104]	; 0x68
 800a96a:	4654      	mov	r4, sl
 800a96c:	2205      	movs	r2, #5
 800a96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a972:	4858      	ldr	r0, [pc, #352]	; (800aad4 <_vfiprintf_r+0x24c>)
 800a974:	f7f5 fc34 	bl	80001e0 <memchr>
 800a978:	9a04      	ldr	r2, [sp, #16]
 800a97a:	b9d8      	cbnz	r0, 800a9b4 <_vfiprintf_r+0x12c>
 800a97c:	06d1      	lsls	r1, r2, #27
 800a97e:	bf44      	itt	mi
 800a980:	2320      	movmi	r3, #32
 800a982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a986:	0713      	lsls	r3, r2, #28
 800a988:	bf44      	itt	mi
 800a98a:	232b      	movmi	r3, #43	; 0x2b
 800a98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a990:	f89a 3000 	ldrb.w	r3, [sl]
 800a994:	2b2a      	cmp	r3, #42	; 0x2a
 800a996:	d015      	beq.n	800a9c4 <_vfiprintf_r+0x13c>
 800a998:	9a07      	ldr	r2, [sp, #28]
 800a99a:	4654      	mov	r4, sl
 800a99c:	2000      	movs	r0, #0
 800a99e:	f04f 0c0a 	mov.w	ip, #10
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9a8:	3b30      	subs	r3, #48	; 0x30
 800a9aa:	2b09      	cmp	r3, #9
 800a9ac:	d94e      	bls.n	800aa4c <_vfiprintf_r+0x1c4>
 800a9ae:	b1b0      	cbz	r0, 800a9de <_vfiprintf_r+0x156>
 800a9b0:	9207      	str	r2, [sp, #28]
 800a9b2:	e014      	b.n	800a9de <_vfiprintf_r+0x156>
 800a9b4:	eba0 0308 	sub.w	r3, r0, r8
 800a9b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	9304      	str	r3, [sp, #16]
 800a9c0:	46a2      	mov	sl, r4
 800a9c2:	e7d2      	b.n	800a96a <_vfiprintf_r+0xe2>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	1d19      	adds	r1, r3, #4
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	9103      	str	r1, [sp, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	bfbb      	ittet	lt
 800a9d0:	425b      	neglt	r3, r3
 800a9d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a9d6:	9307      	strge	r3, [sp, #28]
 800a9d8:	9307      	strlt	r3, [sp, #28]
 800a9da:	bfb8      	it	lt
 800a9dc:	9204      	strlt	r2, [sp, #16]
 800a9de:	7823      	ldrb	r3, [r4, #0]
 800a9e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e2:	d10c      	bne.n	800a9fe <_vfiprintf_r+0x176>
 800a9e4:	7863      	ldrb	r3, [r4, #1]
 800a9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9e8:	d135      	bne.n	800aa56 <_vfiprintf_r+0x1ce>
 800a9ea:	9b03      	ldr	r3, [sp, #12]
 800a9ec:	1d1a      	adds	r2, r3, #4
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	9203      	str	r2, [sp, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	bfb8      	it	lt
 800a9f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a9fa:	3402      	adds	r4, #2
 800a9fc:	9305      	str	r3, [sp, #20]
 800a9fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aae4 <_vfiprintf_r+0x25c>
 800aa02:	7821      	ldrb	r1, [r4, #0]
 800aa04:	2203      	movs	r2, #3
 800aa06:	4650      	mov	r0, sl
 800aa08:	f7f5 fbea 	bl	80001e0 <memchr>
 800aa0c:	b140      	cbz	r0, 800aa20 <_vfiprintf_r+0x198>
 800aa0e:	2340      	movs	r3, #64	; 0x40
 800aa10:	eba0 000a 	sub.w	r0, r0, sl
 800aa14:	fa03 f000 	lsl.w	r0, r3, r0
 800aa18:	9b04      	ldr	r3, [sp, #16]
 800aa1a:	4303      	orrs	r3, r0
 800aa1c:	3401      	adds	r4, #1
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa24:	482c      	ldr	r0, [pc, #176]	; (800aad8 <_vfiprintf_r+0x250>)
 800aa26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa2a:	2206      	movs	r2, #6
 800aa2c:	f7f5 fbd8 	bl	80001e0 <memchr>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d03f      	beq.n	800aab4 <_vfiprintf_r+0x22c>
 800aa34:	4b29      	ldr	r3, [pc, #164]	; (800aadc <_vfiprintf_r+0x254>)
 800aa36:	bb1b      	cbnz	r3, 800aa80 <_vfiprintf_r+0x1f8>
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	3307      	adds	r3, #7
 800aa3c:	f023 0307 	bic.w	r3, r3, #7
 800aa40:	3308      	adds	r3, #8
 800aa42:	9303      	str	r3, [sp, #12]
 800aa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa46:	443b      	add	r3, r7
 800aa48:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4a:	e767      	b.n	800a91c <_vfiprintf_r+0x94>
 800aa4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa50:	460c      	mov	r4, r1
 800aa52:	2001      	movs	r0, #1
 800aa54:	e7a5      	b.n	800a9a2 <_vfiprintf_r+0x11a>
 800aa56:	2300      	movs	r3, #0
 800aa58:	3401      	adds	r4, #1
 800aa5a:	9305      	str	r3, [sp, #20]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	f04f 0c0a 	mov.w	ip, #10
 800aa62:	4620      	mov	r0, r4
 800aa64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa68:	3a30      	subs	r2, #48	; 0x30
 800aa6a:	2a09      	cmp	r2, #9
 800aa6c:	d903      	bls.n	800aa76 <_vfiprintf_r+0x1ee>
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0c5      	beq.n	800a9fe <_vfiprintf_r+0x176>
 800aa72:	9105      	str	r1, [sp, #20]
 800aa74:	e7c3      	b.n	800a9fe <_vfiprintf_r+0x176>
 800aa76:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e7f0      	b.n	800aa62 <_vfiprintf_r+0x1da>
 800aa80:	ab03      	add	r3, sp, #12
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	462a      	mov	r2, r5
 800aa86:	4b16      	ldr	r3, [pc, #88]	; (800aae0 <_vfiprintf_r+0x258>)
 800aa88:	a904      	add	r1, sp, #16
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f3af 8000 	nop.w
 800aa90:	4607      	mov	r7, r0
 800aa92:	1c78      	adds	r0, r7, #1
 800aa94:	d1d6      	bne.n	800aa44 <_vfiprintf_r+0x1bc>
 800aa96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa98:	07d9      	lsls	r1, r3, #31
 800aa9a:	d405      	bmi.n	800aaa8 <_vfiprintf_r+0x220>
 800aa9c:	89ab      	ldrh	r3, [r5, #12]
 800aa9e:	059a      	lsls	r2, r3, #22
 800aaa0:	d402      	bmi.n	800aaa8 <_vfiprintf_r+0x220>
 800aaa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaa4:	f000 faa1 	bl	800afea <__retarget_lock_release_recursive>
 800aaa8:	89ab      	ldrh	r3, [r5, #12]
 800aaaa:	065b      	lsls	r3, r3, #25
 800aaac:	f53f af12 	bmi.w	800a8d4 <_vfiprintf_r+0x4c>
 800aab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab2:	e711      	b.n	800a8d8 <_vfiprintf_r+0x50>
 800aab4:	ab03      	add	r3, sp, #12
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	462a      	mov	r2, r5
 800aaba:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <_vfiprintf_r+0x258>)
 800aabc:	a904      	add	r1, sp, #16
 800aabe:	4630      	mov	r0, r6
 800aac0:	f7fe fe4e 	bl	8009760 <_printf_i>
 800aac4:	e7e4      	b.n	800aa90 <_vfiprintf_r+0x208>
 800aac6:	bf00      	nop
 800aac8:	0800b6f8 	.word	0x0800b6f8
 800aacc:	0800b718 	.word	0x0800b718
 800aad0:	0800b6d8 	.word	0x0800b6d8
 800aad4:	0800b5fc 	.word	0x0800b5fc
 800aad8:	0800b606 	.word	0x0800b606
 800aadc:	00000000 	.word	0x00000000
 800aae0:	0800a863 	.word	0x0800a863
 800aae4:	0800b602 	.word	0x0800b602

0800aae8 <__swbuf_r>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	460e      	mov	r6, r1
 800aaec:	4614      	mov	r4, r2
 800aaee:	4605      	mov	r5, r0
 800aaf0:	b118      	cbz	r0, 800aafa <__swbuf_r+0x12>
 800aaf2:	6983      	ldr	r3, [r0, #24]
 800aaf4:	b90b      	cbnz	r3, 800aafa <__swbuf_r+0x12>
 800aaf6:	f000 f9d9 	bl	800aeac <__sinit>
 800aafa:	4b21      	ldr	r3, [pc, #132]	; (800ab80 <__swbuf_r+0x98>)
 800aafc:	429c      	cmp	r4, r3
 800aafe:	d12b      	bne.n	800ab58 <__swbuf_r+0x70>
 800ab00:	686c      	ldr	r4, [r5, #4]
 800ab02:	69a3      	ldr	r3, [r4, #24]
 800ab04:	60a3      	str	r3, [r4, #8]
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	071a      	lsls	r2, r3, #28
 800ab0a:	d52f      	bpl.n	800ab6c <__swbuf_r+0x84>
 800ab0c:	6923      	ldr	r3, [r4, #16]
 800ab0e:	b36b      	cbz	r3, 800ab6c <__swbuf_r+0x84>
 800ab10:	6923      	ldr	r3, [r4, #16]
 800ab12:	6820      	ldr	r0, [r4, #0]
 800ab14:	1ac0      	subs	r0, r0, r3
 800ab16:	6963      	ldr	r3, [r4, #20]
 800ab18:	b2f6      	uxtb	r6, r6
 800ab1a:	4283      	cmp	r3, r0
 800ab1c:	4637      	mov	r7, r6
 800ab1e:	dc04      	bgt.n	800ab2a <__swbuf_r+0x42>
 800ab20:	4621      	mov	r1, r4
 800ab22:	4628      	mov	r0, r5
 800ab24:	f000 f92e 	bl	800ad84 <_fflush_r>
 800ab28:	bb30      	cbnz	r0, 800ab78 <__swbuf_r+0x90>
 800ab2a:	68a3      	ldr	r3, [r4, #8]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	60a3      	str	r3, [r4, #8]
 800ab30:	6823      	ldr	r3, [r4, #0]
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	6022      	str	r2, [r4, #0]
 800ab36:	701e      	strb	r6, [r3, #0]
 800ab38:	6963      	ldr	r3, [r4, #20]
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	4283      	cmp	r3, r0
 800ab3e:	d004      	beq.n	800ab4a <__swbuf_r+0x62>
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	07db      	lsls	r3, r3, #31
 800ab44:	d506      	bpl.n	800ab54 <__swbuf_r+0x6c>
 800ab46:	2e0a      	cmp	r6, #10
 800ab48:	d104      	bne.n	800ab54 <__swbuf_r+0x6c>
 800ab4a:	4621      	mov	r1, r4
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	f000 f919 	bl	800ad84 <_fflush_r>
 800ab52:	b988      	cbnz	r0, 800ab78 <__swbuf_r+0x90>
 800ab54:	4638      	mov	r0, r7
 800ab56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab58:	4b0a      	ldr	r3, [pc, #40]	; (800ab84 <__swbuf_r+0x9c>)
 800ab5a:	429c      	cmp	r4, r3
 800ab5c:	d101      	bne.n	800ab62 <__swbuf_r+0x7a>
 800ab5e:	68ac      	ldr	r4, [r5, #8]
 800ab60:	e7cf      	b.n	800ab02 <__swbuf_r+0x1a>
 800ab62:	4b09      	ldr	r3, [pc, #36]	; (800ab88 <__swbuf_r+0xa0>)
 800ab64:	429c      	cmp	r4, r3
 800ab66:	bf08      	it	eq
 800ab68:	68ec      	ldreq	r4, [r5, #12]
 800ab6a:	e7ca      	b.n	800ab02 <__swbuf_r+0x1a>
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f000 f80c 	bl	800ab8c <__swsetup_r>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d0cb      	beq.n	800ab10 <__swbuf_r+0x28>
 800ab78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ab7c:	e7ea      	b.n	800ab54 <__swbuf_r+0x6c>
 800ab7e:	bf00      	nop
 800ab80:	0800b6f8 	.word	0x0800b6f8
 800ab84:	0800b718 	.word	0x0800b718
 800ab88:	0800b6d8 	.word	0x0800b6d8

0800ab8c <__swsetup_r>:
 800ab8c:	4b32      	ldr	r3, [pc, #200]	; (800ac58 <__swsetup_r+0xcc>)
 800ab8e:	b570      	push	{r4, r5, r6, lr}
 800ab90:	681d      	ldr	r5, [r3, #0]
 800ab92:	4606      	mov	r6, r0
 800ab94:	460c      	mov	r4, r1
 800ab96:	b125      	cbz	r5, 800aba2 <__swsetup_r+0x16>
 800ab98:	69ab      	ldr	r3, [r5, #24]
 800ab9a:	b913      	cbnz	r3, 800aba2 <__swsetup_r+0x16>
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f000 f985 	bl	800aeac <__sinit>
 800aba2:	4b2e      	ldr	r3, [pc, #184]	; (800ac5c <__swsetup_r+0xd0>)
 800aba4:	429c      	cmp	r4, r3
 800aba6:	d10f      	bne.n	800abc8 <__swsetup_r+0x3c>
 800aba8:	686c      	ldr	r4, [r5, #4]
 800abaa:	89a3      	ldrh	r3, [r4, #12]
 800abac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abb0:	0719      	lsls	r1, r3, #28
 800abb2:	d42c      	bmi.n	800ac0e <__swsetup_r+0x82>
 800abb4:	06dd      	lsls	r5, r3, #27
 800abb6:	d411      	bmi.n	800abdc <__swsetup_r+0x50>
 800abb8:	2309      	movs	r3, #9
 800abba:	6033      	str	r3, [r6, #0]
 800abbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abc6:	e03e      	b.n	800ac46 <__swsetup_r+0xba>
 800abc8:	4b25      	ldr	r3, [pc, #148]	; (800ac60 <__swsetup_r+0xd4>)
 800abca:	429c      	cmp	r4, r3
 800abcc:	d101      	bne.n	800abd2 <__swsetup_r+0x46>
 800abce:	68ac      	ldr	r4, [r5, #8]
 800abd0:	e7eb      	b.n	800abaa <__swsetup_r+0x1e>
 800abd2:	4b24      	ldr	r3, [pc, #144]	; (800ac64 <__swsetup_r+0xd8>)
 800abd4:	429c      	cmp	r4, r3
 800abd6:	bf08      	it	eq
 800abd8:	68ec      	ldreq	r4, [r5, #12]
 800abda:	e7e6      	b.n	800abaa <__swsetup_r+0x1e>
 800abdc:	0758      	lsls	r0, r3, #29
 800abde:	d512      	bpl.n	800ac06 <__swsetup_r+0x7a>
 800abe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abe2:	b141      	cbz	r1, 800abf6 <__swsetup_r+0x6a>
 800abe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abe8:	4299      	cmp	r1, r3
 800abea:	d002      	beq.n	800abf2 <__swsetup_r+0x66>
 800abec:	4630      	mov	r0, r6
 800abee:	f7ff fdcd 	bl	800a78c <_free_r>
 800abf2:	2300      	movs	r3, #0
 800abf4:	6363      	str	r3, [r4, #52]	; 0x34
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	2300      	movs	r3, #0
 800ac00:	6063      	str	r3, [r4, #4]
 800ac02:	6923      	ldr	r3, [r4, #16]
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	f043 0308 	orr.w	r3, r3, #8
 800ac0c:	81a3      	strh	r3, [r4, #12]
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	b94b      	cbnz	r3, 800ac26 <__swsetup_r+0x9a>
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac1c:	d003      	beq.n	800ac26 <__swsetup_r+0x9a>
 800ac1e:	4621      	mov	r1, r4
 800ac20:	4630      	mov	r0, r6
 800ac22:	f000 fa09 	bl	800b038 <__smakebuf_r>
 800ac26:	89a0      	ldrh	r0, [r4, #12]
 800ac28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac2c:	f010 0301 	ands.w	r3, r0, #1
 800ac30:	d00a      	beq.n	800ac48 <__swsetup_r+0xbc>
 800ac32:	2300      	movs	r3, #0
 800ac34:	60a3      	str	r3, [r4, #8]
 800ac36:	6963      	ldr	r3, [r4, #20]
 800ac38:	425b      	negs	r3, r3
 800ac3a:	61a3      	str	r3, [r4, #24]
 800ac3c:	6923      	ldr	r3, [r4, #16]
 800ac3e:	b943      	cbnz	r3, 800ac52 <__swsetup_r+0xc6>
 800ac40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac44:	d1ba      	bne.n	800abbc <__swsetup_r+0x30>
 800ac46:	bd70      	pop	{r4, r5, r6, pc}
 800ac48:	0781      	lsls	r1, r0, #30
 800ac4a:	bf58      	it	pl
 800ac4c:	6963      	ldrpl	r3, [r4, #20]
 800ac4e:	60a3      	str	r3, [r4, #8]
 800ac50:	e7f4      	b.n	800ac3c <__swsetup_r+0xb0>
 800ac52:	2000      	movs	r0, #0
 800ac54:	e7f7      	b.n	800ac46 <__swsetup_r+0xba>
 800ac56:	bf00      	nop
 800ac58:	20000010 	.word	0x20000010
 800ac5c:	0800b6f8 	.word	0x0800b6f8
 800ac60:	0800b718 	.word	0x0800b718
 800ac64:	0800b6d8 	.word	0x0800b6d8

0800ac68 <abort>:
 800ac68:	b508      	push	{r3, lr}
 800ac6a:	2006      	movs	r0, #6
 800ac6c:	f000 fa4c 	bl	800b108 <raise>
 800ac70:	2001      	movs	r0, #1
 800ac72:	f7f7 f8e7 	bl	8001e44 <_exit>
	...

0800ac78 <__sflush_r>:
 800ac78:	898a      	ldrh	r2, [r1, #12]
 800ac7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7e:	4605      	mov	r5, r0
 800ac80:	0710      	lsls	r0, r2, #28
 800ac82:	460c      	mov	r4, r1
 800ac84:	d458      	bmi.n	800ad38 <__sflush_r+0xc0>
 800ac86:	684b      	ldr	r3, [r1, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	dc05      	bgt.n	800ac98 <__sflush_r+0x20>
 800ac8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	dc02      	bgt.n	800ac98 <__sflush_r+0x20>
 800ac92:	2000      	movs	r0, #0
 800ac94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac9a:	2e00      	cmp	r6, #0
 800ac9c:	d0f9      	beq.n	800ac92 <__sflush_r+0x1a>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aca4:	682f      	ldr	r7, [r5, #0]
 800aca6:	602b      	str	r3, [r5, #0]
 800aca8:	d032      	beq.n	800ad10 <__sflush_r+0x98>
 800acaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	075a      	lsls	r2, r3, #29
 800acb0:	d505      	bpl.n	800acbe <__sflush_r+0x46>
 800acb2:	6863      	ldr	r3, [r4, #4]
 800acb4:	1ac0      	subs	r0, r0, r3
 800acb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acb8:	b10b      	cbz	r3, 800acbe <__sflush_r+0x46>
 800acba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acbc:	1ac0      	subs	r0, r0, r3
 800acbe:	2300      	movs	r3, #0
 800acc0:	4602      	mov	r2, r0
 800acc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acc4:	6a21      	ldr	r1, [r4, #32]
 800acc6:	4628      	mov	r0, r5
 800acc8:	47b0      	blx	r6
 800acca:	1c43      	adds	r3, r0, #1
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	d106      	bne.n	800acde <__sflush_r+0x66>
 800acd0:	6829      	ldr	r1, [r5, #0]
 800acd2:	291d      	cmp	r1, #29
 800acd4:	d82c      	bhi.n	800ad30 <__sflush_r+0xb8>
 800acd6:	4a2a      	ldr	r2, [pc, #168]	; (800ad80 <__sflush_r+0x108>)
 800acd8:	40ca      	lsrs	r2, r1
 800acda:	07d6      	lsls	r6, r2, #31
 800acdc:	d528      	bpl.n	800ad30 <__sflush_r+0xb8>
 800acde:	2200      	movs	r2, #0
 800ace0:	6062      	str	r2, [r4, #4]
 800ace2:	04d9      	lsls	r1, r3, #19
 800ace4:	6922      	ldr	r2, [r4, #16]
 800ace6:	6022      	str	r2, [r4, #0]
 800ace8:	d504      	bpl.n	800acf4 <__sflush_r+0x7c>
 800acea:	1c42      	adds	r2, r0, #1
 800acec:	d101      	bne.n	800acf2 <__sflush_r+0x7a>
 800acee:	682b      	ldr	r3, [r5, #0]
 800acf0:	b903      	cbnz	r3, 800acf4 <__sflush_r+0x7c>
 800acf2:	6560      	str	r0, [r4, #84]	; 0x54
 800acf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acf6:	602f      	str	r7, [r5, #0]
 800acf8:	2900      	cmp	r1, #0
 800acfa:	d0ca      	beq.n	800ac92 <__sflush_r+0x1a>
 800acfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad00:	4299      	cmp	r1, r3
 800ad02:	d002      	beq.n	800ad0a <__sflush_r+0x92>
 800ad04:	4628      	mov	r0, r5
 800ad06:	f7ff fd41 	bl	800a78c <_free_r>
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad0e:	e7c1      	b.n	800ac94 <__sflush_r+0x1c>
 800ad10:	6a21      	ldr	r1, [r4, #32]
 800ad12:	2301      	movs	r3, #1
 800ad14:	4628      	mov	r0, r5
 800ad16:	47b0      	blx	r6
 800ad18:	1c41      	adds	r1, r0, #1
 800ad1a:	d1c7      	bne.n	800acac <__sflush_r+0x34>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0c4      	beq.n	800acac <__sflush_r+0x34>
 800ad22:	2b1d      	cmp	r3, #29
 800ad24:	d001      	beq.n	800ad2a <__sflush_r+0xb2>
 800ad26:	2b16      	cmp	r3, #22
 800ad28:	d101      	bne.n	800ad2e <__sflush_r+0xb6>
 800ad2a:	602f      	str	r7, [r5, #0]
 800ad2c:	e7b1      	b.n	800ac92 <__sflush_r+0x1a>
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad34:	81a3      	strh	r3, [r4, #12]
 800ad36:	e7ad      	b.n	800ac94 <__sflush_r+0x1c>
 800ad38:	690f      	ldr	r7, [r1, #16]
 800ad3a:	2f00      	cmp	r7, #0
 800ad3c:	d0a9      	beq.n	800ac92 <__sflush_r+0x1a>
 800ad3e:	0793      	lsls	r3, r2, #30
 800ad40:	680e      	ldr	r6, [r1, #0]
 800ad42:	bf08      	it	eq
 800ad44:	694b      	ldreq	r3, [r1, #20]
 800ad46:	600f      	str	r7, [r1, #0]
 800ad48:	bf18      	it	ne
 800ad4a:	2300      	movne	r3, #0
 800ad4c:	eba6 0807 	sub.w	r8, r6, r7
 800ad50:	608b      	str	r3, [r1, #8]
 800ad52:	f1b8 0f00 	cmp.w	r8, #0
 800ad56:	dd9c      	ble.n	800ac92 <__sflush_r+0x1a>
 800ad58:	6a21      	ldr	r1, [r4, #32]
 800ad5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad5c:	4643      	mov	r3, r8
 800ad5e:	463a      	mov	r2, r7
 800ad60:	4628      	mov	r0, r5
 800ad62:	47b0      	blx	r6
 800ad64:	2800      	cmp	r0, #0
 800ad66:	dc06      	bgt.n	800ad76 <__sflush_r+0xfe>
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad6e:	81a3      	strh	r3, [r4, #12]
 800ad70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad74:	e78e      	b.n	800ac94 <__sflush_r+0x1c>
 800ad76:	4407      	add	r7, r0
 800ad78:	eba8 0800 	sub.w	r8, r8, r0
 800ad7c:	e7e9      	b.n	800ad52 <__sflush_r+0xda>
 800ad7e:	bf00      	nop
 800ad80:	20400001 	.word	0x20400001

0800ad84 <_fflush_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	690b      	ldr	r3, [r1, #16]
 800ad88:	4605      	mov	r5, r0
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	b913      	cbnz	r3, 800ad94 <_fflush_r+0x10>
 800ad8e:	2500      	movs	r5, #0
 800ad90:	4628      	mov	r0, r5
 800ad92:	bd38      	pop	{r3, r4, r5, pc}
 800ad94:	b118      	cbz	r0, 800ad9e <_fflush_r+0x1a>
 800ad96:	6983      	ldr	r3, [r0, #24]
 800ad98:	b90b      	cbnz	r3, 800ad9e <_fflush_r+0x1a>
 800ad9a:	f000 f887 	bl	800aeac <__sinit>
 800ad9e:	4b14      	ldr	r3, [pc, #80]	; (800adf0 <_fflush_r+0x6c>)
 800ada0:	429c      	cmp	r4, r3
 800ada2:	d11b      	bne.n	800addc <_fflush_r+0x58>
 800ada4:	686c      	ldr	r4, [r5, #4]
 800ada6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d0ef      	beq.n	800ad8e <_fflush_r+0xa>
 800adae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adb0:	07d0      	lsls	r0, r2, #31
 800adb2:	d404      	bmi.n	800adbe <_fflush_r+0x3a>
 800adb4:	0599      	lsls	r1, r3, #22
 800adb6:	d402      	bmi.n	800adbe <_fflush_r+0x3a>
 800adb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adba:	f000 f915 	bl	800afe8 <__retarget_lock_acquire_recursive>
 800adbe:	4628      	mov	r0, r5
 800adc0:	4621      	mov	r1, r4
 800adc2:	f7ff ff59 	bl	800ac78 <__sflush_r>
 800adc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adc8:	07da      	lsls	r2, r3, #31
 800adca:	4605      	mov	r5, r0
 800adcc:	d4e0      	bmi.n	800ad90 <_fflush_r+0xc>
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	059b      	lsls	r3, r3, #22
 800add2:	d4dd      	bmi.n	800ad90 <_fflush_r+0xc>
 800add4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800add6:	f000 f908 	bl	800afea <__retarget_lock_release_recursive>
 800adda:	e7d9      	b.n	800ad90 <_fflush_r+0xc>
 800addc:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <_fflush_r+0x70>)
 800adde:	429c      	cmp	r4, r3
 800ade0:	d101      	bne.n	800ade6 <_fflush_r+0x62>
 800ade2:	68ac      	ldr	r4, [r5, #8]
 800ade4:	e7df      	b.n	800ada6 <_fflush_r+0x22>
 800ade6:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <_fflush_r+0x74>)
 800ade8:	429c      	cmp	r4, r3
 800adea:	bf08      	it	eq
 800adec:	68ec      	ldreq	r4, [r5, #12]
 800adee:	e7da      	b.n	800ada6 <_fflush_r+0x22>
 800adf0:	0800b6f8 	.word	0x0800b6f8
 800adf4:	0800b718 	.word	0x0800b718
 800adf8:	0800b6d8 	.word	0x0800b6d8

0800adfc <std>:
 800adfc:	2300      	movs	r3, #0
 800adfe:	b510      	push	{r4, lr}
 800ae00:	4604      	mov	r4, r0
 800ae02:	e9c0 3300 	strd	r3, r3, [r0]
 800ae06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae0a:	6083      	str	r3, [r0, #8]
 800ae0c:	8181      	strh	r1, [r0, #12]
 800ae0e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae10:	81c2      	strh	r2, [r0, #14]
 800ae12:	6183      	str	r3, [r0, #24]
 800ae14:	4619      	mov	r1, r3
 800ae16:	2208      	movs	r2, #8
 800ae18:	305c      	adds	r0, #92	; 0x5c
 800ae1a:	f7fd fcfb 	bl	8008814 <memset>
 800ae1e:	4b05      	ldr	r3, [pc, #20]	; (800ae34 <std+0x38>)
 800ae20:	6263      	str	r3, [r4, #36]	; 0x24
 800ae22:	4b05      	ldr	r3, [pc, #20]	; (800ae38 <std+0x3c>)
 800ae24:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae26:	4b05      	ldr	r3, [pc, #20]	; (800ae3c <std+0x40>)
 800ae28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae2a:	4b05      	ldr	r3, [pc, #20]	; (800ae40 <std+0x44>)
 800ae2c:	6224      	str	r4, [r4, #32]
 800ae2e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae30:	bd10      	pop	{r4, pc}
 800ae32:	bf00      	nop
 800ae34:	0800b141 	.word	0x0800b141
 800ae38:	0800b163 	.word	0x0800b163
 800ae3c:	0800b19b 	.word	0x0800b19b
 800ae40:	0800b1bf 	.word	0x0800b1bf

0800ae44 <_cleanup_r>:
 800ae44:	4901      	ldr	r1, [pc, #4]	; (800ae4c <_cleanup_r+0x8>)
 800ae46:	f000 b8af 	b.w	800afa8 <_fwalk_reent>
 800ae4a:	bf00      	nop
 800ae4c:	0800ad85 	.word	0x0800ad85

0800ae50 <__sfmoreglue>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	2268      	movs	r2, #104	; 0x68
 800ae54:	1e4d      	subs	r5, r1, #1
 800ae56:	4355      	muls	r5, r2
 800ae58:	460e      	mov	r6, r1
 800ae5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae5e:	f7fe fa13 	bl	8009288 <_malloc_r>
 800ae62:	4604      	mov	r4, r0
 800ae64:	b140      	cbz	r0, 800ae78 <__sfmoreglue+0x28>
 800ae66:	2100      	movs	r1, #0
 800ae68:	e9c0 1600 	strd	r1, r6, [r0]
 800ae6c:	300c      	adds	r0, #12
 800ae6e:	60a0      	str	r0, [r4, #8]
 800ae70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae74:	f7fd fcce 	bl	8008814 <memset>
 800ae78:	4620      	mov	r0, r4
 800ae7a:	bd70      	pop	{r4, r5, r6, pc}

0800ae7c <__sfp_lock_acquire>:
 800ae7c:	4801      	ldr	r0, [pc, #4]	; (800ae84 <__sfp_lock_acquire+0x8>)
 800ae7e:	f000 b8b3 	b.w	800afe8 <__retarget_lock_acquire_recursive>
 800ae82:	bf00      	nop
 800ae84:	2000128d 	.word	0x2000128d

0800ae88 <__sfp_lock_release>:
 800ae88:	4801      	ldr	r0, [pc, #4]	; (800ae90 <__sfp_lock_release+0x8>)
 800ae8a:	f000 b8ae 	b.w	800afea <__retarget_lock_release_recursive>
 800ae8e:	bf00      	nop
 800ae90:	2000128d 	.word	0x2000128d

0800ae94 <__sinit_lock_acquire>:
 800ae94:	4801      	ldr	r0, [pc, #4]	; (800ae9c <__sinit_lock_acquire+0x8>)
 800ae96:	f000 b8a7 	b.w	800afe8 <__retarget_lock_acquire_recursive>
 800ae9a:	bf00      	nop
 800ae9c:	2000128e 	.word	0x2000128e

0800aea0 <__sinit_lock_release>:
 800aea0:	4801      	ldr	r0, [pc, #4]	; (800aea8 <__sinit_lock_release+0x8>)
 800aea2:	f000 b8a2 	b.w	800afea <__retarget_lock_release_recursive>
 800aea6:	bf00      	nop
 800aea8:	2000128e 	.word	0x2000128e

0800aeac <__sinit>:
 800aeac:	b510      	push	{r4, lr}
 800aeae:	4604      	mov	r4, r0
 800aeb0:	f7ff fff0 	bl	800ae94 <__sinit_lock_acquire>
 800aeb4:	69a3      	ldr	r3, [r4, #24]
 800aeb6:	b11b      	cbz	r3, 800aec0 <__sinit+0x14>
 800aeb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aebc:	f7ff bff0 	b.w	800aea0 <__sinit_lock_release>
 800aec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aec4:	6523      	str	r3, [r4, #80]	; 0x50
 800aec6:	4b13      	ldr	r3, [pc, #76]	; (800af14 <__sinit+0x68>)
 800aec8:	4a13      	ldr	r2, [pc, #76]	; (800af18 <__sinit+0x6c>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	62a2      	str	r2, [r4, #40]	; 0x28
 800aece:	42a3      	cmp	r3, r4
 800aed0:	bf04      	itt	eq
 800aed2:	2301      	moveq	r3, #1
 800aed4:	61a3      	streq	r3, [r4, #24]
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 f820 	bl	800af1c <__sfp>
 800aedc:	6060      	str	r0, [r4, #4]
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 f81c 	bl	800af1c <__sfp>
 800aee4:	60a0      	str	r0, [r4, #8]
 800aee6:	4620      	mov	r0, r4
 800aee8:	f000 f818 	bl	800af1c <__sfp>
 800aeec:	2200      	movs	r2, #0
 800aeee:	60e0      	str	r0, [r4, #12]
 800aef0:	2104      	movs	r1, #4
 800aef2:	6860      	ldr	r0, [r4, #4]
 800aef4:	f7ff ff82 	bl	800adfc <std>
 800aef8:	68a0      	ldr	r0, [r4, #8]
 800aefa:	2201      	movs	r2, #1
 800aefc:	2109      	movs	r1, #9
 800aefe:	f7ff ff7d 	bl	800adfc <std>
 800af02:	68e0      	ldr	r0, [r4, #12]
 800af04:	2202      	movs	r2, #2
 800af06:	2112      	movs	r1, #18
 800af08:	f7ff ff78 	bl	800adfc <std>
 800af0c:	2301      	movs	r3, #1
 800af0e:	61a3      	str	r3, [r4, #24]
 800af10:	e7d2      	b.n	800aeb8 <__sinit+0xc>
 800af12:	bf00      	nop
 800af14:	0800b474 	.word	0x0800b474
 800af18:	0800ae45 	.word	0x0800ae45

0800af1c <__sfp>:
 800af1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1e:	4607      	mov	r7, r0
 800af20:	f7ff ffac 	bl	800ae7c <__sfp_lock_acquire>
 800af24:	4b1e      	ldr	r3, [pc, #120]	; (800afa0 <__sfp+0x84>)
 800af26:	681e      	ldr	r6, [r3, #0]
 800af28:	69b3      	ldr	r3, [r6, #24]
 800af2a:	b913      	cbnz	r3, 800af32 <__sfp+0x16>
 800af2c:	4630      	mov	r0, r6
 800af2e:	f7ff ffbd 	bl	800aeac <__sinit>
 800af32:	3648      	adds	r6, #72	; 0x48
 800af34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af38:	3b01      	subs	r3, #1
 800af3a:	d503      	bpl.n	800af44 <__sfp+0x28>
 800af3c:	6833      	ldr	r3, [r6, #0]
 800af3e:	b30b      	cbz	r3, 800af84 <__sfp+0x68>
 800af40:	6836      	ldr	r6, [r6, #0]
 800af42:	e7f7      	b.n	800af34 <__sfp+0x18>
 800af44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af48:	b9d5      	cbnz	r5, 800af80 <__sfp+0x64>
 800af4a:	4b16      	ldr	r3, [pc, #88]	; (800afa4 <__sfp+0x88>)
 800af4c:	60e3      	str	r3, [r4, #12]
 800af4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af52:	6665      	str	r5, [r4, #100]	; 0x64
 800af54:	f000 f847 	bl	800afe6 <__retarget_lock_init_recursive>
 800af58:	f7ff ff96 	bl	800ae88 <__sfp_lock_release>
 800af5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af64:	6025      	str	r5, [r4, #0]
 800af66:	61a5      	str	r5, [r4, #24]
 800af68:	2208      	movs	r2, #8
 800af6a:	4629      	mov	r1, r5
 800af6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af70:	f7fd fc50 	bl	8008814 <memset>
 800af74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af7c:	4620      	mov	r0, r4
 800af7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af80:	3468      	adds	r4, #104	; 0x68
 800af82:	e7d9      	b.n	800af38 <__sfp+0x1c>
 800af84:	2104      	movs	r1, #4
 800af86:	4638      	mov	r0, r7
 800af88:	f7ff ff62 	bl	800ae50 <__sfmoreglue>
 800af8c:	4604      	mov	r4, r0
 800af8e:	6030      	str	r0, [r6, #0]
 800af90:	2800      	cmp	r0, #0
 800af92:	d1d5      	bne.n	800af40 <__sfp+0x24>
 800af94:	f7ff ff78 	bl	800ae88 <__sfp_lock_release>
 800af98:	230c      	movs	r3, #12
 800af9a:	603b      	str	r3, [r7, #0]
 800af9c:	e7ee      	b.n	800af7c <__sfp+0x60>
 800af9e:	bf00      	nop
 800afa0:	0800b474 	.word	0x0800b474
 800afa4:	ffff0001 	.word	0xffff0001

0800afa8 <_fwalk_reent>:
 800afa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afac:	4606      	mov	r6, r0
 800afae:	4688      	mov	r8, r1
 800afb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afb4:	2700      	movs	r7, #0
 800afb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afba:	f1b9 0901 	subs.w	r9, r9, #1
 800afbe:	d505      	bpl.n	800afcc <_fwalk_reent+0x24>
 800afc0:	6824      	ldr	r4, [r4, #0]
 800afc2:	2c00      	cmp	r4, #0
 800afc4:	d1f7      	bne.n	800afb6 <_fwalk_reent+0xe>
 800afc6:	4638      	mov	r0, r7
 800afc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afcc:	89ab      	ldrh	r3, [r5, #12]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d907      	bls.n	800afe2 <_fwalk_reent+0x3a>
 800afd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afd6:	3301      	adds	r3, #1
 800afd8:	d003      	beq.n	800afe2 <_fwalk_reent+0x3a>
 800afda:	4629      	mov	r1, r5
 800afdc:	4630      	mov	r0, r6
 800afde:	47c0      	blx	r8
 800afe0:	4307      	orrs	r7, r0
 800afe2:	3568      	adds	r5, #104	; 0x68
 800afe4:	e7e9      	b.n	800afba <_fwalk_reent+0x12>

0800afe6 <__retarget_lock_init_recursive>:
 800afe6:	4770      	bx	lr

0800afe8 <__retarget_lock_acquire_recursive>:
 800afe8:	4770      	bx	lr

0800afea <__retarget_lock_release_recursive>:
 800afea:	4770      	bx	lr

0800afec <__swhatbuf_r>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	460e      	mov	r6, r1
 800aff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff4:	2900      	cmp	r1, #0
 800aff6:	b096      	sub	sp, #88	; 0x58
 800aff8:	4614      	mov	r4, r2
 800affa:	461d      	mov	r5, r3
 800affc:	da08      	bge.n	800b010 <__swhatbuf_r+0x24>
 800affe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	602a      	str	r2, [r5, #0]
 800b006:	061a      	lsls	r2, r3, #24
 800b008:	d410      	bmi.n	800b02c <__swhatbuf_r+0x40>
 800b00a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b00e:	e00e      	b.n	800b02e <__swhatbuf_r+0x42>
 800b010:	466a      	mov	r2, sp
 800b012:	f000 f8fb 	bl	800b20c <_fstat_r>
 800b016:	2800      	cmp	r0, #0
 800b018:	dbf1      	blt.n	800affe <__swhatbuf_r+0x12>
 800b01a:	9a01      	ldr	r2, [sp, #4]
 800b01c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b020:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b024:	425a      	negs	r2, r3
 800b026:	415a      	adcs	r2, r3
 800b028:	602a      	str	r2, [r5, #0]
 800b02a:	e7ee      	b.n	800b00a <__swhatbuf_r+0x1e>
 800b02c:	2340      	movs	r3, #64	; 0x40
 800b02e:	2000      	movs	r0, #0
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	b016      	add	sp, #88	; 0x58
 800b034:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b038 <__smakebuf_r>:
 800b038:	898b      	ldrh	r3, [r1, #12]
 800b03a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b03c:	079d      	lsls	r5, r3, #30
 800b03e:	4606      	mov	r6, r0
 800b040:	460c      	mov	r4, r1
 800b042:	d507      	bpl.n	800b054 <__smakebuf_r+0x1c>
 800b044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	6123      	str	r3, [r4, #16]
 800b04c:	2301      	movs	r3, #1
 800b04e:	6163      	str	r3, [r4, #20]
 800b050:	b002      	add	sp, #8
 800b052:	bd70      	pop	{r4, r5, r6, pc}
 800b054:	ab01      	add	r3, sp, #4
 800b056:	466a      	mov	r2, sp
 800b058:	f7ff ffc8 	bl	800afec <__swhatbuf_r>
 800b05c:	9900      	ldr	r1, [sp, #0]
 800b05e:	4605      	mov	r5, r0
 800b060:	4630      	mov	r0, r6
 800b062:	f7fe f911 	bl	8009288 <_malloc_r>
 800b066:	b948      	cbnz	r0, 800b07c <__smakebuf_r+0x44>
 800b068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b06c:	059a      	lsls	r2, r3, #22
 800b06e:	d4ef      	bmi.n	800b050 <__smakebuf_r+0x18>
 800b070:	f023 0303 	bic.w	r3, r3, #3
 800b074:	f043 0302 	orr.w	r3, r3, #2
 800b078:	81a3      	strh	r3, [r4, #12]
 800b07a:	e7e3      	b.n	800b044 <__smakebuf_r+0xc>
 800b07c:	4b0d      	ldr	r3, [pc, #52]	; (800b0b4 <__smakebuf_r+0x7c>)
 800b07e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	6020      	str	r0, [r4, #0]
 800b084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b088:	81a3      	strh	r3, [r4, #12]
 800b08a:	9b00      	ldr	r3, [sp, #0]
 800b08c:	6163      	str	r3, [r4, #20]
 800b08e:	9b01      	ldr	r3, [sp, #4]
 800b090:	6120      	str	r0, [r4, #16]
 800b092:	b15b      	cbz	r3, 800b0ac <__smakebuf_r+0x74>
 800b094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b098:	4630      	mov	r0, r6
 800b09a:	f000 f8c9 	bl	800b230 <_isatty_r>
 800b09e:	b128      	cbz	r0, 800b0ac <__smakebuf_r+0x74>
 800b0a0:	89a3      	ldrh	r3, [r4, #12]
 800b0a2:	f023 0303 	bic.w	r3, r3, #3
 800b0a6:	f043 0301 	orr.w	r3, r3, #1
 800b0aa:	81a3      	strh	r3, [r4, #12]
 800b0ac:	89a0      	ldrh	r0, [r4, #12]
 800b0ae:	4305      	orrs	r5, r0
 800b0b0:	81a5      	strh	r5, [r4, #12]
 800b0b2:	e7cd      	b.n	800b050 <__smakebuf_r+0x18>
 800b0b4:	0800ae45 	.word	0x0800ae45

0800b0b8 <_raise_r>:
 800b0b8:	291f      	cmp	r1, #31
 800b0ba:	b538      	push	{r3, r4, r5, lr}
 800b0bc:	4604      	mov	r4, r0
 800b0be:	460d      	mov	r5, r1
 800b0c0:	d904      	bls.n	800b0cc <_raise_r+0x14>
 800b0c2:	2316      	movs	r3, #22
 800b0c4:	6003      	str	r3, [r0, #0]
 800b0c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0ca:	bd38      	pop	{r3, r4, r5, pc}
 800b0cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0ce:	b112      	cbz	r2, 800b0d6 <_raise_r+0x1e>
 800b0d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0d4:	b94b      	cbnz	r3, 800b0ea <_raise_r+0x32>
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f000 f830 	bl	800b13c <_getpid_r>
 800b0dc:	462a      	mov	r2, r5
 800b0de:	4601      	mov	r1, r0
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0e6:	f000 b817 	b.w	800b118 <_kill_r>
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d00a      	beq.n	800b104 <_raise_r+0x4c>
 800b0ee:	1c59      	adds	r1, r3, #1
 800b0f0:	d103      	bne.n	800b0fa <_raise_r+0x42>
 800b0f2:	2316      	movs	r3, #22
 800b0f4:	6003      	str	r3, [r0, #0]
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	e7e7      	b.n	800b0ca <_raise_r+0x12>
 800b0fa:	2400      	movs	r4, #0
 800b0fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b100:	4628      	mov	r0, r5
 800b102:	4798      	blx	r3
 800b104:	2000      	movs	r0, #0
 800b106:	e7e0      	b.n	800b0ca <_raise_r+0x12>

0800b108 <raise>:
 800b108:	4b02      	ldr	r3, [pc, #8]	; (800b114 <raise+0xc>)
 800b10a:	4601      	mov	r1, r0
 800b10c:	6818      	ldr	r0, [r3, #0]
 800b10e:	f7ff bfd3 	b.w	800b0b8 <_raise_r>
 800b112:	bf00      	nop
 800b114:	20000010 	.word	0x20000010

0800b118 <_kill_r>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	4d07      	ldr	r5, [pc, #28]	; (800b138 <_kill_r+0x20>)
 800b11c:	2300      	movs	r3, #0
 800b11e:	4604      	mov	r4, r0
 800b120:	4608      	mov	r0, r1
 800b122:	4611      	mov	r1, r2
 800b124:	602b      	str	r3, [r5, #0]
 800b126:	f7f6 fe7d 	bl	8001e24 <_kill>
 800b12a:	1c43      	adds	r3, r0, #1
 800b12c:	d102      	bne.n	800b134 <_kill_r+0x1c>
 800b12e:	682b      	ldr	r3, [r5, #0]
 800b130:	b103      	cbz	r3, 800b134 <_kill_r+0x1c>
 800b132:	6023      	str	r3, [r4, #0]
 800b134:	bd38      	pop	{r3, r4, r5, pc}
 800b136:	bf00      	nop
 800b138:	20001288 	.word	0x20001288

0800b13c <_getpid_r>:
 800b13c:	f7f6 be6a 	b.w	8001e14 <_getpid>

0800b140 <__sread>:
 800b140:	b510      	push	{r4, lr}
 800b142:	460c      	mov	r4, r1
 800b144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b148:	f000 f894 	bl	800b274 <_read_r>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	bfab      	itete	ge
 800b150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b152:	89a3      	ldrhlt	r3, [r4, #12]
 800b154:	181b      	addge	r3, r3, r0
 800b156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b15a:	bfac      	ite	ge
 800b15c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b15e:	81a3      	strhlt	r3, [r4, #12]
 800b160:	bd10      	pop	{r4, pc}

0800b162 <__swrite>:
 800b162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b166:	461f      	mov	r7, r3
 800b168:	898b      	ldrh	r3, [r1, #12]
 800b16a:	05db      	lsls	r3, r3, #23
 800b16c:	4605      	mov	r5, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	4616      	mov	r6, r2
 800b172:	d505      	bpl.n	800b180 <__swrite+0x1e>
 800b174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b178:	2302      	movs	r3, #2
 800b17a:	2200      	movs	r2, #0
 800b17c:	f000 f868 	bl	800b250 <_lseek_r>
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b18a:	81a3      	strh	r3, [r4, #12]
 800b18c:	4632      	mov	r2, r6
 800b18e:	463b      	mov	r3, r7
 800b190:	4628      	mov	r0, r5
 800b192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b196:	f000 b817 	b.w	800b1c8 <_write_r>

0800b19a <__sseek>:
 800b19a:	b510      	push	{r4, lr}
 800b19c:	460c      	mov	r4, r1
 800b19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a2:	f000 f855 	bl	800b250 <_lseek_r>
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	89a3      	ldrh	r3, [r4, #12]
 800b1aa:	bf15      	itete	ne
 800b1ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1b6:	81a3      	strheq	r3, [r4, #12]
 800b1b8:	bf18      	it	ne
 800b1ba:	81a3      	strhne	r3, [r4, #12]
 800b1bc:	bd10      	pop	{r4, pc}

0800b1be <__sclose>:
 800b1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c2:	f000 b813 	b.w	800b1ec <_close_r>
	...

0800b1c8 <_write_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d07      	ldr	r5, [pc, #28]	; (800b1e8 <_write_r+0x20>)
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	4608      	mov	r0, r1
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	602a      	str	r2, [r5, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f7f6 fe5b 	bl	8001e92 <_write>
 800b1dc:	1c43      	adds	r3, r0, #1
 800b1de:	d102      	bne.n	800b1e6 <_write_r+0x1e>
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	b103      	cbz	r3, 800b1e6 <_write_r+0x1e>
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	20001288 	.word	0x20001288

0800b1ec <_close_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4d06      	ldr	r5, [pc, #24]	; (800b208 <_close_r+0x1c>)
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	602b      	str	r3, [r5, #0]
 800b1f8:	f7f6 fe67 	bl	8001eca <_close>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d102      	bne.n	800b206 <_close_r+0x1a>
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	b103      	cbz	r3, 800b206 <_close_r+0x1a>
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	20001288 	.word	0x20001288

0800b20c <_fstat_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4d07      	ldr	r5, [pc, #28]	; (800b22c <_fstat_r+0x20>)
 800b210:	2300      	movs	r3, #0
 800b212:	4604      	mov	r4, r0
 800b214:	4608      	mov	r0, r1
 800b216:	4611      	mov	r1, r2
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	f7f6 fe62 	bl	8001ee2 <_fstat>
 800b21e:	1c43      	adds	r3, r0, #1
 800b220:	d102      	bne.n	800b228 <_fstat_r+0x1c>
 800b222:	682b      	ldr	r3, [r5, #0]
 800b224:	b103      	cbz	r3, 800b228 <_fstat_r+0x1c>
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	bd38      	pop	{r3, r4, r5, pc}
 800b22a:	bf00      	nop
 800b22c:	20001288 	.word	0x20001288

0800b230 <_isatty_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4d06      	ldr	r5, [pc, #24]	; (800b24c <_isatty_r+0x1c>)
 800b234:	2300      	movs	r3, #0
 800b236:	4604      	mov	r4, r0
 800b238:	4608      	mov	r0, r1
 800b23a:	602b      	str	r3, [r5, #0]
 800b23c:	f7f6 fe61 	bl	8001f02 <_isatty>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d102      	bne.n	800b24a <_isatty_r+0x1a>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	b103      	cbz	r3, 800b24a <_isatty_r+0x1a>
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	20001288 	.word	0x20001288

0800b250 <_lseek_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4d07      	ldr	r5, [pc, #28]	; (800b270 <_lseek_r+0x20>)
 800b254:	4604      	mov	r4, r0
 800b256:	4608      	mov	r0, r1
 800b258:	4611      	mov	r1, r2
 800b25a:	2200      	movs	r2, #0
 800b25c:	602a      	str	r2, [r5, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	f7f6 fe5a 	bl	8001f18 <_lseek>
 800b264:	1c43      	adds	r3, r0, #1
 800b266:	d102      	bne.n	800b26e <_lseek_r+0x1e>
 800b268:	682b      	ldr	r3, [r5, #0]
 800b26a:	b103      	cbz	r3, 800b26e <_lseek_r+0x1e>
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	20001288 	.word	0x20001288

0800b274 <_read_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4d07      	ldr	r5, [pc, #28]	; (800b294 <_read_r+0x20>)
 800b278:	4604      	mov	r4, r0
 800b27a:	4608      	mov	r0, r1
 800b27c:	4611      	mov	r1, r2
 800b27e:	2200      	movs	r2, #0
 800b280:	602a      	str	r2, [r5, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	f7f6 fde8 	bl	8001e58 <_read>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	d102      	bne.n	800b292 <_read_r+0x1e>
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	b103      	cbz	r3, 800b292 <_read_r+0x1e>
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	20001288 	.word	0x20001288

0800b298 <_init>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	bf00      	nop
 800b29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b29e:	bc08      	pop	{r3}
 800b2a0:	469e      	mov	lr, r3
 800b2a2:	4770      	bx	lr

0800b2a4 <_fini>:
 800b2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a6:	bf00      	nop
 800b2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2aa:	bc08      	pop	{r3}
 800b2ac:	469e      	mov	lr, r3
 800b2ae:	4770      	bx	lr
